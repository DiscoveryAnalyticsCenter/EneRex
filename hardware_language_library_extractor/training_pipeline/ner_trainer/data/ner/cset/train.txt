In O
our O
experiments O
the O
deep O
models O
usually O
required O
8 B-compute_time
- I-compute_time
12 I-compute_time
hours L-compute_time
to O
train O
on O
Nvidia B-hardware_resources
GTX I-hardware_resources
580 I-hardware_resources
GPUs L-hardware_resources 
to O
reach O
the O
state-of-the-art O
performance O
on O
TIMIT O
and O
CIFAR-10 O
datasets O
. O

The O
simulations O
were O
performed O
using O
C U-p_language
on O
an O
Intel B-hardware_resources
Pentium I-hardware_resources
dual I-hardware_resources
core L-hardware_resources
machine O
with O
Linux B-hardware_platform
operating I-hardware_platform
system L-hardware_platform
. O

The O
Python U-p_language
overhead O
of O
turbulence O
solvers O
is O
mostly O
due O
to O
callbacks O
to O
Python U-p_language
from O
C++ U-p_language
for O
defining O
boundaries O
and O
initial O
conditions O
. O

Consequently O
, O
all O
single-node O
benchmark O
tests O
were O
run O
on O
a O
standalone O
Sandy B-hardware_resources
Bridge I-hardware_resources
EP L-hardware_resources
node O
with O
the O
same O
type O
of O
CPU U-hardware_resources
and O
otherwise O
similar O
characteristics O
. O

We O
validated O
our O
system O
design O
using O
Matlab U-p_language
simulations O
, O
and O
implemented O
the O
system O
on O
ns-2 O
to O
conduct O
more O
realistic O
experiments O
. O

Normally O
, O
this O
requires O
nontrivial O
objectoriented O
or O
generative O
programming O
in O
C++ U-p_language
, O
but O
dynamic O
typing O
in O
Python U-p_language
makes O
an O
otherwise O
complicated O
technical O
problem O
trivial O
. O

in O
MATLAB U-p_language
's O
.fig O
format O
. O

As O
you O
can O
see O
tym O
versions O
are O
far O
more O
efficient O
than O
Octave U-p_language
/ O
MATLAB U-p_language
version O
. O

Individual O
Theano U-p_library
ops O
must O
still O
implement O
a O
grad O
method O
, O
but O
a O
comparatively O
small O
number O
of O
basic O
ops O
can O
be O
used O
to O
implement O
the O
comparatively O
large O
number O
of O
more O
complex O
models O
that O
appear O
in O
most O
machine O
learning O
libraries).However O
, O
another O
aspect O
of O
Pylearn2 U-p_library
's O
design O
philosophy O
is O
that O
no O
user O
should O
be O
forced O
to O
learn O
the O
entire O
framework O
. O

The O
latter O
is O
the O
default O
behavior O
for O
users O
of O
the O
FEniCS U-p_library
Python U-p_language
interface O
. O

For O
the O
computations O
, O
the O
workstation B-hardware_platform
Dell I-hardware_platform
Precision I-hardware_platform
T7500 L-hardware_platform
with O
two B-hardware_resources
processors I-hardware_resources
Intel I-hardware_resources
® I-hardware_resources
Xeon I-hardware_resources
® I-hardware_resources
X5690 I-hardware_resources
( I-hardware_resources
Six I-hardware_resources
Core I-hardware_resources
, I-hardware_resources
3.46GHz I-hardware_resources
, I-hardware_resources
12 I-hardware_resources
MB I-hardware_resources
Cache12 I-hardware_resources
) L-hardware_resources
and O
48 B-hardware_resources
GB I-hardware_resources
1333MHz I-hardware_resources
DDR3 I-hardware_resources
ECC I-hardware_resources
RDIMM L-hardware_resources
has O
been O
used O
. O

The O
numerical O
tests O
were O
performed O
by O
running O
a O
MATLAB B-p_language
R I-p_language
7 I-p_language
( I-p_language
64 I-p_language
bit I-p_language
) L-p_language
code O
on O
platform O
featuring O
an O
Intel B-hardware_resources
R I-hardware_resources
Xeon I-hardware_resources
R I-hardware_resources
( I-hardware_resources
2.93 I-hardware_resources
GHz I-hardware_resources
) L-hardware_resources
with O
8 B-hardware_resources
cores L-hardware_resources
and O
12 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

For O
evaluation O
, O
we O
used O
selected O
applications O
from O
the O
Rodinia O
benchmark O
suite O
# O
b3 O
and O
the O
Nvidia B-p_library
CUDA I-p_library
SDK L-p_library
. O

We O
run O
these O
experiments O
on O
a O
cluster B-hardware_platform
of I-hardware_platform
12 I-hardware_platform
nodes L-hardware_platform
, O
each O
with O
an O
8-core B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
CPU L-hardware_resources
, O
16 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
and O
1 B-hardware_resources
TB I-hardware_resources
SATA I-hardware_resources
HDD L-hardware_resources
, O
and O
connected O
by O
Gigabit B-hardware_resources
Ethernet L-hardware_resources
. O

The O
Xeon B-hardware_resources
Phi L-hardware_resources
is O
based O
on O
Intel O
Many O
Integrated O
Core O
Architecture O
. O

The O
exchange O
of O
alerts O
proved O
to O
be O
satisfactory O
, O
obtaining O
a O
throughput O
performance O
higher O
than O
150 O
messages O
per O
second O
on O
an O
Intel-Pentium B-hardware_resources
M I-hardware_resources
1.4 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
with O
512 B-hardware_resources
MB I-hardware_resources
RAM L-hardware_resources
, O
analyzers O
and O
managers O
on O
the O
same O
machine O
running O
Linux B-hardware_platform
2.6.8 L-hardware_platform
, O
using O
Java U-p_language
HotSpot B-hardware_platform
Client I-hardware_platform
VM I-hardware_platform
1.4.2 L-hardware_platform
for O
the O
Java-based U-p_language
broker O
. O

The O
tests O
have O
been O
carried O
out O
on O
LLNL U-hardware_platform
's O
distributed-memory O
parallel O
platforms O
, O
specifically O
the O
" B-hardware_platform
hera I-hardware_platform
" I-hardware_platform
cluster L-hardware_platform
using O
Intel B-hardware_resources
compilers L-hardware_resources
# O
b27 O
. O

Experiments O
are O
run O
on O
a O
12-core B-hardware_platform
machine L-hardware_platform
with O
Intel B-hardware_resources
Xeon I-hardware_resources
X5650 I-hardware_resources
processors L-hardware_resources
at O
2.67 B-hardware_resources
GHz L-hardware_resources
with O
hyperthreading O
enabled O
and O
96 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

We O
used O
a O
64-bit O
version O
of O
MATLAB B-p_language
7.8 L-p_language
. O

As O
all O
data O
is O
potentially O
shared O
in O
Java U-p_language
programs O
, O
one O
must O
determine O
which O
data O
Figure O
12 O
: O
COMPUTER O
sending O
data O
to O
PRINTER O
is O
read O
/ O
written O
by O
more O
than O
one O
thread O
, O
and O
protect O
it O
accordingly O
. O

The O
laptop U-hardware_platform
used O
an O
Intel B-hardware_resources
i3 I-hardware_resources
CPU I-hardware_resources
( I-hardware_resources
M350 I-hardware_resources
) L-hardware_resources
running O
at O
2.27 B-hardware_resources
GHz L-hardware_resources
and O
contained O
3 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
. O

The O
experiments O
have O
been O
performed O
on O
a O
3GHz B-hardware_resources
Intel I-hardware_resources
Xeon L-hardware_resources
machine O
with O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
running O
Linux U-hardware_platform
. O

Figure O
15 O
shows O
the O
performance O
comparison O
between O
the O
Xeon B-hardware_resources
Phi L-hardware_resources
and O
Xeon U-hardware_resources
for O
six O
MapReduce O
applications O
. O

2 O
An O
archived O
version O
of O
the O
relevant O
discussion O
in O
a O
Java U-p_language
newsgroup O
can O
be O
found O
at O
http://permalink.gmane.org/gmane.comp.java.openjdk.core-libs.devel/2628 O
. O

We O
obtain O
the O
following O
Analytical O
Redundancy O
Relations O
: O
ARR1 O
: O
0 O
1 O
) O
1 O
1 O
( O
sC O
1 O
1 O
1 O
1 O
1 O
1 O
1 O
1 O
= O
− O
+ O
− O
Df O
s O
C O
De O
s O
C O
R O
MSf O
( O
5 O
) O
ARR2 O
: O
0 O
1 O
) O
1 O
1 O
( O
sC O
1 O
2 O
2 O
2 O
2 O
2 O
1 O
2 O
= O
− O
+ O
− O
Df O
s O
C O
De O
s O
C O
R O
DfThe O
bond O
graph O
model O
is O
then O
converted O
into O
synopsis O
diagram O
simulated O
within O
Simulink O
/ O
Matlab U-p_language
environment O
. O

The O
corresponding O
code O
in O
C++ U-p_language
, O
Java U-p_language
, O
or O
C B-p_language
# L-p_language
would O
usually O
introduce O
extra O
classes O
to O
help O
" O
simulate O
" O
flexible O
references O
, O
resulting O
in O
frameworks O
with O
potentially O
a O
large O
number O
of O
classes O
. O

Tables O
2 O
and O
3 O
show O
the O
classification O
error O
rates O
obtained O
for O
the O
tested O
methods O
, O
e.g. O
the O
first O
near O
neighbor O
classifier O
based O
on O
the O
δ O
erp O
, O
δ O
dtw O
and O
δ O
twed O
distances O
( O
1-NN O
δ O
erp O
, O
1-NN O
δ O
dtw O
and O
1-NN O
δ O
twed O
) O
, O
the O
Gaussian O
RBF O
kernel O
SVM O
based O
on O
the O
same O
distances O
( O
SVM O
δ O
erp O
, O
SVM O
δ O
dtw O
and O
SVM O
δ O
twed O
) O
and O
Euclidean O
distance O
, O
and O
the O
Gaussian O
RBF O
kernel O
SVM O
based O
on O
the O
REDK O
kernels O
( O
SVM O
REDK O
erp O
, O
SVM O
REDK O
dtw O
and O
SVM O
REDK O
twed O
) O
. O

It O
is O
the O
authors O
' O
experiences O
that O
Python U-p_language
leads O
to O
a O
design O
more O
biased O
toward O
the O
generative O
style O
than O
does O
C++ U-p_language
, O
perhaps O
because O
the O
generative O
style O
becomes O
so O
obvious O
in O
a O
language O
with O
dynamic O
typing O
. O

Our O
algorithms O
are O
implemented O
using O
the O
CUDA B-p_library
runtime I-p_library
API L-p_library
and O
compiled O
with O
the O
CUDA B-p_library
toolkit I-p_library
version I-p_library
5.5 L-p_library
, O
gcc B-p_library
version I-p_library
4.7 L-p_library
and O
the O
-O O
3 O
optimization O
flag O
. O

We O
report O
the O
performance O
of O
our O
MRPhi O
on O
the O
Xeon B-hardware_resources
Phi L-hardware_resources
and O
Phoenix++ O
on O
the O
Xeon U-hardware_resources
. O

This O
function O
3 O
is O
based O
on O
the O
Matlab U-p_language
function O
nchoosek(tab O
, O
k O
) O
given O
the O
array O
of O
all O
the O
combination O
of O
k O
elements O
of O
the O
vector O
tab O
. O

We O
carried O
out O
performance O
and O
scaling O
tests O
on O
a O
6 B-hardware_resources
node I-hardware_resources
GPU L-hardware_resources
cluster U-hardware_platform
at O
Cyfronet O
. O

We O
conduct O
our O
experiments O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
Phi I-hardware_resources
coprocessor I-hardware_resources
5110P L-hardware_resources
. O
The O
hardware O
specification O
has O
been O
summarized O
in O
Section O
II-B O
and O
the O
Intel B-hardware_resources
compiler L-hardware_resources
is O
used O
. O

It O
is O
built O
on O
top O
of O
the O
lab O
's O
mathematical O
expression O
compiler O
, O
Theano U-p_library
# O
b3 O
# O
b1 O
. O

Our O
implementation O
is O
written O
in O
MATLAB U-p_language
using O
the O
Jacket B-p_library
GPU I-p_library
library I-p_library
( I-p_library
Ac-celerEyes I-p_library
) L-p_library
. O

We O
used O
implementations O
of O
standard O
learning O
techniques O
in O
the O
scikit U-p_library
library O
for O
comparisons O
# O
b33 O
( O
v. O
0.14 O
) O
. O

We O
build O
a O
simulator O
with O
the O
Random O
- O
Schedule O
implemented O
in O
Python U-p_language
. O

We O
used O
the O
MATLAB U-p_language
BVP4C O
function O
to O
calculate O
a O
minimum O
- O
jerk O
trajectory O
for O
an O
arbitrary O
surface O
. O

The O
experiment O
is O
done O
in O
a O
computer U-hardware_platform
with O
1.86GH B-hardware_resources
dual-core I-hardware_resources
CPU L-hardware_resources
and O
2 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
, O
and O
the O
result O
is O

e.g. O
MATLAB U-p_language
's O
Mex U-p_library
or O
Python U-p_language
's O
F2Py U-p_library
) O
. O

Thus O
we O
performed O
detailed O
numerical O
comparison O
of O
seven O
algorithms O
: O
quickselect O
, O
quickselect O
on O
GPU U-hardware_resources
, O
GPU U-hardware_resources
radix O
sort O
, O
Brent O
's O
method O
of O
optimization O
, O
cutting O
plane O
, O
bisection O
and O
Brent O
's O
method O
of O
solving O
nonlinear O
equations O
. O

It O
is O
well O
- O
known O
that O
termination O
of O
computer O
programs O
is O
an O
undecidable O
property O
, O
hence O
a O
non O
- O
termination O
analyser O
for O
Java U-p_language
bytecode O
can O
be O
used O
to O
complement O
any O
existing O
termination O
analyser O
, O
e.g. O
, O
AProVE O
# O
b16 O
, O
COSTA O
# O
b0 O
or O
Julia O
# O
b24 O
. O

Recently O
, O
a O
dual O
- O
pivot O
algorithm O
proposed O
by O
Yaroslavskiy O
received O
much O
attention O
, O
because O
a O
variant O
of O
it O
replaced O
the O
well O
- O
engineered O
quicksort O
algorithm O
in O
Sun O
's O
Java B-p_language
7 L-p_language
runtime O
library O
. O

Only O
a O
few O
recent O
papers O
address O
the O
problem O
of O
proving O
non O
- O
termination O
of O
imperative O
programs O
: O
# O
b6 O
considers O
Java U-p_language
bytecode O
, O
# O
b13 O
considers O
programs O
written O
in O
the O
C B-p_language
language L-p_language
and O
# O
b26 O
considers O
imperative O
programs O
that O
can O
be O
described O
as O
logical O
formulae O
written O
in O
a O
simple O
whilelanguage O
. O

We O
resolved O
the O
issue O
by O
using O
the O
native B-p_language
C L-p_language
implementation O
from O
OpenSSL O
and O
exposing O
it O
to O
Java U-p_language
code O
as O
a O
Dalvik O
VM O
intrinsic O
function O
, O
rather O
than O
a O
JNI U-p_library
native O
method O
. O

We O
run O
all O
three O
solvers O
with O
a O
timeout O
of O
1800 O
seconds O
and O
a O
memory O
limit O
of O
12 B-hardware_resources
GB L-hardware_resources
on O
a O
machine O
that O
provides O
2 B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
X5677 I-hardware_resources
CPUs I-hardware_resources
of I-hardware_resources
4 I-hardware_resources
cores L-hardware_resources
each O
and O
96 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

Our O
experimental O
platform O
is O
a O
cluster B-hardware_platform
of I-hardware_platform
20 I-hardware_platform
computing I-hardware_platform
nodes L-hardware_platform
connected O
via O
gigabit B-hardware_resources
links L-hardware_resources
: O
Each O
node O
runs O
a O
Linux B-hardware_platform
system L-hardware_platform
with O
Intel B-hardware_resources
Xeon I-hardware_resources
CPU I-hardware_resources
E5520 L-hardware_resources
at O
2.27 B-hardware_resources
GHz L-hardware_resources
and O
20 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

Similar O
code O
transformations O
are O
used O
in O
Orthogonally B-p_language
Persistent I-p_language
Java L-p_language
# O
b8 O
. O

a O
) O
Experiment O
Platform O
: O
: O
All O
profiling O
is O
performed O
on O
an O
off-the-shelf O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
CPU I-hardware_resources
( I-hardware_resources
M620 I-hardware_resources
) L-hardware_resources
with O
4 B-hardware_resources
cores L-hardware_resources
, O
8 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
, O
Intel B-hardware_resources
SSD I-hardware_resources
140 I-hardware_resources
GB I-hardware_resources
( I-hardware_resources
320-Series I-hardware_resources
) L-hardware_resources
under O
a O
Debian B-hardware_platform
Linux I-hardware_platform
with I-hardware_platform
X86 I-hardware_platform
64 I-hardware_platform
kernel I-hardware_platform
v3.11.8 I-hardware_platform
- I-hardware_platform
1 L-hardware_platform
. O

All O
Java U-p_language
runtime O
tests O
were O
preceeded O
by O
a O
warmup O
phase O
for O
the O
just O
- O
in O
- O
time O
compiler O
( O
JIT O
) O
, O
in O
which O
we O
let O
each O
algorithm O
sort O
10 O
000 O
inputs O
of O
length O
100 O
000 O
. O

The O
experiments O
are O
run O
on O
a O
machine O
with O
an O
Intel B-hardware_resources
Core2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
at I-hardware_resources
2.2 I-hardware_resources
GHz L-hardware_resources
and O
3 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

For O
the O
GPU U-hardware_resources
settings O
, O
we O
compare O
two O
explicitly O
parallel O
GPU U-hardware_resources
adaptations O
of O
dual O
decomposition O
: O
GPU U-hardware_resources
SVM O
# O
b7 O
, O
an O
adaptation O
of O
LibSVM O
for O
GPUs U-hardware_resources
, O
and O
GTSVM O
# O
b12 O
. O

The O
factorization O
of O
the O
Daubechies O
' O
polynomial O
R O
N O
( O
y O
) O
is O
discussed O
in O
Burrus O
# O
b1 O
, O
on O
p. O
78 O
and O
the O
Matlab U-p_language
program O
is O
[ O
hn O
, O
hin]=daub(N O
) O
in O
Appendix O
C. O
They O
work O
with O
the O
zeros O
of O
the O
polynomial O
R O
N O
and O
provide O
a O
number O
of O
manipulations O
for O
finding O
a O
more O
stable O
factorization.a O
[ O
m],|ξ| O
( O
z O
) O
= O
1 O
2 O
|M O
1 O
( O
z O
) O
M O
2 O
( O
z)| O
2 O
, O
( O
23 O
) O

This O
resulted O
in O
parameter O
choices O
interactions O
= O
5 O
5 O
= O
3 O
125 O
simulations O
, O
that O
were O
computed O
in O
43 B-compute_time
seconds L-compute_time
on O
an O
eight-core B-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
TM I-hardware_resources
i7 I-hardware_resources
CPU L-hardware_resources
at O
2.80GHz U-hardware_resources
equipped O
with O
4 B-hardware_resources
Gb I-hardware_resources
RAM L-hardware_resources
and O
running O
Ubuntu B-hardware_platform
GNU/Linux I-hardware_platform
13.10 I-hardware_platform
64bit L-hardware_platform
. O

Furthermore O
, O
the O
impact O
of O
the O
availabihty O
of O
a O
priori O
knowledge O
of O
A/ O
on O
the O
estimation O
error O
of O
u O
is O
clear O
where O
the O
gap O
between O
the O
CR O
bounds O
on O
the O
estimation O
error O
with O
and O
without O
knowledge O
of O
A/ O
increases O
with O
A'^. O
Finally O
, O
the O
analytical O
expression O
for O
the O
estimation O
error O
for O
the O
averaging O
estimator O
presented O
in O
( O
23 O
) O
is O
verified O
via O
Matlab U-p_language
simulations O
. O

Figure O
9 O
shows O
the O
running O
time O
measurements O
we O
got O
using O
Oracle O
's O
Java B-p_language
8 L-p_language
. O

In O
Section O
4 O
, O
we O
show O
how O
to O
automatically O
generate O
a O
constraint O
logic O
program O
PCLP O
from O
a O
Java U-p_language
bytecode O
program O
P O
so O
that O
the O
non O
- O
termination O
of O
PCLP O
entails O
that O
of O
P O
. O

Programming O
level O
virtualization O
provides O
sandboxing O
and O
managed O
execution O
for O
applications O
developed O
with O
a O
specific O
technology O
or O
programming O
language O
( O
i.e. O
Java U-p_language
, O
.NET U-p_language
, O
and O
Python U-p_language
) O
. O

Section O
3 O
provides O
a O
formal O
definition O
of O
exactness O
for O
the O
abstraction O
of O
a O
Java U-p_language
bytecode O
instruction O
into O
a O
linear O
constraint O
. O

During O
our O
experiments O
with O
non O
- O
terminating O
Java U-p_language
bytecode O
programs O
, O
we O
made O
the O
empirical O
observation O
that O
the O
non O
- O
termination O
of O
PCLP O
entails O
that O
of O
P O
when O
PCLP O
is O
an O
exact O
translation O
of O
P O
. O

The O
choice O
of O
which O
attribute O
to O
put O
on O
which O
axis O
can O
change O
to O
support O
different O
pieces O
of O
software O
too O
( O
for O
example O
, O
Theano U-p_library
convolution O
prefers O
batch O
size O
× O
channels O
× O
rows O
× O
columns O
, O
while O
cuda U-hardware_resources
- O
convnet O
# O
b28 O
( O
which O
is O
wrapped O
in O
Pylearn2 U-p_library
) O
prefers O
channels O
× O
rows O
× O
columns O
× O
batch O
size O
) O
. O

Its O
first O
argument O
represents O
the O
kernel O
's O
arguments O
as O
a O
type O
string O
as O
accepted O
by O
the O
struct O
module O
in O
Python U-p_language
standard O
library O
, O
e.g. O
" O
P O
" O
in O
the O
example O
specifies O
a O
single O
pointer O
argument O
. O

In O
this O
paper O
, O
we O
address O
the O
issue O
of O
automatically O
proving O
non O
- O
termination O
of O
sequential O
Java U-p_language
bytecode O
programs O
. O

The O
algorithms O
were O
implemented O
in O
Matlab B-p_language
R2007b L-p_language
and O
run O
on O
the O
laptop U-hardware_platform
with O
2Gb B-hardware_resources
RAM L-hardware_resources
and O
processor B-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
, I-hardware_resources
T7200 I-hardware_resources
, I-hardware_resources
2.00GHz L-hardware_resources
. O

All O
experiments O
were O
performed O
on O
an O
Intel B-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
E8400 I-hardware_resources
3.00GHz I-hardware_resources
CPU L-hardware_resources
with O
4 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
under O
Linux B-hardware_platform
( I-hardware_platform
Ubuntu I-hardware_platform
lucid I-hardware_platform
, I-hardware_platform
kernel I-hardware_platform
2.6.32 I-hardware_platform
- I-hardware_platform
24-generic I-hardware_platform
) L-hardware_platform
. O

The O
search O
strategy O
discussed O
above O
is O
implemented O
in O
MATLAB U-p_language
. O

8 O
shows O
the O
ratio O
of O
CPU O
time O
per O
iteration O
over O
ABP1 O
as O
the O
benchmark O
. O

The O
power O
feedback O
loop O
and O
PI O
controller O
were O
implemented O
in O
MATLAB U-p_language
. O

We O
extract O
features O
using O
pre O
- O
trained O
ImageNet O
CNN O
# O
b14 O
from O
Caffe U-p_library
# O
b11 O
, O
and O
use O
it O
as O
input O
to O
the O
conditional O
latent O
tree O
model O
( O
CLTM O
) O
, O
a O
type O
of O
conditional O
random O
field O
( O
CRF O
) O
. O

All O
experiments O
were O
executed O
on O
a O
pair O
of O
2.66 B-hardware_resources
GHz I-hardware_resources
dual-core I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
processors L-hardware_resources
with O
16 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
running O
Mac B-hardware_platform
OS I-hardware_platform
X I-hardware_platform
10.4.11 L-hardware_platform
. O

The O
processors O
in O
the O
GPU U-hardware_resources
are O
organized O
into O
30 O
groups O
of O
8 B-hardware_resources
cores L-hardware_resources
. O

With O
the O
minimum O
speed O
MILP O
constraints O
the O
solution O
took O
approximately O
one O
minute O
to O
compute O
on O
a O
2.3Ghz B-hardware_resources
Intel I-hardware_resources
i7 I-hardware_resources
processor L-hardware_resources
, O
while O
without O
the O
mixed O
integer O
constraints O
it O
required O
approximately O
0.1s O
. O

We O
implemented O
different O
versions O
of O
the O
KPZ O
and O
KMC O
models O
using O
CUDA U-p_library
, O
OpenCL U-p_library
and O
MPI U-p_library
for O
the O
different O
platforms O
mentioned O
in O
Tables B-hardware_platform
1 L-hardware_platform
, O
2 O
and O
3 O
. O

It O
gathers O
Theano U-p_library
expressions O
assembled O
by O
the O
Model O
and O
other O
classes O
, O
synthesizes O
them O
into O
expressions O
for O
learning O
rules O
, O
compiles O
the O
learning O
rules O
into O
Theano U-p_library
functions O
that O
accomplish O
the O
learning O
, O
and O
executes O
the O
Theano U-p_library
expressions O
. O

All O
experiments O
were O
performed O
using O
MATLAB B-p_language
2009b L-p_language
on O
a O
Linux B-hardware_platform
Workstation I-hardware_platform
( I-hardware_platform
RedHat I-hardware_platform
5.2 I-hardware_platform
) L-hardware_platform
with O
2 B-hardware_resources
Quad-Core I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
3.0GHz I-hardware_resources
processors L-hardware_resources
and O
32 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

The O
attached O
NVIDIA B-hardware_resources
Tesla I-hardware_resources
C2075 I-hardware_resources
graphics I-hardware_resources
card L-hardware_resources
contains O
448 B-hardware_resources
cores L-hardware_resources
and O
6 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
global I-hardware_resources
memory L-hardware_resources
. O

With O
10 O
EM O
iterations O
and O
10 O
MAP O
iterations O
, O
the O
segmentation O
of O
a O
600 O
× O
338 O
image O
takes O
about O
40 B-compute_time
seconds L-compute_time
on O
a O
2.53GHz B-hardware_resources
Intel(R I-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
i5 I-hardware_resources
CPU L-hardware_resources
. O

None O
of O
the O
codes O
explicitly O
uses O
the O
eight B-hardware_resources
cores L-hardware_resources
, O
although O
some O
operations O
( O
like O
dense O
QR O
factorization O
) O
are O
automatically O
parallelized O
by O
MATLAB U-p_language
. O

They O
deployed O
a O
number O
of O
Intel B-hardware_resources
Mote I-hardware_resources
2 L-hardware_resources
# O
b12 O
nodes O
on O
chest O
, O
waist O
, O
and O
the O
right O
ankle O
. O

Only O
the O
Intel B-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
960 L-hardware_resources
with O
NVIDIA B-hardware_resources
GTX I-hardware_resources
480 L-hardware_resources
results O
are O
shown O
. O

To O
find O
crashes O
, O
we O
focus O
on O
Java U-p_language
exceptions O
, O
which O
make O
programs O
abnormally O
stop O
. O

The O
scaling O
studies O
were O
performed O
on O
a O
single O
computational O
node O
consisting O
of O
a O
dual B-hardware_resources
socket I-hardware_resources
Intel I-hardware_resources
E5 I-hardware_resources
- I-hardware_resources
2670v2 I-hardware_resources
chipset L-hardware_resources
. O

Quad B-hardware_resources
CPU L-hardware_resources
, O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
and O
an O
NVIDIA B-hardware_resources
Geforce I-hardware_resources
GTX580 I-hardware_resources
GPU L-hardware_resources
with O
3 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
, O
P O
h O
= O
16 O
SMs O
and O
M O
h O
= O
48 O
KB O
per O
SM O
( O
with O
additional O
16 O
KB O
used O
for O
caching O
local O
memory O
) O
. O

Feinberg O
reported O
that O
Voldemort O
performs O
at O
least O
one O
read O
before O
every O
write O
( O
average O
of O
1 O
seek O
, O
between O
1 O
- O
3 O
seeks O
) O
, O
and O
writes O
to O
the O
BerkeleyDB O
Java U-p_language
Edition O
backend O
flush O
to O
durable O
storage O
either O
every O
30 B-compute_time
seconds L-compute_time
or O
20 B-hardware_resources
MB L-hardware_resources
- O
whichever O
comes O
first O
# O
b20 O
. O

During O
benchmarking O
, O
we O
disabled O
the O
CPU U-hardware_resources
power-saving O
features O
, O
forcing O
the O
CPU U-hardware_resources
to O
be O
at O
maximum O
performance O
( O
using O
the O
cpufreq-set O
command O
) O
and O
also O
we O
tied O
the O
process O
to O
one B-hardware_resources
core L-hardware_resources
( O
using O
the O
taskset O
command).Unfortunately O
the O
clock O
( O
) O
call O
, O
in O
GNU/Linux U-hardware_platform
systems O
, O
has O
a O
time O
resolution O
of O
0.01sec O
, O
so O
it O
was O
too O
coarse O
to O
be O
used O
for O
the O
graphs O
in O
section O
A.2.1 O
: O
for O
those O
graphs O
, O
only O
the O
TSC O
was O
used O
( O
and O
then O
cycles O
were O
converted O
to O
nanoseconds O
, O
using O
the O
average O
value O
of O
cycles_per_clock O
) O
. O

The O
times O
indicated O
are O
the O
CPU U-hardware_resources
time O
for O
the O
Deladas B-p_library
compiler L-p_library
, O
as O
reported O
by O
the O
class O
java.lang.management U-p_language
. O

We O
used O
Matlab B-p_library
- I-p_library
MPI L-p_library
for O
this O
implementation O
. O

However O
, O
after O
establishing O
the O
CCM O
equations O
for O
the O
absorbing O
sets O
of O
interest O
, O
identifying O
all O
good O
SR O
- O
SCB O
codes O
for O
r=5 O
and O
p O
= O
67 O
shown O
in O
Table O
II O
is O
completed O
in O
about O
five O
minutes O
using O
a O
simple O
Matlab U-p_language
implementation O
. O

The O
computation O
takes O
5 B-compute_time
minutes L-compute_time
of O
CPU U-hardware_resources
time O
on O
a O
1.0 B-hardware_resources
GHz I-hardware_resources
Pentium-III L-hardware_resources
PC U-hardware_platform
with O
256 B-hardware_resources
MB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

On O
the O
contrary O
, O
registering O
a O
userdefined O
scheme O
in O
a O
library O
coded O
in O
a O
statically O
typed O
language O
( O
Fortran U-p_language
, O
C O
, O
C++ U-p_language
, O
Java U-p_language
, O
or O
C B-p_language
# L-p_language
) O
requires O
either O
an O
extension O
of O
the O
many O
switch O
or O
if O
- O
else O
statements O
of O
a O
factory O
function O
in O
the O
library O
, O
or O
sophisticated O
techniques O
to O
overcome O
the O
constraints O
of O
static O
typing O
. O

The O
above O
is O
exacerbated O
by O
the O
fact O
that O
some O
of O
Java U-p_language
's O
behaviors O
have O
yet O
to O
be O
modeled O
by O
JML U-p_language
or O
the O
underlying O
SMT O
provers O
( O
floating O
point O
semantics O
are O
one O
example O
) O
. O
• O

Pre O
- O
allocation O
of O
arrays O
is O
not O
mandatory O
in O
Octave U-p_language
/ O
MATLAB U-p_language
and O
whenever O
a O
value O
is O
assigned O
to O
a O
location O
that O
is O
not O
within O
the O
range O
of O
the O
array O
indexes O
, O
the O
array O
is O
resized O
to O
store O
the O
new O
value O
. O

ECM-sketches O
were O
implemented O
in O
Java B-p_language
1.7 L-p_language
using O
32-bit O
addressing O
, O
and O
executed O
on O
a O
single B-hardware_resources
idle I-hardware_resources
core L-hardware_resources
of O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
1.6 I-hardware_resources
GHz L-hardware_resources
machine O
. O

The O
work O
in O
the O
immediate O
future O
falls O
into O
four O
areas:• O
Completing O
the O
modeling O
of O
the O
features O
of O
basic O
JML U-p_language
sequential O
Java U-p_language
, O
and O
concurrent O
Java U-p_language
• O
Migrating O
to O
Java B-p_language
8 L-p_language
and O
supporting O
its O
significant O
new O
features O
( O
closures O
and O
annotations O
) O
• O
Adding O
some O
additional O
tools O
, O
valuable O
for O
both O
education O
and O
specification O
development O
, O
such O
as O
automatic O
test O
generation O
and O
documentation O
• O
Enhancing O
documentation O
, O
especially O
tutorials O
and O
instructional O
material O
But O
the O
more O
interesting O
activities O
are O
what O
OpenJML U-p_library
enables O
. O

The O
Levenberg O
and O
Marquardt O
algorithm O
( O
LMA O
) O
provided O
by O
the O
MATLAB B-p_language
( I-p_language
Version I-p_language
2009b I-p_language
) L-p_language
NN B-p_library
toolkit L-p_library
is O
used O
for O
the O
training O
. O

The O
testbed O
used O
to O
collect O
measurements O
consists O
of O
commodity O
servers O
( O
Dell B-hardware_platform
Poweredge I-hardware_platform
850 L-hardware_platform
, O
3GHz B-hardware_resources
Xeon I-hardware_resources
, I-hardware_resources
Intel I-hardware_resources
82571EB I-hardware_resources
Gigabit I-hardware_resources
NIC L-hardware_resources
) O
connected O
via O
a O
router O
and O
gigabit O
switches O
. O

Object O
- O
relational O
mapping O
( O
ORM O
) O
tools O
and O
libraries O
, O
such O
as O
Java B-p_library
's I-p_library
Hibernate L-p_library
, O
provide O
a O
popular O
alternative O
by O
wrapping O
database O
access O
and O
update O
in O
typesafe O
object O
- O
oriented O
interfaces O
, O
but O
this O
leads O
to O
a O
loss O
of O
control O
over O
the O
structure O
of O
generated O
queries O
, O
which O
makes O
it O
difficult O
to O
understand O
and O
improve O
performance O
# O
b13 O
.To O
avoid O
these O
so O
- O
called O
impedance O
mismatch O
problems O
, O
a O
number O
of O
language O
- O
integrated O
query O
techniques O
for O
embedding O
queries O
into O
general O
- O
purpose O
programming O
languages O
have O
emerged O
, O
which O
seek O
to O
reconcile O
the O
goals O
of O
type O
- O
safety O
and O
programmer O
control O
. O

These O
various O
threads O
include O
the O
following:• O
the O
Java B-p_language
Modeling I-p_language
Language I-p_language
( I-p_language
JML I-p_language
community I-p_language
) L-p_language
# O
b45 O
. O

For O
both O
the O
techniques O
, O
experiments O
are O
done O
using O
Intel(R B-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
2670QM I-hardware_resources
CPU I-hardware_resources
@ I-hardware_resources
2.20GHz L-hardware_resources
machine O
with O
4 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
, O
running O
Red B-hardware_platform
Hat I-hardware_platform
Linux I-hardware_platform
version I-hardware_platform
2.6.32 I-hardware_platform
- I-hardware_platform
358.6.2.el6.x86 I-hardware_platform
64 L-hardware_platform
. O

A O
simple O
matlab U-p_language
or O
octave U-p_language
script O
convergence.m O
is O
included O
to O
test O
the O
order O
of O
convergence O
. O

The O
table O
' O
bug O
' O
contains O
the O
records O
of O
bug O
reports O
and O
we O
select O
a O
set O
of O
' O
bug O
i O
d O
' O
corresponding O
to O
each O
Java U-p_language
exception O
by O
using O
keywords O
mapped O
in O
the O
field O
' O
short O
desc O
' O
. O

For O
example O
, O
the O
following O
annotations:1 O
To O
be O
type O
- O
checked O
by O
the O
Java U-p_language
compiler O
it O
is O
necessary O
to O
add O
a O
cast O
before O
calling O
clone O
( O
) O
on O
value O
. O

We O
present O
results O
on O
various O
benchmark O
datasets O
considered O
in O
Section O
4 O
for O
Gaussian O
K(x O
, O
y O
) O
= O
exp O
−x−y O
2 O
2 O
2σ O
2 O
and O
Manhattan O
: O
K(x O
, O
y O
) O
= O
− O
x O
− O
y O
1 O
kernels O
. O

Note O
that O
our O
implementation O
as O
of O
now O
only O
implements O
asymptotically O
fast O
PLE O
decomposition O
up O
to O
e O
= O
8 O
, O
for O
e O
∈ O
{ O
9 O
, O
10 O
} O
Newton-John O
Table O
4 O
: O
Elimination O
of O
10 O
, O
000 O
× O
10 O
, O
000 O
matrices O
on O
2.66 B-hardware_resources
Ghz I-hardware_resources
Intel I-hardware_resources
i7 L-hardware_resources

IMB O
sendrecv O
benchmark O
results O
on O
two O
SuperMUC B-hardware_platform
nodes L-hardware_platform
for O
different O
CPU U-hardware_resources
clock O
speed O
settings O
with O
16 O
processes O
per O
node O
( O
filled O
symbols O
) O
and O
one O
process O
per O
node O
( O
open O
symbols O
) O
. O

MH O
classifier O
with O
Matlab U-p_language
language O
on O
Matlab B-p_library
2011b L-p_library
platform O
( O
Mathworks O
Inc. O
U.S. O
) O
, O
and O
multi O
- O
label O
AdaBoost O
. O

We O
use O
our O
modified O
Hadoop U-p_library
implementation O
described O
in O
Section O
3.1 O
, O
using O
largely O
default O
Hadoop U-p_library
configuration O
options O
, O
aside O
from O
increasing O
io.sort.mb O
to O
200 O
and O
increasing O
the O
Java U-p_language
heap O
size O
for O
worker O
processes O
to O
800 O
MB O
. O

The O
experiments O
were O
run O
on O
a O
6-core B-hardware_resources
2.67 I-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
machine L-hardware_resources
, O
with O
6 B-hardware_resources
GB L-hardware_resources
of O
physical B-hardware_resources
memory L-hardware_resources
, O
under O
RedHat B-hardware_platform
Enterprise I-hardware_platform
Linux I-hardware_platform
4.0 L-hardware_platform
. O

The O
algorithm O
's O
implementation O
and O
all O
the O
computations O
were O
performed O
with O
Matlab U-p_language
and O
the O
Image B-p_library
Processing I-p_library
Toolbox L-p_library
. O

We O
use O
scikit B-p_library
- I-p_library
learn L-p_library
, O
an O
open O
source O
machine O
learning O
library O
for O
Python U-p_language
# O
b18 O
, O
for O
the O
implementation O
of O
the O
one O
- O
class O
SVM O
, O
Gaussian O
mixture O
models O
and O
cross O
- O
validation O
in O
our O
analysis O
. O

For O
heterogeneous O
and O
homogenized O
environment O
Pentium B-hardware_resources
II I-hardware_resources
, I-hardware_resources
III I-hardware_resources
, I-hardware_resources
and I-hardware_resources
IV I-hardware_resources
Intel L-hardware_resources
machines O
with O
physical O
memory O
ranging O
from O
64 B-hardware_resources
to I-hardware_resources
128 I-hardware_resources
MB L-hardware_resources
were O
used O
. O

Next O
, O
we O
conduct O
end-to-end O
performance O
comparison O
with O
Phoenix++ O
on O
the O
Xeon B-hardware_resources
Phi L-hardware_resources
. O

This O
generated O
143 O
GB O
of O
data O
and O
took O
about O
a O
third B-compute_time
of I-compute_time
a I-compute_time
CPU-year L-compute_time
to O
run O
. O

Second O
, O
implementing O
verification O
technology O
for O
a O
production O
language O
, O
such O
as O
Java U-p_language
, O
while O
perhaps O
more O
complex O
for O
the O
implementors O
and O
users O
, O
holds O
the O
promise O
of O
applying O
verification O
technology O
in O
actual O
software O
development O
. O

Finally O
, O
the O
estimation O
error O
expression O
for O
the O
averaging O
estimator O
presented O
in O
( O
23 O
) O
is O
verified O
via O
Matlab U-p_language
simulations O
. O

The O
goal O
of O
this O
case O
study O
is O
to O
translate O
JaMoPP O
- O
based O
Java U-p_language
models O
into O
corresponding O
simple O
state O
machine O
models O
. O

All O
runs O
are O
conducted O
on O
a O
HP B-hardware_platform
xw8600 I-hardware_platform
workstation L-hardware_platform
with O
an O
Intel B-hardware_resources
Xeon(R I-hardware_resources
) I-hardware_resources
2.67GHz I-hardware_resources
CPU L-hardware_resources
and O
3.00 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

Seventy-eight O
percent O
of O
jobs O
had O
good O
CPU U-hardware_resources
usage O
( O
≤10 O
% O
CPU U-hardware_resources
idle O
time O
) O
and O
the O
32 B-hardware_resources
GB I-hardware_resources
node I-hardware_resources
memory L-hardware_resources
is O
sufficient O
for O
most O
jobs O
. O

The O
timing O
experiments O
reported O
in O
this O
section O
were O
performed O
on O
a O
single B-hardware_resources
core L-hardware_resources
of O
a O
2.66 B-hardware_resources
Ghz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
processor L-hardware_resources
with O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
. O

All O
computations O
are O
performed O
in O
double O
precision O
on O
a O
Linux B-hardware_platform
workstation L-hardware_platform
with O
quad B-hardware_resources
core I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
W3530 I-hardware_resources
processors L-hardware_resources
at O
2.80GHZ U-hardware_resources
with O
8 B-hardware_resources
MB I-hardware_resources
cache L-hardware_resources
and O
6 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
. O

The O
experiments O
were O
taken O
with O
various O
combinations O
of O
Intel U-hardware_resources
machines O
. O

Note O
that O
, O
in O
political O
topics O
we O
employ O
both O
the O
tweets O
data O
( O
TData O
) O
and O
newspaper O
titles O
(NData).We O
compared O
different O
techniques O
for O
features O
extraction O
in O
order O
to O
find O
the O
most O
suitable O
for O
our O
problems O
: O
5-grams O
of O
characters O
, O
space-separated O
words O
8 O
, O
{ O
1 O
, O
2 O
, O
3}-grams O
of O
words O
, O
and O
string O
kernels O
# O
b16 O
. O

Let O
P O
be O
a O
Java U-p_language
bytecode O
program O
given O
as O
a O
graph O
of O
blocks O
. O

The O
lab O
testbed O
consists O
of O
commodity B-hardware_platform
servers L-hardware_platform
( O
Dell B-hardware_platform
Poweredge I-hardware_platform
850 L-hardware_platform
, O
3GHz B-hardware_resources
Xeon I-hardware_resources
, I-hardware_resources
Intel I-hardware_resources
82571EB I-hardware_resources
Gigabit I-hardware_resources
NIC L-hardware_resources
) O
connected O
via O
a O
router U-hardware_resources
and O
gigabit B-hardware_resources
switches L-hardware_resources
( O
Figure O
2 O
) O
. O

In O
# O
b20 O
, O
we O
presented O
a O
first O
experimentation O
with O
the O
automatic O
derivation O
of O
non O
- O
termination O
proofs O
for O
Java U-p_language
bytecode O
programs O
. O

The O
tests O
where O
carried O
out O
on O
a O
personal B-hardware_platform
laptop L-hardware_platform
with O
1.70GHz B-hardware_resources
dual I-hardware_resources
core I-hardware_resources
processors I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
3317U L-hardware_resources
, O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
with O
the O
Ubuntu B-hardware_platform
13.0 L-hardware_platform
operating O
system O
. O

A O
detailed O
Matlab U-p_language
implementation O
, O
which O
reproduces O
our O
results O
, O
can O
be O
downloaded O
from O
http://web.eecs.umich.edu/∼cscott O
. O

For O
example O
, O
in O
Hadoop O
, O
one O
can O
imagine O
declaring O
Java U-p_language
objects O
as O
monoids O
( O
for O
example O
, O
via O
an O
interface O
) O
. O

The O
architecture O
consists O
of O
applying O
a O
separate O
operation O
, O
embodied O
in O
a O
Java U-p_language
class O
, O
for O
each O
of O
a O
sequence O
of O
compiler O
phases O
, O
each O
of O
which O
is O
replaceable O
. O

All O
experiments O
are O
done O
on O
machines O
with O
Intel B-hardware_resources
Xeon I-hardware_resources
8-Core I-hardware_resources
CPUs I-hardware_resources
of I-hardware_resources
2.13 I-hardware_resources
GHz L-hardware_resources
and O
64 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

In O
general O
, O
all O
Java U-p_language
and O
JML U-p_language
language O
elements O
are O
parsed O
and O
type O
- O
checked O
, O
but O
those O
not O
implemented O
are O
ignored O
for O
static O
or O
runtime O
checking O
. O

All O
our O
timings O
are O
done O
on O
a O
64-Bit B-hardware_platform
GNU/Linux L-hardware_platform
machine O
with O
dual B-hardware_resources
, I-hardware_resources
six I-hardware_resources
core I-hardware_resources
, I-hardware_resources
2.93Ghz I-hardware_resources
Intel I-hardware_resources
X5670 I-hardware_resources
CPUs L-hardware_resources
, O
and O
hyperthreading O
disabled O
. O

Our O
results O
are O
more O
generally O
applicable O
than O
to O
Java U-p_language
only O
. O

This O
would O
require O
a O
multiple O
inheritance O
mechanism O
not O
available O
in O
Java U-p_language
. O

One O
can O
prove O
the O
following O
analogues O
of O
( O
2.33)-(2.35 O
) O
, O
the O
proof O
reduced O
as O
before O
to O
solving O
( O
in O
Matlab U-p_language
) O
a O
finite O
collection O
of O
polynomial O
equations O
: O
Let O
y O
0 O
: O
= O
1 O
∞ O
and O
for O
all O
τ O
≥ O
0 O
, O
y O
τ O
+1 O
: O
= O
T O
3 O
y O
τ O
. O

The O
experiments O
have O
been O
conducted O
on O
an O
Intel B-hardware_resources
Itanium I-hardware_resources
2 L-hardware_resources
platform O
, O
running O
Red B-hardware_platform
Hat I-hardware_platform
Enterprise I-hardware_platform
Linux I-hardware_platform
AS I-hardware_platform
release I-hardware_platform
3 L-hardware_platform
. O

Experiments O
were O
conducted O
on O
an O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
2600 I-hardware_resources
3.4 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
with O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
main I-hardware_resources
memory L-hardware_resources
, O
running O
Linux B-hardware_platform
3.3.4 L-hardware_platform
; O
code O
was O
compiled O
with O
GCC B-hardware_platform
version I-hardware_platform
4.7.0 L-hardware_platform
targeting O
x86 B-hardware_platform
64 L-hardware_platform
with O
full O
optimizations O
. O

tym O
: O
Typed O
Matlab U-p_language

The O
reported O
relative O
errors O
and O
CPU O
times O
are O
averages O
over O
5 O
runs O
. O

This O
is O
practical O
because O
Python U-p_language
allows O
socalled O
triple O
- O
quoted O
strings O
which O
may O
extend O
across O
line O
boundaries O
, O
thus O
appearing O
as O
contiguous O
code O
blocks O
without O
intervening O
string O
terminators O
or O
other O
traces O
of O
the O
host O
- O
level O
language O
. O

Consequently O
, O
secure O
programming O
guidelines O
for O
Java U-p_language
stress O
the O
importance O
of O
using O
defensive O
copying O
before O
accepting O
or O
handing O
out O
references O
to O
an O
internal O
mutable O
object O
. O

We O
also O
prepared O
a O
statistics O
of O
the O
values O
cycles_per_clock O
: O
= O
∆TSC O
∆clock O
( O
) O
so O
that O
we O
could O
convert O
CPU O
cycles O
to O
nanoseconds O
; O
we O
verified O
that O
the O
standard O
deviation O
of O
the O
logarithm O
of O
the O
above O
quantity O
was O
usually O
less O
than O
1%.To O
avoid O
over-optimization O
of O
the O
compiler O
, O
the O
results O
of O
any O
benchmarked O
function O
was O
xor-ed O
in O
a O
bucket O
variable O
, O
that O
was O
then O
printed O
on O
screen O
. O

On O
the O
other O
hand O
, O
general O
- O
purpose O
programming O
languages O
like O
C O
, O
C++ U-p_language
and O
Java U-p_language
do O
not O
directly O
leverage O
features O
of O
accelerators O
, O
such O
as O
data O
- O
level O
parallelism O
, O
or O
support O
common O
accelerator O
programming O
idioms O
, O
such O
as O
iteration O
space O
tiling O
. O

VxWorks O
# O
b2 O
is O
a O
RTOS U-hardware_platform
made O
and O
sold O
by O
Wind O
River O
Systems O
actually O
acquired O
by O
Intel O
. O

The O
experiments O
were O
conducted O
on O
a O
Dell B-hardware_platform
server L-hardware_platform
consisting O
of O
2 B-hardware_resources
Intel I-hardware_resources
Xeon(R I-hardware_resources
) I-hardware_resources
Processors L-hardware_resources
, O
each O
running O
2.40 B-hardware_resources
GHz L-hardware_resources
, O
with O
12000 B-hardware_resources
KB I-hardware_resources
cache L-hardware_resources
and O
64 B-hardware_resources
GB I-hardware_resources
DRAM I-hardware_resources
memory L-hardware_resources
. O

There O
are O
a O
number O
of O
issues O
that O
are O
not O
part O
of O
the O
general O
approach O
but O
specific O
to O
the O
use O
of O
Java U-p_language
as O
the O
target O
language O
, O
in O
particular O
, O
user O
- O
defined O
interfaces O
, O
arrays O
and O
exception O
handling O
. O

The O
experiments O
conducted O
in O
chapter O
5 O
used O
RBF O
kernels O
and O
kept O
a O
fixed O
ν O
= O
0.1 O
while O
varying O
the O
kernel O
width O
σ O
. O

Most O
of O
the O
timings O
were O
performed O
on O
on O
a O
Nvidia B-hardware_resources
GeForce I-hardware_resources
320 I-hardware_resources
M L-hardware_resources
in O
a O
laptop B-hardware_platform
computer L-hardware_platform
to O
illustrate O
the O
usually O
idle O
computing O
power O
available O
. O

In O
this O
example O
, O
we O
demonstrate O
the O
use O
of O
the O
type O
system O
on O
a O
challenging O
example O
taken O
from O
the O
standard O
Java U-p_language
library O
. O

This O
is O
because O
object O
- O
oriented O
languages O
, O
such O
as O
Java U-p_language
bytecode O
, O
allow O
dynamic O
lookup O
of O
method O
implementations O
in O
method O
calls O
, O
on O
the O
basis O
of O
the O
run O
- O
time O
class O
of O
their O
receiver O
. O

The O
proposed O
codes O
are O
not O
optimized O
either O
for O
Matlab U-p_language
, O
or O
in O
general O
and O
can O
still O
have O
bugs O
. O

In O
fact O
, O
complete O
access O
control O
mechanims O
are O
already O
deployed O
in O
two O
well O
known O
security O
models O
for O
Java U-p_language
# O
b32 O
and O
.Net U-p_language
# O
b33 O
. O

All O
experiments O
were O
performed O
on O
a O
PC B-hardware_platform
laptop L-hardware_platform
with O
a O
2.20 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
i7 I-hardware_resources
chipset L-hardware_resources
and O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

GLasso O
, O
Ridge O
and O
PLS O
were O
optimized O
using O
implementations O
from O
the O
scikit B-p_library
- I-p_library
learn L-p_library
python U-p_language
package O
# O
b16 O
. O

We O
use O
a O
testbed B-hardware_platform
of I-hardware_platform
20 I-hardware_platform
machines L-hardware_platform
each O
with O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5345 I-hardware_resources
4-core L-hardware_resources
, O
2.33-GHz B-hardware_resources
CPU L-hardware_resources
, O
4 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
, O
and O
1-Gbps B-hardware_resources
NIC L-hardware_resources
. O

To O
orginaize O
such O
massive O
amount O
of O
information O
, O
a O
MapReduce O
application O
is O
used O
to O
parse O
the O
datain O
a O
exim_mainlog O
fileinto O
individual O
transactions O
; O
each O
separated O
and O
arranged O
by O
a O
unique O
transaction O
ID O
.. O
We O
have O
tested O
our O
experiments O
on O
a O
Dell B-hardware_platform
Latitude I-hardware_platform
E4300 I-hardware_platform
laptop L-hardware_platform
with O
two B-hardware_resources
processors I-hardware_resources
: I-hardware_resources
Intel I-hardware_resources
Centrino I-hardware_resources
model I-hardware_resources
2.26GHz L-hardware_resources
, O
64-bit U-hardware_platform
; O
2 B-hardware_resources
x I-hardware_resources
2 I-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
; O
80 B-hardware_resources
GB I-hardware_resources
Disk L-hardware_resources
. O

The O
interested O
reader O
is O
referred O
to O
the O
corresponding O
author O
to O
obtain O
a O
MATLAB U-p_language
code O
including O
this O
and O
other O
test O
cases O
. O

Lossless O
Compression O
of O
Short O
English O
Text O
Message O
for O
JAVA U-p_language
enables O
mobile O
devices O
" O
by O
" O
Md. O
Rafiqul O
Islam O
, O
S. O
A. O
Ahsan O
Rajon O
, O
Anondo O
Poddar O
. O

Note O
that O
the O
proposed O
codes O
are O
not O
optimized O
either O
for O
Matlab U-p_language
, O
or O
in O
general O
. O

if O
a O
new O
best O
solution O
has O
been O
found O
then O
update O
global O
best O
end O
if O
29 O
: O
until O
requirements O
are O
met O
10 O
−16 O
is O
considered O
as O
the O
minimum O
achievable O
by O
each O
function O
of O
Set O
A O
, O
i.e. O
, O
it O
is O
the O
selected O
tolerance O
, O
in O
line O
with O
the O
numerical O
floating O
point O
double O
precision O
accuracy O
of O
MATLAB U-p_language
. O

Our O
experiments O
were O
carried O
out O
on O
an O
Intel B-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
2600 I-hardware_resources
at I-hardware_resources
3.4 L-hardware_resources
GHz O
with O
16 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
running O
Ubuntu B-hardware_resources
13.10 L-hardware_resources
with O
kernel B-hardware_platform
version I-hardware_platform
3.11.0 L-hardware_platform
. O

The O
CNN O
model O
is O
pre O
- O
trained O
on O
the O
ImageNet O
ILSVRC O
2012 O
dataset O
using O
the O
Caffe U-p_library
framework O
# O
b26 O
. O

To O
illustrate O
what O
may O
occur O
in O
practice O
, O
we O
performed O
some O
timing O
experiments O
on O
several O
machines O
: O
a O
3.06GHz B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
( I-hardware_resources
model I-hardware_resources
X5675 I-hardware_resources
, I-hardware_resources
' I-hardware_resources
Westmere I-hardware_resources
' I-hardware_resources
microarchitecture I-hardware_resources
) L-hardware_resources
, O
a O
2.6GHz B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
( I-hardware_resources
model I-hardware_resources
E5 I-hardware_resources
- I-hardware_resources
2670 I-hardware_resources
, I-hardware_resources
' I-hardware_resources
Sandy I-hardware_resources
Bridge I-hardware_resources
' I-hardware_resources
microarchitecture I-hardware_resources
) L-hardware_resources
, O
and O
an O
AMD B-hardware_resources
Vishera I-hardware_resources
( I-hardware_resources
model I-hardware_resources
FX-8350 I-hardware_resources
, I-hardware_resources
' I-hardware_resources
Piledriver I-hardware_resources
' I-hardware_resources
microarchitecture I-hardware_resources
) L-hardware_resources
, O
all O
modern O
64-bit B-hardware_resources
processors L-hardware_resources
. O

The O
purpose O
is O
to O
outline O
possibilities O
and O
to O
provide O
a O
glimpse O
of O
the O
size O
and O
nature O
of O
the O
code O
needed O
to O
realize O
certain O
functionality O
in O
FEniCS U-p_library
and O
Python U-p_language
. O

In O
the O
previous O
volume O
# O
b30 O
, O
# O
b15 O
have O
proposed O
Matlab B-p_language
1 L-p_language
codes O
for O
DSmT O
hybrid O
rule O
. O

Classes O
and O
dictionaries O
are O
used O
extensively O
in O
the O
code O
, O
but O
a O
disadvantage O
with O
Python U-p_language
, O
at O
least O
when O
implementing O
mathematical O
formulae O
, O
is O
the O
self O
prefix O
and O
other O
disturbing O
syntax O
. O

We O
use O
the O
voltage/frequency O
setting O
of O
two O
real O
processors O
in O
our O
simulations O
: O
Transmeta B-hardware_resources
Crusoe L-hardware_resources
# O
b6 O
and O
Intel B-hardware_resources
Xscale L-hardware_resources
# O
b21 O
. O

We O
introduce O
a O
fully O
automated O
static O
analysis O
that O
takes O
a O
sequential O
Java U-p_language
bytecode O
program O
P O
as O
input O
and O
attempts O
to O
prove O
that O
there O
exists O
an O
infinite O
execution O
of O
P O
. O

The O
program O
runs O
under O
Matlab U-p_language
on O
a O
two B-hardware_resources
cores I-hardware_resources
2.67GHz L-hardware_resources
laptop U-hardware_platform
. O

It O
is O
true O
that O
commonly O
used O
soft O
wares O
like O
C U-p_language
, O
C++ U-p_language
, O
Java U-p_language
, O
MATLAB U-p_language
and O
many O
other O
programming O
languages O
are O
strong O
and O
performing O
languages O
; O
however O
, O
these O
programmes O
do O
not O
come O
with O
a O
model O
of O
a O
specific O
system O
. O

Systems O
and O
Procedure O
We O
ran O
the O
benchmarks O
on O
an O
Intel B-hardware_resources
Nehalem I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
920 L-hardware_resources
based O
system O
running O
at O
a O
frequency O
of O
2.67 B-hardware_resources
GHz L-hardware_resources
, O
on O
Linux B-hardware_platform
kernel I-hardware_platform
version I-hardware_platform
3.0.0 I-hardware_platform
- I-hardware_platform
26 L-hardware_platform
and O
gcc B-p_library
version I-p_library
4.6.1 L-p_library
. O

All O
experiments O
are O
performed O
on O
a O
3GHz B-hardware_resources
Intel I-hardware_resources
Xeon L-hardware_resources
machine O
with O
40 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
, O
running O
64-bit B-hardware_platform
Linux L-hardware_platform
, O
with O
separate O
timeouts O
of O
1h O
for O
the O
abstraction O
and O
model O
checking O
phases O
of O
the O
CEGAR O
loop O
. O

The O
hardware O
included O
Intel B-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
processor L-hardware_resources
, O
with O
512 B-hardware_resources
MB I-hardware_resources
DDRAM L-hardware_resources
, O
and O
40 B-hardware_resources
GB I-hardware_resources
Hard I-hardware_resources
Disk L-hardware_resources
. O

The O
experiments O
were O
conducted O
on O
a O
laptop U-hardware_platform
with O
an O
Intel B-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
3230 I-hardware_resources
M I-hardware_resources
2.60GHz I-hardware_resources
processor L-hardware_resources
with O
16 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
, O
running O
64-bit B-hardware_platform
Windows I-hardware_platform
7 L-hardware_platform
. O

For O
instance O
, O
Python U-p_language
's O
excellent O
network O
and O
graph O
libraries O
( O
eg O
: O
# O
b5 O
) O
could O
be O
used O
to O
define O
a O
novel O
naming O
convention O
for O
stochastic O
primitives O
, O
which O
takes O
the O
program O
's O
control O
flow O
into O
account O
. O

Overall O
, O
PKG O
( O
3.6 O
M O
counters O
) O
requires O
about O
30 O
% O
more O
memory O
than O
KG O
( O
2.9 O
M O
counters O
) O
, O
but O
about O
half O
the O
memory O
of O
SG O
( O
7.2 O
M O
counters).In O
the O
second O
experiment O
, O
we O
fix O
the O
CPU U-hardware_resources
delay O
to O
0.4ms O
per O
key O
, O
as O
it O
is O
the O
saturation O
point O
for O
KG O
in O
our O
setup O
. O

The O
Dhrystone O
benchmark O
# O
b22 O
# O
b21 O
is O
a O
synthetic O
benchmark O
used O
to O
measure O
CPU U-hardware_platform
performance O
. O

Let O
J O
be O
a O
Java B-p_library
Virtual I-p_library
Machine L-p_library
, O
P O
be O
a O
Java U-p_language
bytecode O
program O
consisting O
of O
instructions O
in O
C O
\{call O
} O
, O
and O
b O
be O
a O
block O
of O
P O
. O

All O
our O
experiments O
were O
ran O
on O
Amazon B-hardware_platform
EC2 I-hardware_platform
g2.8xlarge I-hardware_platform
instance L-hardware_platform
, O
which O
has O
60 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
and O
four B-hardware_resources
1,536 I-hardware_resources
CUDA I-hardware_resources
core I-hardware_resources
graphical I-hardware_resources
processing I-hardware_resources
units L-hardware_resources
, O
of O
which O
we O
only O
used O
one O
. O

A O
few O
popular O
platforms O
are O
Op O
- O
tiML O
, O
Theano U-p_library
# O
b2 O
, O
and O
GraphLab U-p_library
# O
b7 O
. O

In O
this O
section O
, O
we O
consider O
a O
Java U-p_language
bytecode O
program O
P O
consisting O
of O
any O
instructions O
in O
C O
( O
including O
call O
) O
and O
we O
describe O
a O
technique O
for O
abstracting O
P O
as O
a O
CLP(PL O
) O
program O
PCLP O
whose O
non O
- O
termination O
entails O
that O
of O
P O
. O

The O
last O
import O
in O
this O
simple O
example O
is O
numpy O
, O
the O
Python U-p_language
array O
package O
. O

Key O
# O
b3 O
and O
Why3 O
# O
b24 O
are O
other O
recent O
tools O
that O
apply O
to O
Java U-p_language
programs O
, O
but O
require O
the O
user O
to O
interact O
with O
theorem O
proving O
tools O
separately O
from O
the O
software O
development O
IDE O
. O

The O
cluster O
allowed O
us O
to O
utilize O
the O
processing O
power O
of O
256 B-hardware_resources
cores I-hardware_resources
of I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
2.83GHz L-hardware_resources
( O
out O
of O
the O
total O
2712 B-hardware_resources
cores L-hardware_resources
) O
for O
our O
computation O
. O

Then O
the O
Java B-p_language
script L-p_language
checks O
if O
the O
page O
that O
is O
displayed O
is O
a O
pop O
- O
up O
window O
. O

This O
experiment O
was O
performed O
on O
a O
system O
with O
6 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
system I-hardware_resources
memory L-hardware_resources
and O
an O
Intel B-hardware_resources
i7 I-hardware_resources
CPU L-hardware_resources
with O
2GHz U-hardware_resources
and O
four B-hardware_resources
physical I-hardware_resources
CPU I-hardware_resources
cores L-hardware_resources
. O

The O
experiments O
were O
done O
on O
a O
processor B-hardware_resources
intel I-hardware_resources
core I-hardware_resources
i7 I-hardware_resources
720QM I-hardware_resources
1.6GHZ L-hardware_resources
, O
with O
4Gb B-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

Theoretical O
issues O
of O
CAE O
developments O
are O
well O
described O
in O
many O
research O
papers O
# O
b0 O
# O
b3 O
# O
b4 O
# O
b5 O
.Modern O
deep O
learning O
frameworks O
, O
i.e. O
ConvNet2 U-p_library
# O
b6 O
, O
Theano+Lasagne U-p_library
# O
b7 O
# O
b8 O
, O
Torch7 U-p_library
# O
b9 O
, O
Caffe B-p_library
[ I-p_library
11 I-p_library
] L-p_library
and O
others O
, O
have O
become O
very O
popular O
tools O
in O
the O
deep O
learning O
research O
community O
since O
they O
provide O
fast O
deployment O
of O
state O
- O
of O
- O
the O
- O
art O
deep O
learning O
models O
along O
with O
appropriate O
training O
strategies O
( O
Stochastic O
Gradient O
Descent O
, O
AdaDelta O
, O
etc O
. O
) O

The O
tests O
were O
executed O
on O
an O
openSUSE B-hardware_platform
based I-hardware_platform
machine L-hardware_platform
with O
eight B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
processors I-hardware_resources
( I-hardware_resources
2.33 I-hardware_resources
GHz I-hardware_resources
) L-hardware_resources
and O
49 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

The O
experiments O
were O
performed O
on O
a O
computer U-hardware_platform
with O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
main I-hardware_resources
memory L-hardware_resources
and O
3.1 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
processor L-hardware_resources
, O
running O
the O
Windows B-hardware_platform
XP I-hardware_platform
Service I-hardware_platform
Pack I-hardware_platform
3 I-hardware_platform
operating I-hardware_platform
system L-hardware_platform
. O

The O
set O
of O
types O
of O
our O
simplified O
Java B-p_library
Virtual I-p_library
Machine L-p_library
is O
T O
= O
K O
∪ O
{ O
int O
, O
void O
} O
, O
where O
K O
is O
the O
set O
of O
all O
classes O
. O

Their O
host O
systems O
are O
: O
AMD B-hardware_resources
Phenom I-hardware_resources
9850 I-hardware_resources
( I-hardware_resources
4 I-hardware_resources
cores I-hardware_resources
) L-hardware_resources
with O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
PC3200 I-hardware_resources
DDR2 I-hardware_resources
memory L-hardware_resources
running O
on O
a O
MSI B-hardware_resources
MS-7376 I-hardware_resources
motherboard L-hardware_resources
and O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
960 I-hardware_resources
CPU I-hardware_resources
( I-hardware_resources
4 I-hardware_resources
cores I-hardware_resources
, I-hardware_resources
8 I-hardware_resources
processes I-hardware_resources
with I-hardware_resources
Hyperthreading I-hardware_resources
) L-hardware_resources
with O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
PC3200 I-hardware_resources
DDR2 I-hardware_resources
memory L-hardware_resources
running O
on O
a O
Gigabyte B-hardware_resources
EX58-UD5 L-hardware_resources
, O
respectively O
. O

Multi B-p_language
- I-p_language
Java L-p_language
also O
offers O
open O
classes O
: O
classes O
to O
which O
methods O
can O
be O
added O
without O
changing O
the O
original O
class O
definition O
. O

All O
experiments O
used O
the O
full O
environment O
with O
801 B-hardware_platform
CPU I-hardware_platform
cores/51 I-hardware_platform
nodes L-hardware_platform
( O
10 O
nodes O
for O
BI O
and O
40 O
nodes O
for O
DP O
) O
. O

The O
Deep O
Sea O
team O
[ O
21 O
] O
, O
who O
won O
a O
100,000 O
US O
dollar O
prize O
( O
1 O
st O
place O
) O
in O
the O
National O
Data O
Science O
Bowl O
, O
a O
data O
science O
competition O
where O
the O
goal O
was O
to O
classify O
images O
of O
plankton O
, O
has O
reported O
the O
use O
of O
CAE O
to O
pretrain O
only O
convolutional O
layers O
of O
their O
network O
( O
also O
implemented O
in O
Theano B-p_library
/ I-p_library
Lasagne L-p_library
# O
b8 O
) O
. O

Now O
, O
let O
us O
present O
the O
main O
points O
of O
the O
algorithm O
that O
could O
be O
easily O
implemented O
using O
the O
Octave U-p_language
package O
or O
Matlab U-p_language
. O

Figure O
3 O
shows O
the O
CPU U-hardware_resources
utilization O
of O
a O
browser O
process O
in O
opening O
a O
web O
page O
. O

Several O
linear O
operators O
( O
and O
related O
convolutional O
network O
operations O
like O
spatial O
max O
pooling O
) O
in O
Pylearn2 U-p_library
are O
implemented O
as O
wrappers O
that O
add O
Theano U-p_library
semantics O
on O
top O
of O
the O
extremely O
fast O
cuda B-p_library
- I-p_library
convnet I-p_library
library L-p_library
# O
b28 O
, O
making O
Pylearn2 U-p_library
a O
very O
practical O
library O
to O
use O
for O
convolutional O
network O
research O
. O

We O
ran O
the O
experiments O
on O
a O
32-bit B-hardware_platform
Ubuntu I-hardware_platform
server L-hardware_platform
equipped O
with O
Dual-Core B-hardware_resources
2GHz I-hardware_resources
Opteron I-hardware_resources
2212 I-hardware_resources
CPU L-hardware_resources
and O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
. O

We O
implemented O
all O
three O
approaches O
using O
8 O
K O
blocks O
and O
32-bit O
references O
, O
in O
virtual O
memory O
, O
using O
Python B-p_language
2.5.2 L-p_language
. O

The O
model O
is O
implemented O
based O
on O
Theano U-p_library
and O
Pylearn2 U-p_library
libraries O
and O
trained O
on O
Tesla B-hardware_resources
K20 I-hardware_resources
m I-hardware_resources
GPU L-hardware_resources
. O

To O
simulate O
the O
IEEE O
802.11 O
g O
and O
IEEE O
802.11n O
network O
we O
model O
the O
physical O
layer O
characteristics O
of O
both O
standards O
in O
MATLAB U-p_language
as O
outlined O
in O
Table O
2 O
and O
simulate O
traffic O
as O
an O
arriving O
stream O
of O
bits O
modulated O
as O
BPSK O
. O

Concerning O
security O
, O
the O
GlassFish O
environment O
in O
Java U-p_language
offers O
program O
annotations O
of O
members O
of O
a O
class O
( O
such O
as O
@DenyAll O
or O
@RolesAllowed O
) O
for O
implementing O
role O
- O
based O
access O
control O
to O
methods O
. O

The O
characteristics O
of O
the O
used O
equipment O
are O
a O
PC U-hardware_platform
with O
2 B-hardware_resources
CPU I-hardware_resources
Intel I-hardware_resources
( I-hardware_resources
R I-hardware_resources
) I-hardware_resources
Pentium I-hardware_resources
( I-hardware_resources
R I-hardware_resources
) I-hardware_resources
1.9 I-hardware_resources
GHz L-hardware_resources
and O
RAM U-hardware_resources
with O
3Gigats B-hardware_resources
bytes L-hardware_resources
. O

All O
numerical O
experiments O
were O
run O
in O
MATLAB B-p_language
7.3.0 L-p_language
on O
a O
Dell B-hardware_platform
Precision I-hardware_platform
670 I-hardware_platform
workstation L-hardware_platform
with O
an O
Intel B-hardware_resources
xeon(TM I-hardware_resources
) I-hardware_resources
3.4GHZ I-hardware_resources
CPU L-hardware_resources
and O
6 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

We O
used O
the O
CART O
implementation O
provided O
by O
scikit B-p_library
- I-p_library
learn L-p_library
# O
b14 O
with O
two O
criteria O
: O
gini O
purity O
and O
information O
gain O
and O
set O
min O
samples O
leaf O
= O
10 O
( O
minimum O
number O
of O
data O
points O
at O
a O
leaf O
node O
) O
. O

Our O
approach O
can O
handle O
method O
calls O
; O
to O
the O
best O
of O
our O
knowledge O
, O
it O
is O
the O
first O
static O
approach O
for O
Java U-p_language
bytecode O
able O
to O
prove O
the O
existence O
of O
infinite O
recursions O
. O

OpenJML U-p_library
registers O
replacement O
tools O
for O
many O
of O
the O
compiler O
phases O
; O
the O
replacement O
tools O
extend O
( O
with O
Java U-p_language
inheritance O
) O
the O
original O
tool O
, O
adding O
additional O
functionality O
. O

4 O
shows O
results O
of O
classification O
between O
SR O
, O
VT O
and O
VF O
using O
SVM O
decision O
values O
averaged O
over O
an O
ensemble O
of O
ECG O
segments O
, O
extracted O
from O
longer O
windows O
, O
as O
specified O
in O
Section O
III-C. O
These O
shorter O
segments O
were O
transformed O
to O
the O
best O
performing O
representation O
space O
, O
magnitude O
spectra O
, O
and O
classified O
using O
SVMs O
with O
RBF O
kernels O
. O

There O
are O
also O
CAE O
implementations O
: O
# O
b18 O
.(i O
) O
inThe O
goal O
of O
this O
paper O
is O
to O
present O
our O
first O
results O
of O
the O
practical O
implementation O
of O
a O
CAE O
model O
in O
Caffe U-p_library
deep O
learning O
framework O
as O
well O
as O
the O
experimental O
research O
of O
the O
proposed O
model O
on O
the O
example O
of O
MNIST O
dataset O
and O
a O
simple O
visualization O
technique O
which O
helped O
us O
to O
receive O
these O
results O
. O
Unlike O
Theano B-p_library
's L-p_library
grad O
method O
, O
this O
method O
is O
not O
guaranteed O
to O
return O
accurate O
gradients O
. O

We O
havey O
τ O
+1 O
( O
1 O
) O
= O
9 O
j=1 O
T O
( O
1 O
, O
j O
) O
y O
τ O
( O
j O
) O
⇒ O
1 O
− O
y O
τ O
+1 O
( O
1 O
) O
= O
( O
1 O
− O
a O
) O
+ O
9 O
j=1 O
T O
( O
1 O
, O
j O
) O
( O
1 O
− O
y O
τ O
( O
j)).Assuming O
( O
2.33)-(2.35 O
) O
hold O
at O
step O
τ O
, O
it O
follows O
that O
( O
2.33 O
) O
holds O
at O
step O
τ O
+ O
1 O
if O
and O
only O
iff O
1 O
( O
γ O
) O
≤ O
0 O
, O
where O
( O
2.36 O
) O
f O
1 O
( O
γ O
) O
= O
( O
1 O
− O
a O
) O
 O
 O
−γ O
+ O
T O
( O
1 O
, O
1 O
) O
( O
1 O
+ O
γ O
) O
+ O
T O
( O
1 O
, O
2 O
) O
γ O
+ O
9 O
j=3 O
T O
( O
1 O
, O
j O
) O
γ O
j−2 O
 O
 O
+ O
( O
1 O
− O
b O
) O
T O
( O
1 O
, O
2 O
) O
( O
1 O
+ O
γ).We O
checked O
with O
Matlab U-p_language
that O
f O
1 O
( O
γ O
) O
= O
0 O
has O
two O
solutions O
in O
the O
interval O
[ O
0 O
, O
1 O
] O
, O
at O
γ O
1 O
≈ O
0.1116 O
and O
γ O
2 O
≈ O
0.9624 O
, O
and O
that O
f O
1 O
( O
γ O
) O
< O
0 O
for O
γ O
∈ O
( O
γ O
1 O
, O
γ O
2 O
) O
. O

We O
do O
not O
know O
whether O
it O
is O
also O
necessary O
, O
but O
interestingly O
, O
in O
our O
experiments O
, O
MATLAB U-p_language
found O
a O
solution O
exactly O
when O
it O
was O
satisfied.f O
( O
x O
) O
: O
= O
sin(x O
) O
· O
sin(120 O
• O
− O
ψ O
2 O
2 O
− O
δ O
) O
· O
sin(ψ O
3 O
− O
60 O
• O
+ O
δ O
) O
· O
sin(90 O
• O
− O
ψ O
4 O
2 O
+ O
x O
2 O
− O
δ O
) O
− O
sin(ψ O
4 O
− O
x O
) O
· O
sin(90 O
• O
− O
x O
2 O
− O
δ O
) O
· O
sin(ψ O
2 O
− O
60 O
• O
+ O
δ O
) O
· O
sin(120 O
• O
− O
ψ O
3 O
2 O
− O
δ O
) O
! O

A O
Model O
stores O
parameters O
and O
can O
generate O
Theano U-p_library
expressions O
that O
perform O
some O
useful O
task O
given O
input O
data O
( O
e.g. O
, O
estimate O
the O
probability O
density O
at O
a O
point O
in O
space O
, O
infer O
a O
class O
label O
given O
input O
features O
, O
etc O
. O
) O
. O

To O
quote O
from O
the O
CERT O
guidelines O
for O
secure O
Java U-p_language
programming O
: O
" O
Do O
not O
carry O
out O
defensive O
copying O
using O
the O
clone O
( O
) O
method O
in O
constructors O
, O
when O
the O
( O
non O
- O
system O
) O
class O
can O
be O
subclassed O
by O
untrusted O
code O
. O

All O
the O
simulations O
for O
the O
HSR O
, O
GSRC O
and O
SRC O
algorithms O
are O
carried O
out O
in O
Matlab B-p_language
7.8 L-p_language
environment O
running O
in O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5 I-hardware_resources
- I-hardware_resources
1650 I-hardware_resources
CPU L-hardware_resources 
. O

The O
numerical O
tests O
were O
performed O
by O
running O
a O
MATLAB B-p_language
R I-p_language
7 I-p_language
( I-p_language
64 I-p_language
bit I-p_language
) L-p_language
code O
on O
platform O
featuring O
an O
Intel B-hardware_resources
R I-hardware_resources
Xeon I-hardware_resources
R I-hardware_resources
( I-hardware_resources
2.93 I-hardware_resources
GHz I-hardware_resources
) L-hardware_resources
with O
8 B-hardware_resources
cores L-hardware_resources
and O
12 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

Java U-p_language
Experiments O
. O

We O
recorded O
running O
times O
of O
each O
stage O
in O
the O
automated O
batch O
process O
and O
the O
various O
aes- O
thetic O
metrics O
described O
in O
§ O
2 O
, O
using O
a O
MacBook B-hardware_platform
Pro L-hardware_platform
with O
a O
2.3GHz B-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
I7 I-hardware_resources
CPU L-hardware_resources
. O

The O
following O
If O
there O
are O
400 O
users O
and O
300 O
providers O
in O
the O
system O
, O
the O
Eclipse O
platform O
reports O
the O
error O
message O
of O
" O
Java U-p_language
heap O
space O
" O
, O
while O
400 O
users O
and O
400 O
providers O
result O
in O
the O
error O
information O
of O
" O
GC O
overhead O
limit O
exceeded O
" O
. O

All O
computations O
have O
been O
done O
by O
using O
the O
Matlab B-p_library
Tensor I-p_library
Toolbox I-p_library
Version I-p_library
2.5 L-p_library
# O
b35 O
and O
the O
Matlab B-p_library
N I-p_library
- I-p_library
Way I-p_library
toolbox L-p_library
# O
b1 O
. O

Java B-p_language
Script L-p_language
- O
Based O
Attacks O
is O
another O
way O
in O
which O
an O
attacker O
could O
try O
to O
circumvent O
client O
side O
solution O
defense O
mechanisms O
is O
to O
make O
use O
of O
pop O
- O
up O
windows U-hardware_platform
. O

As O
an O
illustration O
of O
the O
usage O
of O
SPARK00 O
, O
we O
have O
run O
the O
benchmarks O
using O
GCC B-p_library
4.2.2 L-p_library
on O
the O
Intel B-hardware_resources
Itanium L-hardware_resources
architecture O
. O

The O
experiments O
are O
run O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5520 L-hardware_resources
machine O
with O
8 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

The O
code O
was O
compiled O
using O
the O
Intel B-p_library
compiler I-p_library
suite I-p_library
, I-p_library
version I-p_library
13.0.0 L-p_library
and O
with O
the O
compiler O
flags O
-O3 O
-xAVX O
. O

The O
best O
model O
of O
GT200 O
has O
a O
total O
of O
240 O
SPs O
( O
8 O
SP/SM O
x O
3 O
SM/TPC O
x O
10 O
TPC O
) O
, O
with O
16 O
KB O
of O
shared O
memory O
per O
SM O
and O
16 O
K O
available O
registers O
per O
block O
. O

While O
our O
Matlab U-p_language
simulations O
suggest O
that O
our O
system O
design O
is O
valid O
, O
they O
do O
not O
capture O
the O
true O
P2P O
interactions O
within O
each O
peer O
- O
cloud O
. O

We O
do O
not O
report O
the O
CPU U-hardware_resources
times O
, O
because O
they O
depend O
on O
how O
large O
was O
the O
outlier O
. O

Computing O
configurations O
for O
performing O
the O
simulations O
are O
summarized O
as O
follows O
, O
CPU B-hardware_resources
: I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
2.93GHz L-hardware_resources
; O
Memory B-hardware_resources
: I-hardware_resources
16 I-hardware_resources
GB L-hardware_resources
; O
System B-hardware_platform
: I-hardware_platform
64bit I-hardware_platform
Windows I-hardware_platform
7 L-hardware_platform
; O
Matlab B-p_language
R2010b L-p_language
. O

The O
experiments O
were O
conducted O
on O
a O
computer U-hardware_platform
equipped O
with O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
3.2 I-hardware_resources
GHz L-hardware_resources
( O
16 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
with O
6 B-hardware_resources
physical I-hardware_resources
cores L-hardware_resources
and O
12 B-hardware_resources
threads L-hardware_resources
) O
processor O
having O
the O
following O
cache O
hierarchy O
: O
6 O
× O
32 O
kB O
of O
L1 O
instruction O
and O
data O
cache O
, O
6 O
× O
256 O
kB O
L2 O
cache O
and O
12 B-hardware_resources
MB I-hardware_resources
of I-hardware_resources
L3 I-hardware_resources
cache L-hardware_resources
. O

The O
overall O
experiment O
consisted O
in O
recovering O
a O
total O
of O
36100 O
signals O
( O
19 O
× O
19 O
pairs O
( O
δ O
, O
ρ O
) O
×100 O
signals O
for O
each O
) O
on O
a O
2.83GHz B-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Quad I-hardware_resources
Q9550 L-hardware_resources
machine O
running O
MATLAB B-p_language
7.7.0 L-p_language
. O

The O
choice O
of O
language O
depends O
on O
the O
requirements O
of O
the O
final O
system O
( O
e.g. O
, O
execution O
guarantees).As O
an O
example O
of O
another O
mapping O
, O
we O
consider O
an O
alternative O
implementation O
for O
Java U-p_language
. O

Since O
the O
pooling O
operations O
are O
mostly O
limited O
by O
the O
bandwidth O
of O
GPU U-hardware_resources
memory O
, O
this O
again O
shows O
the O
importance O
of O
continuous O
memory O
access O
by O
our O
proposed O
algorithm.50 O
× O
8 O
× O
8 O
/ O
1 O
32 O
× O
1 O
× O
1 O
/ O
1 O
25 O
× O
8 O
× O
8 O
/ O
1 O
2 O
× O
2 O
/ O
2 O
- O
50 O
× O
8 O
× O
8 O
/ O
1 O
32 O
× O
1 O
× O
1 O
/ O
1We O
also O
tested O
the O
running O
time O
of O
backward O
propagation O
by O
randomly O
choosing O
128 O
, O
512 O
, O
or O
1024 O
pixels O
from O
the O
error O
map O
at O
the O
last O
CNN O
layer O
as O
described O
in O
Section O
4.3 O
. O

All O
experiments O
are O
executed O
using O
801 B-hardware_platform
CPU I-hardware_platform
cores/51 I-hardware_platform
nodes L-hardware_platform
. O

Matrix O
multiplication O
over O
Z/pZ O
uses O
the O
Strassen O
algorithm O
when O
the O
smallest O
dimension O
is O
at O
least O
256 O
, O
which O
in O
principle O
helps O
BK O
2.1 O
for O
n O
> O
256 O
2 O
( O
the O
speedup O
is O
not O
significant O
for O
feasible O
n O
, O
however).Timings O
over O
Z/pZ O
obtained O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5 I-hardware_resources
- I-hardware_resources
2650 I-hardware_resources
2.0 I-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
with O
256 B-hardware_resources
GiB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
are O
given O
in O
Table B-compute_time
2 L-compute_time
. O

In O
Table B-compute_time
2 L-compute_time
we O
give O
CPU O
times O
for O
computing O
the O
reduced O
row O
echelon O
form O
of O
random O
1 O
, O
000 O
× O
1 O
, O
000 O
matrices O
over O
F O
2 O
e O
in O
Magma U-p_language
, O
GAP U-p_language
and O
our O
implementation O
. O

All O
experiments O
were O
run O
on O
a O
computer U-hardware_platform
equipped O
with O
an O
Intel B-hardware_resources
X5677 I-hardware_resources
Xeon I-hardware_resources
Processor L-hardware_resources
operating O
at O
3.46 B-hardware_resources
GHz L-hardware_resources
with O
a O
12 B-hardware_resources
MB I-hardware_resources
Cache L-hardware_resources
. O

Algorithm O
1 O
Computation O
of O
voltage O
sensitivity O
coefficients O
using O
the O
Jacobian O
method O
1 O
: O
build O
Jacobian O
matrix O
associated O
to O
the O
Newton O
Raphson O
method O
2 O
: O
invert O
matrix O
J O
of O
size O
2N O
× O
2N O
3 O
: O
extract O
the O
sub-matrices O
corresponding O
to O
the O
desired O
sensitivity O
coefficients O
Algorithm O
2 O
Computation O
of O
voltage O
sensitivity O
coefficients O
using O
the O
analytical O
method O
1 O
: O
build O
the O
matrix O
of O
the O
linear O
system O
of O
equations O
2 O
: O
invert O
matrix O
of O
size O
2N O
× O
2N O
3 O
: O
do O
N O
multiplications O
of O
the O
inverse O
matrix O
with O
vectors O
of O
size O
2N O
× O
1In O
Table B-compute_time
I L-compute_time
the O
mean O
CPU U-hardware_resources
time O
necessary O
to O
calculate O
the O
voltage O
sensitivity O
coefficients O
is O
presented O
for O
the O
IEEE O
13 O
and O
34 O
node O
test O
feeders O
respectively O
, O
when O
1000 O
iterations O
of O
the O
method O
are O
executed O
. O

In O
this O
paper O
we O
compare O
the O
packet O
error O
rate O
( O
PER O
) O
and O
maximum O
throughput O
of O
IEEE O
802.11n O
and O
IEEE O
802.11 O
g O
under O
interference O
from O
IEEE O
802.15.4 O
by O
using O
MATLAB U-p_language
to O
simulate O
the O
IEEE O
PHY O
for O
802.11n O
and O
802.11 O
g O
networks O
. O

For O
FIREFLY O
, O
the O
authors O
use O
the O
parameters O
proposed O
by O
# O
b59 O
for O
the O
MATLAB U-p_language
implementation O
of O
the O
algorithm O
, O
since O
they O
reach O
better O
average O
results O
on O
the O
adopted O
benchmark O
with O
respect O
to O
the O
general O
suggestions O
by O
# O
b60 O
The O
analysis O
of O
MLV O
FEs O
for O
10 O
dimensions O
is O
reported O
in O
Figure O
2a O
. O

This O
phenomenon O
may O
be O
explained O
by O
either O
space O
allocation O
on O
disk O
by O
the O
underlying O
file O
system O
at O
the O
first O
experiment O
, O
which O
may O
add O
significant O
overhead O
as O
compared O
to O
the O
second O
and O
third O
experiment O
or O
an O
artifact O
of O
the O
java U-p_language
JIT O
, O
which O
gradually O
compiles O
XtreemFS O
code O
during O
the O
first O
experiment O
. O

We O
use O
a O
4-core B-hardware_resources
Intel I-hardware_resources
core I-hardware_resources
i7 L-hardware_resources
machine O
running O
Linux B-hardware_resources
3.12.6 L-hardware_resources
. O

Further O
, O
we O
evaluate O
our O
implementation O
of O
SP-SVM O
in O
MATLAB U-p_language
with O
Intel B-p_library
MKL I-p_library
BLAS L-p_library
functions O
for O
matrix O
operations O
. O

The O
CPU U-hardware_resources
time O
used O
and O
the O
total O
memory O
consumption O
for O
the O
data-structures O
in O
state-space O
representations O
are O
reported O
. O

The O
key O
strength O
of O
UFL O
is O
the O
close O
correspondence O
between O
the O
mathematical O
notation O
for O
F O
and O
its O
Python U-p_language
implementation O
F. O
Constants O
and O
expressions O
can O
be O
compactly O
defined O
and O
used O
as O
parts O
of O
variational O
forms O
. O

The O
rth O
row O
block O
of O
S O
4 O
K O
can O
then O
be O
written O
( O
using O
" O
Matlab U-p_language
notation")S O
4 O
K O
( O
rδ O
2 O
: O
rδ O
2 O
+ O
δ O
2 O
, O
: O
) O
v O
= O
S O
4 O
K−k O
( O
r O
, O
:) O
· O
S O
4 O
k O
S O
4 O
k O
· O
· O
· O
S O
4 O
k O
vwhere O
r O
= O
i O
/ O
δ O
2 O
is O
the O
index O
of O
the O
row O
block O
of O
length O
δ O
2 O
from O
which O
row O
i O
is O
drawn O
, O
S O
4 O
K−k O
( O
r O
, O
:) O
denotes O
the O
rth O
row O
of O
S O
4 O
K−k O
, O
and O
the O
transform O
S O
4 O
k O
operates O
on O
a O
single O
δ O
× O
δ O
block O
of O
the O
image O
. O

Each O
of O
the O
computations O
finished O
after O
almost O
35 B-compute_time
hours L-compute_time
using O
a O
total O
CPU O
time O
of O
approximately O
342 B-compute_time
days L-compute_time
. O

Non O
- O
Termination O
Analysis O
of O
Java U-p_language
Bytecode O

The O
GPU U-hardware_resources
used O
in O
these O
experiments O
is O
the O
NVIDIA B-hardware_resources
GeForce I-hardware_resources
GTX I-hardware_resources
285 L-hardware_resources
with O
240 B-hardware_resources
cores L-hardware_resources
at O
1.5 B-hardware_resources
GHz L-hardware_resources
, O
and O
the O
CPU U-hardware_resources
used O
is O
the O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
Extreme I-hardware_resources
Edition I-hardware_resources
965 L-hardware_resources
with O
four B-hardware_resources
cores L-hardware_resources
at O
3.2 B-hardware_resources
GHz L-hardware_resources
. O

In O
Table O
1a O
, O
we O
compare O
accuracies O
of O
the O
two O
algorithms O
when O
given O
50 O
landmark O
points O
with O
those O
of O
KR O
for O
the O
Sigmoid O
and O
Manhattan O
kernels O
. O

We O
implement O
their O
method O
on O
the O
above O
platform O
, O
and O
record O
the O
CPU O
times O
in O
the O
last O
row O
of O
Table B-compute_time
1 L-compute_time
. O

In O
all O
our O
experiments O
we O
report O
results O
across O
5 O
random O
splits O
on O
the O
( O
indefinite O
) O
Sigmoid O
: O
K(x O
, O
y O
) O
= O
tanh(a O
x O
, O
y O
+ O
r O
) O
and O
Manhattan O
: O
K(x O
, O
y O
) O
= O
− O
x O
− O
y O
1 O
kernels O
. O

The O
Intel B-p_library
C++ I-p_library
compiler L-p_library
in O
version O
11.1.064 O
and O
TBB O
version O
3.0 O
( O
open O
source O
variant O
) O
were O
used O
for O
the O
benchmarks O
. O

In O
contrast O
to O
MATLAB U-p_language
/ O
Octave U-p_language
, O
variables O
must O
be O
declared O
before O
they O
are O
used O
. O

To O
benchmark O
the O
algorithms O
, O
we O
computed O
the O
process O
time O
using O
both O
the O
Posix O
call O
clock O
( O
) O
( O
that O
returns O
an O
approximation O
of O
processor O
time O
used O
by O
the O
program O
) O
and O
the O
CPU O
TSC O
( O
that O
counts O
the O
number O
of O
CPU O
ticks O
) O
. O

All O
experiments O
were O
executed O
on O
an O
Intel B-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
CPU L-hardware_resources
, O
1.5 B-hardware_resources
G I-hardware_resources
Hz L-hardware_resources
, O
256 B-hardware_resources
MB I-hardware_resources
RAM L-hardware_resources
, O
Windows B-hardware_platform
2000 I-hardware_platform
platform I-hardware_platform
computer L-hardware_platform
. O

All O
simulation O
and O
centrality O
analysis O
was O
done O
in O
Version O
2.14.1 O
of O
R O
R O
Development O
Core O
Team O
(2011).The O
operating O
system O
used O
was O
Windows B-hardware_platform
Vista I-hardware_platform
Enterprise I-hardware_platform
( I-hardware_platform
32 I-hardware_platform
bit I-hardware_platform
) L-hardware_platform
and O
the O
computer O
had O
an O
Intel B-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Quad I-hardware_resources
CPU I-hardware_resources
( I-hardware_resources
Q9650 I-hardware_resources
) I-hardware_resources
3.0 I-hardware_resources
GHz L-hardware_resources
with O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

To O
illustrate O
the O
idea O
as O
clearly O
as O
possible O
, O
and O
to O
address O
any O
doubts O
as O
to O
whether O
the O
above O
scheme O
is O
sound O
, O
we O
have O
defined O
our O
proposal O
as O
an O
extension O
of O
Featherweight B-p_language
Java L-p_language
. O

We O
used O
the O
Breiman O
- O
RF O
implementation O
in O
scikit B-p_library
- I-p_library
learn L-p_library
# O
b15 O
.We O
evaluate O
on O
four O
of O
the O
five O
datasets O
used O
in O
# O
b19 O
-we O
excluded O
the O
mushroom O
dataset O
as O
even O
very O
simple O
logical O
rules O
achieve O
> O
99 O
% O
accuracy O
on O
this O
dataset O
. O

We O
are O
grateful O
to O
Karsten O
Schwan O
and O
the O
CERCS O
group O
at O
Georgia O
Tech O
for O
lending O
the O
support O
of O
their O
GPU U-hardware_resources
machines O
so O
that O
we O
could O
conduct O
efficient O
parallel O
computations O
. O

To O
demonstrate O
the O
performance O
gain O
of O
our O
GPU O
approach O
, O
we O
implemented O
Algorithm O
1 O
for O
a O
quad-core B-hardware_resources
CPU L-hardware_resources
with O
four O
threads O
, O
and O
tested O
on O
our O
testbed O
machine O
. O

All O
experiments O
are O
performed O
on O
an O
Intel(R B-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
3820 I-hardware_resources
CPU I-hardware_resources
@ I-hardware_resources
3.60 I-hardware_resources
GHz I-hardware_resources
3.60GHz L-hardware_resources
with O
16.GB B-hardware_resources
RAM L-hardware_resources
. O

Examples O
of O
this O
technology O
include O
client O
- O
side O
Java U-p_language
Beans O
and O
server O
- O
side O
Enterprise B-p_language
Java L-p_language
Beans O
( O
EJB O
) O
. O

The O
implementation O
of O
Yaroslavskiy O
's O
algorithm O
in O
Sun O
's O
Java B-p_language
7 L-p_language
uses O
the O
two O
tertiles O
in O
a O
sample O
of O
size O
5 O
as O
pivots O
, O
i.e. O
, O
the O
elements O
of O
rank O
2 O
and O
4 O
. O

Transition O
to O
Java B-p_language
8 L-p_language
will O
likely O
be O
more O
difficult O
and O
has O
yet O
to O
be O
attempted O
. O

The O
first O
two O
rows O
on O
Table O
I O
show O
results O
considering O
2 O
processes O
( O
P=2 O
) O
total O
, O
one O
per O
cluster O
node O
, O
and O
each O
process O
with O
2 O
user-threads O
( O
VP=4 O
) O
sharing O
the O
same O
GPU U-hardware_resources
. O

The O
machine O
used O
for O
the O
experiments O
has O
an O
Intel B-hardware_resources
R I-hardware_resources
Xeon I-hardware_resources
R I-hardware_resources
E5620 L-hardware_resources
at O
2.40GHz U-hardware_resources
, O
94 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

For O
the O
proposed O
method O
, O
the O
neural O
network O
was O
implemented O
with O
GPU U-hardware_resources
acceleration O
using O
an O
open-source O
deep O
learning O
framework O
, O
Caffe U-p_library
# O
b16 O
. O

The O
table U-compute_time
shows O
the O
total O
FFT B-compute_time
time I-compute_time
( I-compute_time
CPU I-compute_time
clock I-compute_time
cycles I-compute_time
) L-compute_time
divided O
by O
the O
number O
of O
butterflies O
performed O
, O
which O
is O
11 O
× O
2 O
10 O
. O

All O
experiments O
were O
performed O
on O
a O
Mac B-hardware_platform
OS I-hardware_platform
X I-hardware_platform
Lion L-hardware_platform
machine O
with O
a O
2.53 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
processor L-hardware_resources
and O
Java B-p_language
1.6 L-p_language
allowing O
1 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
Java I-hardware_resources
heap I-hardware_resources
space L-hardware_resources
. O

We O
performed O
all O
computations O
in O
Matlab U-p_language
and O
it O
turns O
out O
that O
the O
following O
occurs O
: O
Case O
1 O
: O
The O
five O
agents O
will O
always O
collapse O
to O
a O
single O
cluster O
after O
6 O
time O
steps O
, O
though O
there O
are O
two O
different O
possibilities O
for O
the O
sequence O
of O
receptivity O
graphs O
. O

Let O
J O
be O
a O
Java B-p_library
Virtual I-p_library
Machine L-p_library
, O
P O
be O
a O
Java U-p_language
bytecode O
program O
consisting O
of O
instructions O
in O
C O
, O
and O
b O
be O
a O
block O
of O
P O
. O

Two O
distinctive O
styles O
of O
language O
- O
integrated O
query O
have O
emerged:• O
Employ O
some O
form O
of O
static O
analysis O
or O
type O
system O
to O
identify O
parts O
of O
programs O
that O
can O
be O
turned O
into O
queries O
( O
e.g. O
Kleisli O
# O
b37 O
, O
Links O
# O
b7 O
, O
Batches O
for O
Java U-p_language
# O
b35 O
) O
. O

The O
computational O
experiments O
were O
run O
on O
a O
personal B-hardware_platform
computer L-hardware_platform
with O
an O
Intel B-hardware_resources
Core I-hardware_resources
i5 I-hardware_resources
M560 I-hardware_resources
2.67 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
. O

The O
compilers O
in O
use O
are O
GNU B-p_library
C I-p_library
compiler I-p_library
gcc I-p_library
version I-p_library
4.3.3 L-p_library
and O
Intel B-p_library
C I-p_library
compiler I-p_library
icc I-p_library
version I-p_library
11.0 L-p_library
. O

We O
divided O
the O
time O
of O
reconstruction O
by O
a O
factor O
30 O
compare O
to O
the O
same O
reconstruction O
made O
only O
on O
the O
CPU B-hardware_resources
( I-hardware_resources
double I-hardware_resources
quad-core I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
E5520 I-hardware_resources
at I-hardware_resources
2.27 I-hardware_resources
GHz I-hardware_resources
) L-hardware_resources
. O

The O
cache O
optimized O
version O
( B-hardware_resources
CPU I-hardware_resources
DD I-hardware_resources
) L-hardware_resources
was O
almost O
five O
times O
faster O
than O
the O
classical O
CPU O
implementation O
on O
the O
AMD B-hardware_resources
Opteron I-hardware_resources
CPU L-hardware_resources
used O
. O

All O
the O
experiments O
are O
implemented O
in O
C B-p_language
# L-p_language
and O
run O
on O
a O
core B-hardware_resources
i5 I-hardware_resources
CPU I-hardware_resources
2.5-GHz L-hardware_resources
machine O
with O
3-G B-hardware_resources
RAM L-hardware_resources
. O

Experiments O
were O
performed O
on O
a O
cluster O
with O
32 B-hardware_resources
dual I-hardware_resources
core I-hardware_resources
2GHz I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
processors L-hardware_resources
with O
2 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
per O
processor O
. O

The O
measurements O
for O
each O
package O
are O
for O
the O
average O
of O
five O
runs O
on O
a O
dual-core B-hardware_platform
CPU I-hardware_platform
Windows I-hardware_platform
7 I-hardware_platform
desktop L-hardware_platform
machine O
with O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

# O
b7 O
identified O
27 O
bug O
fix O
patterns O
from O
software O
project O
change O
histories O
of O
seven O
Java U-p_language
open O
source O
projects O
, O
Eclipse O
, O
Columba O
, O
JEdit O
, O
Scarab O
, O
ArgoUML O
, O
Lucene O
, O
and O
MegaMek O
. O

However O
, O
in O
order O
to O
use O
the O
numerically O
more O
efficient O
Matlab U-p_language
strict O
LMI O
solver O
, O
in O
this O
section O
we O
convert O
the O
SDP O
problem O
proposed O
in O
Theorem O
1 O
into O
a O
strict O
LMI O
optimization O
problem O
through O
a O
smart O
transformation O
. O

In O
the O
following O
, O
a O
subset O
of O
the O
complete O
solution O
of O
the O
reengineering O
challenge O
# O
b2 O
is O
presented O
while O
a O
full O
listing O
of O
rules O
and O
transformation O
units O
is O
given O
in O
Appendix O
A. O
Java U-p_language
source O
code O
triggers O
the O
transformation O
which O
can O
be O
found O
in O
Appendix O
B. O
Since O
HENSHIN O
currently O
does O
not O
support O
list O
semantics O
but O
set O
semantics O
only O
, O
we O
exploit O
a O
self O
- O
contained O
helper O
structure O
called O
trace O
model O
to O
simulate O
iteration O
by O
marking O
already O
processed O
elements O
. O

For O
our O
implementation O
, O
we O
use O
the O
open O
- O
source O
Caffe U-p_library
deep O
learning O
software O
# O
b21 O
. O

We O
conduct O
comprehensive O
experiments O
to O
benchmark O
the O
Xeon B-hardware_resources
Phi L-hardware_resources
and O
compare O
our O
optimized O
MapReduce O
framework O
with O
a O
state-of-the-art O
multi-core O
based O
MapReduce O
framework O
( O
Phoenix++ O
) O
. O

Table O
III O
for O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
940 L-hardware_resources
and O
AMD B-hardware_resources
Turion I-hardware_resources
X2 I-hardware_resources
RM-70 I-hardware_resources
processors L-hardware_resources
respectively O
. O

They O
are O
all O
run O
in O
Matlab B-p_language
R L-p_language
on O
two O
quad B-hardware_resources
core I-hardware_resources
Intel I-hardware_resources
R I-hardware_resources
Xeon I-hardware_resources
CPUs I-hardware_resources
( I-hardware_resources
E5462 I-hardware_resources
@ I-hardware_resources
2.80GHz I-hardware_resources
) L-hardware_resources
. O

The O
experiments O
were O
conducted O
on O
a O
personal B-hardware_platform
computer L-hardware_platform
with O
a B-hardware_resources
2.66GHz I-hardware_resources
Quad I-hardware_resources
Core I-hardware_resources
CPU L-hardware_resources
and O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
running O
64bit B-hardware_platform
GNU/Linux I-hardware_platform
( I-hardware_platform
Ubuntu I-hardware_platform
10.10 I-hardware_platform
) L-hardware_platform
. O

Within O
the O
system O
, O
we O
sample O
the O
CPU U-hardware_resources
usage O
of O
each O
experiment O
from O
starting O
the O
map O
phase O
until O
finishing O
the O
reduce O
phase O
with O
time O
interval O
of O
one O
second O
; O
SysStat O
monitoring O
package O
in O
Linux U-hardware_platform
is O
used O
to O
collect O
such O
CPU U-hardware_resources
utilization O
time O
series O
( O
or O
patterns O
) O
[ O
16 O
] O
. O

We O
have O
used O
a O
machine O
with O
Intel B-hardware_resources
Pentium I-hardware_resources
Dual I-hardware_resources
T2310 I-hardware_resources
1.46GHz I-hardware_resources
processor L-hardware_resources
Figure B-compute_time
15 L-compute_time
we O
show O
the O
running O
times O
of O
the O
GLPK O
ILP O
solver O
for O
the O
Monroe O
and O
for O
Chamberlin-Courant O
rules O
. O

We O
have O
implemented O
all O
algorithms O
in O
C++ U-p_language
, O
and O
have O
run O
all O
experiences O
on O
a O
server U-hardware_platform
with O
two B-hardware_resources
6-core/12-thread I-hardware_resources
3.46GHz I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
X5690 I-hardware_resources
CPUs L-hardware_resources
, O
with O
48 B-hardware_resources
GB I-hardware_resources
1.3GHz I-hardware_resources
RAM L-hardware_resources
. O

The O
results O
are O
reported O
in O
Figure O
7 O
( O
Right O
) O
, O
and O
show O
that O
BTD O
was O
able O
to O
solve O
more O
problems O
than O
the O
two O
other O
methods O
for O
fixed O
CPU U-hardware_resources
time O
. O

As O
previously O
mentioned O
all O
of O
our O
experiments O
are O
done O
using O
11 B-hardware_resources
cores L-hardware_resources
on O
a O
2 B-hardware_resources
CPU L-hardware_resources
, O
12 B-hardware_resources
Core L-hardware_resources
, O
x86 B-hardware_platform
- I-hardware_platform
64 I-hardware_platform
Linux L-hardware_platform
Machine O
, O
with O
2.93 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
X5670 I-hardware_resources
Processors L-hardware_resources
, O
74 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
and O
hyperthreading O
disabled O
. O

Several O
proposals O
for O
programmer O
- O
oriented O
annotations O
of O
Java U-p_language
programs O
have O
been O
published O
following O
Bloch O
's O
initial O
proposal O
of O
an O
annotation O
framework O
for O
the O
Java B-p_language
language L-p_language
# O
b4 O
. O

The O
results O
for O
connectivity O
are O
depicted O
in O
Figure O
1 O
, O
where O
the O
curve O
fitting O
tool O
of O
MATLAB U-p_language
is O
used O
. O

A O
user O
need O
only O
provide O
a O
function O
entry O
point O
to O
their O
model O
, O
which O
can O
then O
call O
any O
other O
functions O
, O
make O
use O
of O
any O
globals O
defined O
in O
the O
file O
, O
and O
use O
any O
common O
2 O
Python U-p_language
constructs O
as O
needed O
. O

The O
entire O
analysis O
is O
conducted O
by O
using O
MATLAB U-p_language
tool O
. O

We O
illustrate O
our O
ideas O
by O
extending O
Featherweight B-p_language
Java I-p_language
( I-p_language
FJ I-p_language
) L-p_language
# O
b1 O
with O
symmetric O
encapsulated O
multi O
- O
methods O
, O
the O
result O
we O
call O
Symmetric B-p_language
Featherweight I-p_language
Multi I-p_language
- I-p_language
Java I-p_language
( I-p_language
SFMJ I-p_language
) L-p_language
. O

For O
linear O
algebra O
operations O
on O
the O
GPU U-hardware_resources
, O
we O
use O
Jacket U-p_library
# O
b0 O
, O
a O
MATLAB U-p_language
toolkit O
for O
accelerating O
computations O
on O
GPUs U-hardware_resources
. O

We O
adopt O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5620 I-hardware_resources
( I-hardware_resources
2.4 I-hardware_resources
GHz I-hardware_resources
) I-hardware_resources
CPU L-hardware_resources
for O
comparison O
. O

An O
approximate O
timing O
measurement O
of O
one O
inner O
loop O
( O
for O
d O
max O
= O
80 O
) O
showed O
that O
the O
proposed O
method O
with O
κ O
= O
1 O
took O
approximately O
20 B-compute_time
seconds L-compute_time
for O
the O
Banana O
dataset O
( O
on O
a O
machine O
with O
2 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
and O
dual B-hardware_resources
core I-hardware_resources
Intel I-hardware_resources
CPU L-hardware_resources
running O
at O
1.83 B-hardware_resources
GHz L-hardware_resources
) O
. O

These O
new O
language O
features O
will O
be O
required O
to O
migrate O
to O
Java B-p_language
8 L-p_language
:• O
lambda O
expressions O
( O
closures O
) O
• O
JSR308 O
and O
other O
enhancements O
to O
Java U-p_language
annotations O

Deep O
GPU-MPCNN U-hardware_resources
# O
b17 O
also O
helped O
to O
achieve O
new O
best O
results O
on O
ImageNet O
classification O
# O
b94 O
and O
PASCAL O
object O
detection O
# O
b33 O
.Additional O
contests O
are O
mentioned O
in O
the O
web O
pages O
of O
the O
Swiss O
AI O
Lab O
IDSIA O
, O
the O
University O
of O
Toronto O
, O
NY O
University O
, O
and O
the O
University O
of O
Montreal O
. O

The O
computer U-hardware_platform
use O
an O
Intel B-hardware_resources
Core I-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
560 L-hardware_resources
at O
2.67GHz U-hardware_resources
with O
8 B-hardware_resources
Go I-hardware_resources
RAM L-hardware_resources
. O

All O
numerical O
tests O
have O
been O
carried O
out O
on O
a O
laptop U-hardware_platform
with O
4Gb B-hardware_resources
memory L-hardware_resources
and O
2.6GHz B-hardware_resources
Intel I-hardware_resources
CPU.5.1 L-hardware_resources
. O

Consequently O
, O
secure O
programming O
guidelines O
for O
Java U-p_language
such O
as O
those O
proposed O
by O
Sun O
# O
b16 O
and O
CERT O
# O
b5 O
stress O
the O
importance O
of O
using O
defensive O
copying O
or O
cloning O
before O
accepting O
or O
handing O
out O
references O
to O
an O
internal O
mutable O
object O
. O

All O
experiments O
are O
performed O
on O
a O
Linux B-hardware_platform
server L-hardware_platform
equipped O
with O
Intel B-hardware_resources
Xeon I-hardware_resources
X5660 I-hardware_resources
CPUs I-hardware_resources
( I-hardware_resources
2.80 I-hardware_resources
GHz I-hardware_resources
, I-hardware_resources
12 I-hardware_resources
MB I-hardware_resources
cache I-hardware_resources
size I-hardware_resources
) L-hardware_resources
for O
overall O
24 B-hardware_resources
cores L-hardware_resources
and O
128 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources 
; O
the O
server U-hardware_platform
cost O
about O
8 O
900 O
EUR O
in O
2010.A O
brief O
comparison O
with O
snap B-compute_time
and I-compute_time
HADI I-compute_time
timings L-compute_time
is O
shown O
in O
Table B-compute_time
1 L-compute_time
. O

An O
interested O
reader O
can O
find O
more O
details O
about O
both O
methods O
in O
# O
b14 O
or O
# O
b16 O
# O
b13 O
, O
where O
C++ U-p_language
and O
MATLAB U-p_language
implementations O
are O
available O
. O

The O
CPU U-hardware_platform
used O
for O
the O
serial O
code O
was O
an O
1.86GHz B-hardware_platform
Intel I-hardware_platform
Core I-hardware_platform
2 I-hardware_platform
Duo L-hardware_platform
. O

The O
kernels O
selected O
for O
SVM O
are O
heavy-tailed O
RBF O
kernels O
with O
parameters O
γ O
= O
1 O
, O
a O
= O
1 O
, O
b O
= O
1 O
. O

In O
fact O
, O
Pylearn2 U-p_library
TrainingAlgorithms O
are O
not O
even O
required O
to O
use O
Theano U-p_library
at O
all O
. O

Although O
, O
many O
scientists O
and O
engineers O
use O
Octave U-p_language
or O
MATLAB U-p_language
as O
their O
preferred O
programming O
language O
, O
dynamic O
nature O
of O
these O
languages O
can O
lead O
to O
slower O
running O
- O
time O
of O
programs O
written O
in O
these O
languages O
compared O
to O
programs O
written O
in O
languages O
which O
are O
not O
as O
dynamic O
, O
like O
C U-p_language
, O
C++ U-p_language
and O
Fortran U-p_language
. O

The O
CPU U-hardware_resources
time O
per O
iteration O
is O
measured O
after O
sweeping O
the O
entire O
data O
set O
. O

All O
our O
micro-benchmarks O
were O
performed O
on O
a O
standard O
Nexus B-hardware_platform
7 I-hardware_platform
development I-hardware_platform
tablet L-hardware_platform
( O
Quad-core B-hardware_resources
1.51 I-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
and O
2 B-hardware_resources
GB I-hardware_resources
DDR3L I-hardware_resources
RAM L-hardware_resources
) O
, O
which O
we O
booted O
and O
then O
used O
according O
to O
a O
testplan O
for O
different O
daily O
tasks O
such O
as O
browsing O
the O
Internet O
, O
sending O
text O
messages O
and O
e-mails O
, O
contacts O
management O
, O
or O
(un-)installing O
3rd O
party O
apps O
. O

Table O
4 O
lists O
CPU O
times O
for O
computing O
the O
( O
reduced O
) O
row O
echelon O
form O
using O
Magma U-p_language
( O
reduced O
) O
, O
GAP U-p_language
( O
not O
reduced O
) O
and O
our O
implementation O
( O
reduced O
) O
. O

In O
our O
experiments O
, O
B O
is O
based O
on O
a O
simple O
projection O
method O
in O
[ O
Strang O
, O
2007 O
, O
Section O
6.7 O
] O
and O
open O
- O
source O
Matlab U-p_language
code O
# O
b12 O
. O

This O
work O
was O
supported O
in O
part O
by O
Intel O
's O
University O
Research O
Program O
" O
5 O
G O
: O
Transforming O
the O
Wireless O
User O
Experience O
" O
and O
by O
the O
MINECO O
Project O
TEC2012 O
- O
34642 O
. O

All O
the O
experiments O
were O
carried O
out O
on O
a O
32-bit B-hardware_platform
Ubuntu I-hardware_platform
server L-hardware_platform
featuring O
a O
Dual-Core B-hardware_resources
2GHz I-hardware_resources
Opteron I-hardware_resources
CPU L-hardware_resources
and O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources 
; O
a O
timeout O
of O
600 B-compute_time
seconds L-compute_time
and O
a O
memory O
threshold O
of O
2 B-hardware_resources
GB L-hardware_resources
( O
whatever O
is O
reached O
first O
) O
were O
put O
as O
limit O
to O
the O
executions O
. O

All O
the O
methods O
were O
implemented O
based O
on O
the O
Caffe U-p_library
library O
. O

The O
table U-compute_time
also O
shows O
the O
CPU U-hardware_resources
timings O
for O
k O
= O
80 O
. O

The O
SSCA#2 O
benchmark O
suite O
is O
comprised O
of O
a O
synthetic O
scale-free O
graph O
generator O
based O
on O
RMAT O
method O
# O
b9 O
and O
four O
kernels O
. O

The O
tests O
were O
carried O
out O
on O
a O
32-bit B-hardware_platform
Fedora I-hardware_platform
12 I-hardware_platform
Linux L-hardware_platform
machine O
with O
a B-hardware_resources
2.26GHz I-hardware_resources
Intel I-hardware_resources
Core2 I-hardware_resources
Duo I-hardware_resources
processor L-hardware_resources
and O
2.9GiB B-hardware_resources
RAM L-hardware_resources
as O
follows O
: O
first O
, O
we O
translated O
the O
DMC O
specification O
into O
the O
corresponding O
ISPL O
code O
using O
the O
compiler O
, O
then O
we O
analysed O
the O
resulting O
code O
using O
MCMAS O
. O

Using O
MATLAB U-p_language
we O
solved O
P O
5 O
for O
the O
tree O
in O
Fig O
. O

Mike O
Swarbrick O
Jones O
presented O
the O
implementation O
of O
CAE O
in O
Theano B-p_library
/ I-p_library
Lasagne L-p_library
# O
b15 O
# O
b16 O
. O

We O
have O
used O
implementations O
from O
Python U-p_language
scikit B-p_library
learn I-p_library
toolkit I-p_library
8 L-p_library
. O

Each O
node O
had O
2 B-hardware_resources
Tesla I-hardware_resources
M2050 I-hardware_resources
GPU I-hardware_resources
's L-hardware_resources
, O
two B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
X5670 I-hardware_resources
processors L-hardware_resources
running O
at O
2.93GHz U-hardware_resources
, O
and O
an O
infiniband O
interconnect O
. O

Using O
the O
experimental O
results O
in O
# O
b16 O
, O
TKIP O
algorithm O
consumes O
26804 O
μJ O
per O
256 O
byte O
frame O
on O
a O
1.8 B-hardware_resources
GHz I-hardware_resources
intel I-hardware_resources
© I-hardware_resources
P-4 I-hardware_resources
processor L-hardware_resources
, O
512 B-hardware_resources
MB I-hardware_resources
RAM L-hardware_resources
. O

The O
development O
of O
a O
deep O
( O
stacked O
) O
convolutional O
auto O
- O
encoder O
in O
the O
Caffe U-p_library
deep O
learning O
framework O
is O
presented O
in O
this O
paper O
. O

The O
CNN O
was O
trained O
by O
AdaGrad O
# O
b4 O
with O
learning O
rate O
0.01 O
on O
a O
GPU U-hardware_resources
using O
the O
Caffe U-p_library
# O
b8 O
package O
. O

In O
each O
experiment O
, O
neither O
the O
CPU U-hardware_resources
nor O
the O
RAM U-hardware_resources
were O
the O
bottleneck O
. O

We O
have O
evaluated O
a O
few O
available O
state-of-the-art O
DPLLbased O
SAT O
and O
QBF O
solvers O
, O
to O
check O
the O
feasibility O
of O
the O
QBF O
formulations O
of O
the O
reachability O
checking O
problem O
on O
a O
set O
of O
thirteen O
proprietary O
Intel U-hardware_resources
® O
model O
checking O
test O
cases O
of O
different O
sizes O
. O

We O
implemented O
the O
2 O
+ O
1 O
dimensional O
KPZ O
both O
using O
CUDA U-p_library
and O
OpenCL U-p_library 
. O

As O
a O
reference O
deep O
network O
we O
consider O
the O
Caffe U-p_library
- O
Alex O
# O
b10 O
model O
( O
CNN O
- O
A O
) O
, O
which O
closely O
reproduces O
the O
network O
by O
Krizhevsky O
et O
al O
. O

For O
our O
experiments O
, O
we O
used O
a O
server U-hardware_platform
equipped O
with O
two B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
dual-core I-hardware_resources
processors L-hardware_resources
, O
each O
one O
running O
at O
1.86GHz B-hardware_resources
clock I-hardware_resources
frequency L-hardware_resources
. O

A O
new O
record O
# O
b23 O
on O
the O
ICDAR O
Chinese O
handwriting O
recognition O
benchmark O
( O
over O
3700 O
classes O
) O
was O
set O
on O
a O
desktop B-hardware_platform
machine L-hardware_platform
by O
a O
GPU-MCMPCNN U-hardware_resources
with O
almost O
human O
performance O
. O

All O
exhaustive O
methods O
were O
run O
on O
an O
Intel B-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
2.67 I-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
. O

In O
our O
evaluation O
, O
the O
system O
runs O
Hadoop B-hardware_platform
version I-hardware_platform
0.20.2 L-hardware_platform
that O
is O
Apache O
implementation O
of O
Mapreduce O
developed O
in O
Java B-p_language
[ I-p_language
2 I-p_language
] L-p_language
; O
the O
SysStat O
package O
is O
also O
concurrently O
executed O
in O
another O
terminal O
to O
monitor O
the O
CPU U-hardware_resources
utilization O
time O
series O
of O
applications O
( O
in O
the O
native O
system O
) O
[ O
16 O
] O
. O

Finally O
, O
on O
the O
right O
of O
Figure B-compute_time
4 L-compute_time
, O
we O
give O
also O
the O
average O
of O
the O
total O
cpu O
time O
( O
in O
seconds O
) O
needed O
to O
solve O
the O
game O
but O
we O
separated O
the O
tests O
with O
strongly O
degenerate O
policy O
iteration(s O
) O
, O
represented O
by O
the O
dashed O
line O
, O
from O
the O
non O
strongly O
degenerate O
ones O
, O
represented O
by O
the O
plain O
curve O
. O

The O
effective O
communication O
bandwidth O
drops O
by O
35 O
% O
across O
the O
available O
frequency O
range O
at O
PPN=16 O
and O
still O
by O
30 O
% O
at O
PPN=1 O
(arrows).In O
order O
to O
explore O
the O
reasons O
for O
this O
effect O
we O
have O
conducted O
experiments O
with O
" B-hardware_resources
sendrecv I-hardware_resources
" L-hardware_resources
from O
the O
Intel B-p_library
MPI L-p_library
benchmark O
suite O
( O
IMB O
) O
# O
b36 O
, O
since O
it O
mimics O
the O
ringshift-like O
haloexchange O
communication O
pattern O
of O
the O
ILBDC O
code O
. O

The O
feature O
extraction O
is O
mostly O
written O
in O
Cython U-p_language
and O
Python U-p_language
, O
heavily O
relying O
on O
SciPy U-p_library
and O
NumPy B-p_library
libraries L-p_library
, O
and O
each O
sample O
's O
features O
are O
extracted O
by O
a O
single O
thread O
process O
. O

Similarity O
measures O
were O
implemented O
in O
C++ U-p_language
and O
executed O
in O
a O
single B-hardware_resources
CPU I-hardware_resources
core L-hardware_resources 
. O

This O
idea O
grew O
out O
of O
James B-p_library
Bergstra I-p_library
's I-p_library
Theano L-p_library 
- O
linear O
module O
which O
has O
since O
been O
incorporated O
into O
Pylearn2. U-p_library
Different O
linear O
operator O
implementations O
require O
their O
inputs O
to O
be O
formatted O
in O
different O
ways O
. O

The O
experiments O
were O
conducted O
using O
an O
implementation O
in O
C++ U-p_language
on O
an O
Intel B-hardware_resources
( I-hardware_resources
R I-hardware_resources
) I-hardware_resources
Pentium I-hardware_resources
( I-hardware_resources
R I-hardware_resources
) I-hardware_resources
D L-hardware_resources
with O
3.5 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

All O
CPU O
times O
reported O
in O
this O
section O
are O
in O
seconds O
. O

A O
consequence O
is O
that O
these O
packages O
are O
less O
user O
- O
friendly O
and O
flexible O
, O
but O
far O
more O
efficient O
, O
than O
similar O
projects O
implemented O
in O
scripting O
languages O
such O
as O
Matlab U-p_language
or O
Python U-p_language
. O

Firstly O
, O
the O
Java U-p_language
system O
must O
rely O
on O
programmer O
competence O
to O
ensure O
data O
race O
freedom O
; O
this O
is O
a O
manual O
and O
generally O
difficult O
task O
. O

For O
simplicity O
, O
we O
assume O
that O
the O
stack O
there O
contains O
exactly O
as O
many O
elements O
as O
are O
needed O
to O
hold O
the O
return O
value O
( O
normally O
1 O
element O
, O
but O
0 O
element O
in O
the O
case O
of O
methods O
returning O
void O
, O
such O
as O
all O
the O
constructors O
or O
the O
main O
method).A O
denotational O
semantics O
for O
Java U-p_language
bytecode O
is O
presented O
in O
# O
b24 O
together O
with O
a O
path O
- O
length O
relational O
abstract O
domain O
that O
is O
used O
for O
proving O
termination O
of O
Java U-p_language
bytecode O
programs O
. O

In O
order O
to O
compare O
the O
optimality O
and O
performance O
of O
Safari O
to O
various O
diagnostic O
algorithms O
, O
we O
have O
performed O
more O
than O
a O
million O
diagnosis O
computations O
on O
64 B-hardware_resources
dual-CPU I-hardware_resources
nodes L-hardware_resources
belonging O
to O
a O
cluster O
. O

However O
, O
these O
attempts O
end O
up O
being O
inferior O
to O
the O
neural O
network O
classifier O
that O
is O
provided O
by O
Caffe U-p_library
. O

This O
CNN O
is O
implemented O
using O
the O
Caffe U-p_library
deep O
learning O
framework O
# O
b15 O
; O
the O
full O
architecture O
specification O
( O
e.g. O
types O
of O
nonlinearites O
and O
specific O
layer O
parameters O
) O
is O
encoded O
in O
the O
Caffe U-p_library
configuration O
files O
which O
are O
provided O
as O
part O
of O
our O
open O
source O
code O
. O

The O
lowest O
quality O
element O
had O
a O
quality O
of O
0.34 O
, O
and O
in O
total O
only O
10 O
elements O
out O
of O
26 O
million O
have O
a O
quality O
less O
than O
0.4.The O
benchmarks O
were O
run O
on O
a O
Intel(R B-hardware_resources
) I-hardware_resources
Xeon(R I-hardware_resources
) I-hardware_resources
E5 I-hardware_resources
- I-hardware_resources
2650 I-hardware_resources
CPU L-hardware_resources
. O

These O
instructions O
exemplify O
the O
operations O
that O
the O
Java B-p_library
Virtual I-p_library
Machine L-p_library
performs O
. O

All O
experiments O
used O
Matlab B-p_language
R2013a L-p_language
. O

We O
ran O
the O
crawler O
on O
three B-hardware_platform
Windows I-hardware_platform
PCs L-hardware_platform
at O
the O
same O
time O
, O
each O
with O
a O
2.0 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
processor L-hardware_resources
and O
1 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

With O
the O
above O
considerations O
, O
we O
can O
solve O
the O
39 O
bus O
network O
certification O
problem O
in O
about O
20 B-compute_time
minutes L-compute_time
on O
a O
Mac-BookPro U-hardware_platform
2.6 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 L-hardware_resources
notebook O
. O

Figure B-compute_time
12 L-compute_time
shows O
the O
CPU U-hardware_resources
time O
( O
left O
) O
and O
number O
of O
backtracks O
on O
the O
solved O
instances O
( O
right O
) O
of O
QuBE(rnd O
, O
cln O
, O
sln)[3 O
] O
and O
QuBE(rnd O
, O
cbj O
, O
sbj O
) O
[ O
3 O
] O
. O

Java U-p_language
et O
al O
. O

In O
the O
timing O
results O
, O
the O
Intel B-p_library
Math I-p_library
Kernel I-p_library
Library I-p_library
( I-p_library
MKL I-p_library
) L-p_library
is O
used O
to O
solve O
the O
linear O
system O
arising O
in O
each O
Newton O
iteration O
. O

In O
what O
follows O
, O
we O
describe O
the O
Matlab U-p_language
implementation O
[ O
43]. O

A O
new O
keyword O
is O
added O
to O
Java U-p_language
identifying O
remote O
objects O
. O

The O
computer O
we O
used O
to O
process O
the O
database O
is O
a O
multi-core B-hardware_platform
machine L-hardware_platform
mounting O
8 B-hardware_resources
Intel(R I-hardware_resources
) I-hardware_resources
Xeon(R I-hardware_resources
) I-hardware_resources
X3470 I-hardware_resources
CPU L-hardware_resources
, O
with O
a O
2.93 B-hardware_resources
GHz I-hardware_resources 
working I-hardware_resources
clock I-hardware_resources
frequency L-hardware_resources
, O
with O
a O
RAM B-hardware_resources
of I-hardware_resources
16 I-hardware_resources
GB L-hardware_resources
. O
The O
database O
contains O
a O
copy O
of O
all O
pages O
with O
all O
their O
edits O
in O
plain O
text O
by O
using O
the O
XML O
structure O
. O

That O
is O
, O
when O
no O
directive O
has O
been O
presented O
in O
input O
program O
, O
the O
compiler O
generates O
code O
for O
one O
- O
based O
matrices O
, O
initializing O
variables O
and O
bound O
checking O
which O
is O
more O
consistent O
with O
Octave U-p_language
/ O
MATLAB U-p_language
behavior O
. O

Initially O
the O
project O
was O
simply O
an O
experiment O
to O
see O
whether O
OpenJDK U-p_library
would O
make O
a O
good O
replacement O
for O
the O
custom O
parser O
that O
underlies O
ESC O
/ O
Java U-p_language
# O
b2 O
# O
b37 O
# O
b16 O
and O
the O
MultiJava B-p_library
compiler L-p_library
that O
underlies O
the O
JML2 B-p_library
tools L-p_library
, O
neither O
of O
which O
implemented O
Java U-p_language
generics O
. O

For O
the O
CPU U-hardware_resources
up/down-dating O
we O
used O
the O
LAPACK O
suite O
. O

The O
proposed O
parallelization O
attained O
an O
efficiency O
of O
90 O
% O
in O
a O
distributed O
system O
with O
about O
800 B-hardware_resources
CPU I-hardware_resources
cores L-hardware_resources
. O

The O
equipment O
used O
for O
image O
processing O
was O
a O
personal B-hardware_platform
computer L-hardware_platform
( O
CPU B-hardware_resources
: I-hardware_resources
Intel(R I-hardware_resources
) I-hardware_resources
Core(TM)2 I-hardware_resources
Duo I-hardware_resources
CPU L-hardware_resources
, O
2.20GHz U-hardware_resources
; O
system B-hardware_resources
memory I-hardware_resources
3.07 I-hardware_resources
GB L-hardware_resources
; O
OS B-hardware_platform
: I-hardware_platform
Windows I-hardware_platform
XP L-hardware_platform
) O
. O

Also O
the O
CPU U-hardware_resources
time O
for O
watermark O
detection O
of O
the O
same O
image O
is O
about O
3.92 O
sec O
and O
1.49 B-compute_time
sec L-compute_time
, O
respectively O
. O

Our O
technique O
for O
proving O
non O
- O
termination O
of O
a O
Java U-p_language
bytecode O
program O
P O
consists O
in O
abstracting O
P O
as O
a O
CLP(PL O
) O
program O
PCLP O
, O
then O
in O
proving O
non O
- O
termination O
of O
PCLP O
, O
and O
finally O
in O
concluding O
the O
non O
- O
termination O
of O
P O
from O
that O
of O
PCLP O
, O
when O
it O
is O
possible O
. O

The O
technique O
that O
we O
describe O
in O
# O
b24 O
for O
proving O
the O
termination O
of O
a O
Java U-p_language
bytecode O
program O
P O
computes O
a O
CLP(PL O
) O
program O
PCLP O
which O
is O
an O
over O
- O
approximation O
of O
P O
, O
in O
the O
sense O
that O
the O
set O
of O
executions O
of O
P O
is O
" O
included O
" O
in O
that O
of O
PCLP O
. O

We O
selected O
the O
following O
methods O
for O
numerical O
comparison O
: O
quickselect O
on O
CPU U-hardware_resources
, O
quickselect O
on O
GPU U-hardware_resources
as O
a O
single O
thread O
, O
GPU U-hardware_resources
version O
of O
the O
radix O
sort O
# O
b28 O
, O
four O
methods O
based O
on O
minimization O
of O
( O
1 O
) O
( O
Brent O
's O
, O
golden O
section O
, O
nonsmooth O
quasi-Newton O
and O
cutting O
plane O
) O
and O
two O
methods O
based O
on O
solving O
0 O
∈ O
g(y O
) O
( O
bisection O
and O
Brent O
's O
root O
finding O
algorithm).We O
randomly O
generated O
the O
following O
data O
sets O
of O
varying O
length O
n O
∈ O
{ O
8192 O
= O
2 O
13 O
, O
32768 O
= O
2 O
$ O
b15 O
, O
131072 O
= O
2 O
17 O
, O
524288 O
= O
2 O
$ O
b19 O
, O
2097152 O
= O
2 O
21 O
, O
8388608 O
= O
2 O
23 O
, O
33554432 O
= O
2 O
25 O
, O
134 O
× O
10 O
6 O
≈ O
2 O
27 O
} O
:1 O
) O
Uniform O
x O
i O
∼ O
U(0 O
, O
1 O
) O
2 O
) O
Normal O
x O
i O
∼ O
N(0 O
, O
1)3 O
) O
Half-normal O
x O
i O
= O
|y O
i O
| O
and O
y O
i O
∼ O
N(0 O
, O
1 O
) O
4 O
) O
Beta O
x O
i O
∼ O
β(2 O
, O
5 O
) O
5 O
) O
Mixture O
1 O
, O
66.6 O
% O
of O
elements O
of O
x O
i O
chosen O
from O
N(0 O
, O
1 O
) O
and O
33.3 O
% O
from O
N(100 O
, O
1 O
) O
6 O
) O
Mixture O
2 O
50 O
% O
of O
elements O
of O
x O
i O
+ O
1 O
chosen O
from O
N(0 O
, O
1 O
) O
and O
the O
rest O
from O
N(100 O
, O
1 O
) O
7 O
) O
Mixture O
3 O
90 O
% O
of O
elements O
of O
x O
i O
chosen O
from O
half-normal O
N(0 O
, O
1 O
) O
and O
the O
rest O
set O
to O
10 O
. O

S O
, O
formula='strain_rate(u O
_ O
) O
' O
, O
namespace O
= O
ns O
, O
apply='project')The O
formula O
for O
S O
makes O
use O
of O
a O
Python U-p_language
function O
def O
strain_rate(u O
) O
: O
return O
0.5*(grad(u O
) O
+ O
grad(u).T)Alternatively O
, O
the O
formula O
argument O
could O
be O
the O
expression O
inside O
the O
strain_rate O
function O
( O
with O
u O
replaced O
by O
u O
_ O
) O
. O

Timings O
were O
performed O
using O
MATLAB U-p_language
's O
tic O
and O
toc O
functions O
since O
cputime O
is O
known O
to O
produce O
inaccurate O
results O
for O
multi-CPU O
and/or O
multicore O
systems O
. O

The O
performance O
in O
Table O
1 O
shows O
the O
framework O
performance O
[ O
presented O
as O
number O
of O
frames O
per O
second O
( O
fps O
) O
] O
against O
the O
dataset O
size O
in O
GB O
for O
the O
same O
number O
of O
GPUs B-hardware_resources
( I-hardware_resources
128 I-hardware_resources
GPUs) L-hardware_resources
and O 
processing B-hardware_resources
nodes I-hardware_resources
( I-hardware_resources
64 I-hardware_resources
nodes I-hardware_resources
with I-hardware_resources
2 I-hardware_resources
GPU I-hardware_resources
each I-hardware_resources
) L-hardware_resources
. O

We O
particularly O
investigate O
the O
step O
of O
the O
decision O
for O
the O
DSmT. O
In O
section O
5 O
we O
give O
the O
major O
part O
of O
the O
Matlab U-p_language
codes O
of O
this O
framework O
. O

The O
benchmark O
is O
comprised O
of O
a O
graph O
generator O
and O
a O
suite O
of O
kernels O
. O

We O
give O
and O
explain O
here O
some O
Matlab U-p_language
codes O
of O
the O
general O
belief O
function O
framework O
2 O
. O

Two O
extensions O
to O
Java U-p_language
are O
of O
particular O
note O
. O

Calculations O
have O
been O
run O
on O
CPU U-hardware_resources
clusters U-hardware_platform
up O
to O
2048 B-hardware_resources
cores L-hardware_resources
, O
installed O
at O
the O
Poznań B-hardware_platform
Supercomputer I-hardware_platform
Centre I-hardware_platform
( I-hardware_platform
reef I-hardware_platform
and I-hardware_platform
chimera I-hardware_platform
clusters I-hardware_platform
) L-hardware_platform
, O
and O
took O
up O
to O
a O
few B-compute_time
hours L-compute_time
, O
depending O
on O
the O
integration O
time O
and O
step-size O
. O

We O
describe O
simple O
principles O
which O
we O
used O
to O
create O
this O
model O
in O
Caffe U-p_library
. O

The O
experiments O
were O
performed O
on O
a O
machine O
with O
8-core B-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
processors L-hardware_resources
and O
48 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

The O
Intel B-p_library
Fortran/C I-p_library
compiler I-p_library
13.1 L-p_library
and O
Intel B-p_library
MPI I-p_library
4.1 L-p_library
were O
used O
in O
all O
cases O
. O

Based O
on O
the O
size O
of O
the O
ventricles O
, O
we O
use O
3D O
Gaussian O
kernels O
with O
a O
scale O
of O
15 O
voxels O
, O
and O
we O
let O
the O
regularization O
weight O
in O
( O
2.1 O
) O
be O
λ O
= O
16 O
. O

Experiments O
were O
carried O
out O
on O
a O
computer O
with O
dualcore B-hardware_resources
2.9 I-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
and O
6.0 B-hardware_resources
GiB I-hardware_resources
RAM L-hardware_resources
. O

Our O
algorithm O
is O
implemented O
based O
on O
the O
conv O
layer O
of O
the O
Caffe U-p_library
library O
. O

A O
user O
of O
OpenJML U-p_library
experimenting O
with O
Java U-p_language
and O
JML U-p_language
will O
be O
concerned O
about O
two O
questions O
: O
( O
a O
) O
does O
every O
inconsistency O
between O
the O
software O
and O
the O
specifications O
trigger O
a O
warning O
by O
OpenJML U-p_language
; O
( O
b O
) O
does O
every O
warning O
by O
OpenJML U-p_library
correspond O
to O
a O
fault O
in O
the O
code+specifications O
. O

In O
SCOOP O
it O
is O
impossible O
to O
access O
the O
data O
from O
both O
the O
sending O
and O
receiving O
side O
, O
while O
in O
Java U-p_language
this O
is O
possible O
. O

All O
benchmarks O
were O
run O
on O
a O
MacBook B-hardware_platform
Pro L-hardware_platform
with O
a O
2 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
processor L-hardware_resources
with O
8 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

The O
test O
system O
was O
a O
desktop U-hardware_platform
machine O
running O
64 B-hardware_platform
bit I-hardware_platform
Ubuntu I-hardware_platform
linux L-hardware_platform
with O
a O
2.8GHz B-hardware_resources
Intel I-hardware_resources
i7 I-hardware_resources
CPU L-hardware_resources
and O
an O
Nvidia B-hardware_resources
Tesla I-hardware_resources
C2050 I-hardware_resources
GPU L-hardware_resources
with O
14 B-hardware_resources
streaming I-hardware_resources
multiprocessors L-hardware_resources
and O
a O
total O
of O
448 B-hardware_resources
cores L-hardware_resources
and O
CUDA B-p_library
version I-p_library
3.10 L-p_library
. O

Even O
with O
a O
very O
crude O
Matlab U-p_language
implementation O
, O
the O
algorithm O
takes O
less O
than O
one O
second O
per O
frame O
on O
a O
regular B-hardware_platform
desktop L-hardware_platform
. O

All O
the O
experiments O
are O
conducted O
on O
an O
NVIDIA B-hardware_resources
K40 I-hardware_resources
GPU L-hardware_resources
. O

The O
standard O
implementation O
of O
Yaroslavskiy O
's O
algorithm O
in O
Sun O
's O
Java B-p_language
7 L-p_language
uses O
an O
intuitive O
generalization O
of O
this O
strategy O
: O
it O
chooses O
the O
two O
tertiles O
in O
a O
sample O
of O
five O
elements O
as O
pivots O
. O

In O
practice O
, O
we O
used O
the O
liblinear O
# O
b7 O
library O
via O
the O
scikit B-p_library
- I-p_library
learn L-p_library
# O
b8 O
library O
. O

Figure B-hardware_platform
1 L-hardware_platform
lists O
the O
computation O
time O
using O
the O
GPU U-hardware_resources
and O
CPU U-hardware_resources
implementations O
. O

In O
order O
to O
evaluate O
the O
performance O
of O
the O
proposed O
approach O
, O
we O
implement O
ITS O
in O
C++ U-p_language
language O
and O
run O
it O
on O
a O
computer U-hardware_platform
with O
2.87 B-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
and O
512 B-hardware_resources
MB I-hardware_resources
RAM. L-hardware_resources
Two O
sets O
of O
well-known O
instances O
, O
which O
have O
been O
widely O
used O
as O
benchmarks O
by O
previous O
approaches O
, O
are O
taken O
from O
the O
literature O
and O
tested O
. O

The O
simulations O
run O
on O
an O
IBM B-hardware_platform
ThinkCentre I-hardware_platform
M51 I-hardware_platform
Desktop I-hardware_platform
computer L-hardware_platform
with O
3.4GHz B-hardware_resources
Intel I-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
processor L-hardware_resources
. O

All O
the O
numerical O
experiments O
are O
performed O
on O
a O
personal B-hardware_platform
computer L-hardware_platform
, O
Inter(R B-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
2.50 I-hardware_resources
GHz L-hardware_resources
, O
1.87-GB B-hardware_resources
memory L-hardware_resources
, O
and O
MATLAB B-p_language
environment I-p_language
( I-p_language
Version I-p_language
R2009b) L-p_language
.As O
was O
mentioned O
above O
, O
the O
learning O
process O
is O
repeated O
10 O
times O
for O
both O
PSO O
- O
MISMO O
and O
GA O
- O
MISMO O
for O
each O
time O
series O
. O

We O
use O
the O
BVLC O
Reference O
CaffeNet O
pre O
- O
trained O
model O
that O
is O
supplied O
with O
Caffe U-p_library
# O
b21 O
. O

The O
Intel B-hardware_platform
Delta I-hardware_platform
machine L-hardware_platform
provided O
512 B-hardware_resources
single I-hardware_resources
processor I-hardware_resources
nodes L-hardware_resources
running O
at O
40 B-hardware_resources
MHz L-hardware_resources
and O
no O
instruction-level O
parallelism O
( O
concurrency O
of O
512 O
) O
. O

TFOCS U-p_library
is O
a O
library O
of O
Matlab U-p_language
- O
files O
designed O
to O
facilitate O
the O
construction O
of O
first O
- O
order O
methods O
for O
a O
variety O
of O
convex O
optimization O
problems O
, O
which O
include O
those O
we O
consider O
. O

22 O
All O
programs O
were O
run O
on O
a O
single B-hardware_resources
3GHz I-hardware_resources
Intel I-hardware_resources
core L-hardware_resources
. O

Among O
them O
, O
four O
top O
categories O
can O
be O
identified:-CMAES O
derived O
, O
including O
many O
tuned O
variants O
of O
IPOP O
- O
CMAES O
; O
-Surrogate O
based O
, O
including O
the O
ones O
that O
exploit O
the O
MATLAB U-p_language
MATSuMoTo B-p_library
Library L-p_library
for O
metamodels O
; O
-DE O
derived O
, O
tuned O
for O
cheap O
, O
medium O
, O
and O
expensive O
settings O
; O
-Axis O
- O
Parallel O
Brent O
- O
S.T.E.P. O
method O
, O
which O
investigates O
some O
variants O
of O
the O
multidimensional O
Brent O
- O
S.T.E.P. O
method O
. O

Everything O
was O
compiled O
using O
GCC B-hardware_platform
4.6.3 L-hardware_platform
on O
the O
Intel B-hardware_platform
machines L-hardware_platform
, O
and O
GCC B-hardware_platform
4.7.2 L-hardware_platform
on O
the O
AMD B-hardware_platform
machine L-hardware_platform
, O
with O
the O
-O2 O
optimisation O
flag O
. O

We O
simulate O
our O
system O
both O
using O
Matlab U-p_language
simulations O
in O
Section O
VI O
to O
validate O
our O
analysis O
, O
as O
well O
as O
ns-2 O
simulations O
in O
Section O
VII O
to O
show O
a O
plausible O
implementation O
of O
the O
system O
as O
a O
whole O
. O

The O
experiments O
were O
carried O
out O
on O
a O
64-bit B-hardware_resources
Ubuntu I-hardware_resources
server L-hardware_resources
featuring O
a O
Quad-Core B-hardware_resources
4GHz I-hardware_resources
Xeon I-hardware_resources
CPU L-hardware_resources
and O
16 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
; O
a O
timeout O
of O
1200 B-compute_time
seconds L-compute_time
and O
a O
memory O
threshold O
of O
14 B-hardware_resources
GB L-hardware_resources
were O
put O
as O
limit O
to O
the O
executions O
. O

We O
ran O
all O
our O
experiments O
on O
an O
Intel(R B-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
i5 I-hardware_resources
M I-hardware_resources
450 I-hardware_resources
CPU I-hardware_resources
2.40GHz L-hardware_resources
machine U-hardware_platform
with O
2 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
under O
the O
Ubuntu B-hardware_platform
12.04 I-hardware_platform
operating I-hardware_platform
system L-hardware_platform
. O

In O
this O
2 O
Our O
implementation O
uses O
a O
sightly O
different O
policy O
declaration O
syntax O
because O
of O
the O
limitations O
imposed O
by O
the O
Java U-p_language
annotation O
language O
. O

In O
all O
settings O
, O
we O
used O
-march O
= O
native O
, O
which O
means O
that O
the O
compiler O
tries O
to O
optimize O
for O
the O
specific O
CPU U-hardware_resources
architecture O
we O
use O
during O
compilation O
. O

The O
Matlab U-p_language
code O
is O
given O
in O
section O
5 O
. O

Using O
the O
AMPI O
code O
with O
4 O
sub-domains O
( O
2 O
processes O
at O
each O
node O
, O
each O
one O
with O
2 O
VPs O
) O
launching O
GPU U-hardware_resources
jobs O
in O
an O
asynchronous O
way O
for O
the O
first O
15 O
timesteps O
and O
in O
a O
synchronous O
way O
for O
the O
next O
5 O
timesteps O
, O
the O
execution O
time O
was O
231.4 B-compute_time
seconds L-compute_time
. O

That O
is O
, O
it O
intends O
to O
correctly O
encode O
the O
semantics O
of O
Java U-p_language
and O
JML U-p_language
. O

The O
second O
is O
a O
Dell B-hardware_platform
Precision I-hardware_platform
390 I-hardware_platform
desktop L-hardware_platform
, O
with O
a O
dual-core B-hardware_resources
Intel I-hardware_resources
Core2 I-hardware_resources
CPU L-hardware_resources
running O
at O
2.4 B-hardware_resources
GHz L-hardware_resources
, O
4 B-hardware_resources
MB I-hardware_resources
of I-hardware_resources
cache L-hardware_resources
, O
2 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
and O
running O
32-bit B-hardware_platform
Linux L-hardware_platform
. O

The O
CPU U-hardware_resources
time O
for O
watermarking O
a O
512 O
× O
512 O
image O
using O
a O
3 B-hardware_resources
GHz I-hardware_resources
Pentium I-hardware_resources
IV L-hardware_resources
machine O
is O
about O
6.17 B-compute_time
sec L-compute_time
and O
2.66 B-compute_time
sec L-compute_time
for O
Method O
1 O
and O
Method O
2 O
, O
respectively O
. O

All O
experiments O
were O
run O
on O
a O
computer U-hardware_platform
equipped O
with O
an O
Intel B-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
T9550 I-hardware_resources
processor L-hardware_resources
operating O
at O
2.66 B-hardware_resources
GHz L-hardware_resources
( O
only O
one O
core O
was O
used O
) O
. O

We O
used O
the O
Caffe U-p_library
deep O
learning O
library O
for O
CNN O
training O
. O

OpenJML U-p_library
translates O
Java U-p_language
+ O
JML O
specifications O
into O
verification O
conditions O
that O
are O
then O
checked O
by O
SMT O
solvers O
. O

All O
experiments O
are O
done O
on O
a O
desktop U-hardware_platform
with O
Intel B-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
4430 I-hardware_resources
processor I-hardware_resources
( I-hardware_resources
3.2GHZ I-hardware_resources
) L-hardware_resources
and O
8 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

As O
a O
manner O
of O
comparison O
, O
the O
ELKB O
implementation O
requires O
5 B-compute_time
seconds L-compute_time
to O
process O
the O
89 O
word O
Einstein O
text O
and O
51 B-compute_time
seconds L-compute_time
for O
the O
964 O
word O
Outlands O
document O
using O
an O
Intel B-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
, I-hardware_resources
2.40 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
with O
256 B-hardware_resources
MB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

Our O
design O
decisions O
and O
control O
algorithms O
are O
validated O
by O
Matlab U-p_language
and O
ns-2 O
simulations O
. O

For O
objects O
in O
Java U-p_language
to O
be O
cloneable O
, O
their O
class O
must O
implement O
the O
empty O
interface O
Cloneable O
. O

We O
performed O
experiments O
on O
a O
large O
set O
of O
different O
repositories O
, O
packages O
and O
systems O
hosted O
at O
O2H B-hardware_platform
Lab I-hardware_platform
cluster L-hardware_platform
of O
164 B-hardware_resources
Xeon I-hardware_resources
CPU I-hardware_resources
cores I-hardware_resources
2 L-hardware_resources
with O
Linux U-hardware_platform
installed O
in O
Xen B-hardware_platform
virtual I-hardware_platform
system I-hardware_platform
machines L-hardware_platform
and O
inside O
a O
chroot O
environment O
. O

All O
experiments O
are O
done O
using O
MAT-LAB B-p_language
2010b L-p_language
in O
a O
2.33 B-hardware_resources
GHz I-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Duo L-hardware_resources
computer O
running O
Linux B-hardware_platform
Ubuntu I-hardware_platform
10.10 I-hardware_platform
OS. L-hardware_platform
We O
have O
also O
tested O
our O
method O
on O
the O
database O
created O
by O
Judd O
et O
al. O

Programming O
in O
scripting O
languages O
( O
like O
Python U-p_language
) O
tends O
to O
be O
quite O
satisfying O
to O
the O
programmer O
because O
of O
near O
- O
immediate O
response O
during O
development O
, O
the O
possibility O
of O
interactive O
exploration O
, O
and O
good O
error O
reporting O
. O

Developing O
for O
a O
virtual O
execution O
environment O
such O
as O
Java U-p_language
or O
the O
Common O
Language O
Infrastructure O
, O
does O
not O
necessarily O
mean O
to O
devise O
software O
that O
will O
naturally O
run O
on O
any O
supported O
platform O
. O

The O
experiments O
were O
conducted O
on O
a O
machine O
with O
AMD B-hardware_resources
Opteron I-hardware_resources
Dual I-hardware_resources
Core I-hardware_resources
2.2 I-hardware_resources
GHz I-hardware_resources
CPU L-hardware_resources
and O
16 B-hardware_resources
GB I-hardware_resources
RAM I-hardware_resources
( I-hardware_resources
1 I-hardware_resources
MB I-hardware_resources
cache I-hardware_resources
) L-hardware_resources
, O
running O
openSUSE B-hardware_platform
11.4 I-hardware_platform
operating I-hardware_platform
system L-hardware_platform
. O

This O
design O
goal O
is O
shared O
by O
a O
variety O
of O
other O
systems O
, O
ranging O
from O
Java U-p_language
's O
stack O
inspection O
# O
b27 O
# O
b28 O
to O
many O
newer O
systems O
that O
rely O
on O
data O
tainting O
or O
information O
flow O
control O
( O
see O
, O
e.g. O
, O
# O
b17 O
# O
b18 O
# O
b8 O
) O
. O

Table B-compute_time
4 L-compute_time
reports O
time O
and O
space O
complexity O
of O
the O
kernels O
in O
learning O
and O
in O
classification O
. O

Our O
hardware O
was O
Tesla B-hardware_resources
C2050 L-hardware_resources
with O
p B-hardware_resources
= I-hardware_resources
448 I-hardware_resources
cores L-hardware_resources
and O
3 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
connected O
to O
a O
fourcore B-hardware_resources
Intel I-hardware_resources
i7 I-hardware_resources
CPU L-hardware_resources
with O
4 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
clocked O
at O
2.8 B-hardware_resources
GHz L-hardware_resources
, O
running O
Linux B-hardware_platform
( I-hardware_platform
Fedora I-hardware_platform
12 I-hardware_platform
) L-hardware_platform
. O

Each O
computation O
node O
is O
equipped O
with O
a O
dual-socket B-hardware_resources
Intel I-hardware_resources
E5 I-hardware_resources
2.60 I-hardware_resources
GHz I-hardware_resources
Sandy I-hardware_resources
Bridge I-hardware_resources
processor L-hardware_resources
with O
a O
total O
of O
16 B-hardware_resources
CPU I-hardware_resources
cores L-hardware_resources
, O
32 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
DDR3 I-hardware_resources
RAM L-hardware_resources
, O
and O
runs O
Linux B-hardware_platform
OS I-hardware_platform
kernel I-hardware_platform
version I-hardware_platform
2.6.32 L-hardware_platform
. O

A O
two O
- O
dimensional O
cylindrical O
finite O
volume O
method O
( O
FVM O
) O
thermal O
model O
of O
the O
sensor O
was O
constructed O
in O
MATLAB U-p_language
using O
sparse O
- O
matrix O
calculations O
. O

Python U-p_language
has O
strong O
support O
for O
dynamic O
classes O
and O
object O
orientation O
, O
and O
since O
variables O
are O
not O
declared O
in O
Python U-p_language
, O
generative O
programming O
comes O
without O
any O
extra O
syntax O
( O
in O
contrast O
with O
templates O
in O
C++ U-p_language
) O
. O

These O
results O
were O
obtained O
on O
a O
PC U-hardware_platform
with O
NVIDIA B-hardware_resources
470 I-hardware_resources
GTX I-hardware_resources
graphics I-hardware_resources
card I-hardware_resources
( I-hardware_resources
1.2 I-hardware_resources
GB I-hardware_resources
GPU I-hardware_resources
memory I-hardware_resources
) L-hardware_resources
and O
an O
Intel B-hardware_resources
Core-i7 I-hardware_resources
3.0GHz I-hardware_resources
CPU L-hardware_resources
with O
8 B-hardware_resources
hyperthreads L-hardware_resources
. O

For O
sequential O
integrators O
, O
probably O
the O
most O
well O
known O
are O
MATLAB U-p_language
routines O
ode45 O
, O
ode23 O
, O
ode15s O
# O
b31 O
] O
to O
solve O
their O
systems O
of O
differential O
equations O
. O

A O
state O
of O
the O
Java B-p_library
Virtual I-p_library
Machine L-p_library
is O
a O
triple O
l O
|| O
s O
|| O
µ O
where O
l O
is O
an O
array O
of O
values O
, O
called O
local O
variables O
and O
numbered O
from O
0 O
upwards O
, O
s O
is O
a O
stack O
of O
values O
, O
called O
operand O
stack O
( O
in O
the O
following O
, O
just O
stack O
) O
, O
which O
grows O
leftwards O
, O
and O
µ O
is O
a O
memory O
, O
or O
heap O
, O
which O
maps O
locations O
into O
objects O
. O

Matlab U-p_language
's O
STPRTools B-p_library
toolbox L-p_library
was O
used O
, O
and O
code O
for O
both O
Levenshtein O
distance O
method O
and O
modified O
Levenshtein O
distance O
method O
was O
incorporated O
in O
Matlab U-p_language
. O

We O
evaluated O
the O
performance O
of O
our O
GPU O
algorithms O
on O
a O
machine O
equipped O
with O
Intel B-hardware_resources
Core I-hardware_resources
2 I-hardware_resources
Quad I-hardware_resources
2.33 I-hardware_resources
GHz L-hardware_resources
and O
4 B-hardware_resources
GB I-hardware_resources
system I-hardware_resources
memory L-hardware_resources
. O

For O
example O
, O
consider O
the O
following O
function O
in O
Octave U-p_language
/ O
MATLAB U-p_language
: O
function O
z O
= O
mmt(x O
, O
y O
) O
z O
= O
x*y O
; O
end O
Type O
of O
variables O
x O
and O
y O
can O
be O
any O
allowable O
type O
. O

To O
evaluate O
the O
effectiveness O
of O
proposed O
privacy O
preserving O
method O
, O
Experiments O
have O
been O
carried O
out O
on O
Intel B-hardware_resources
Core I-hardware_resources
I3 I-hardware_resources
Processor L-hardware_resources
with O
3 B-hardware_resources
GB I-hardware_resources
primary I-hardware_resources
memory L-hardware_resources
on O
Windows B-hardware_platform
XP I-hardware_platform
system L-hardware_platform
. O

Two O
platforms O
have O
been O
used O
for O
testing O
the O
code O
: O
GTX B-hardware_resources
260 L-hardware_resources
for O
NVIDIA B-hardware_resources
GT200 I-hardware_resources
architecture L-hardware_resources
and O
GTX B-hardware_resources
480 L-hardware_resources
for O
the O
new O
NVIDIA B-hardware_resources
GF100 I-hardware_resources
( I-hardware_resources
Fermi I-hardware_resources
) L-hardware_resources
. O

Again O
, O
there O
is O
no O
significant O
difference O
between O
algorithms O
K O
, O
L O
, O
and O
Y. O
The O
three O
pivot O
quicksort O
algorithm O
K O
is O
the O
fastest O
algorithm O
using O
Java B-p_language
8 L-p_language
on O
our O
setup O
. O

Note O
that O
all O
these O
methods O
were O
implemented O
in O
Python U-p_language
using O
the O
scikit B-p_library
- I-p_library
learn L-p_library
python U-p_language
library O
# O
b13 O
.The O
proposed O
algorithm O
was O
tested O
by O
optimizing O
a O
suite O
of O
five O
well O
- O
known O
functions O
taken O
from O
literature O
. O

It O
is O
based O
on O
a O
single-core B-hardware_resources
Intel I-hardware_resources
Atom I-hardware_resources
Z530 I-hardware_resources
CPU L-hardware_resources
running O
at O
1.6 B-hardware_resources
GHz L-hardware_resources
, O
with O
512 B-hardware_resources
KB I-hardware_resources
of I-hardware_resources
cache L-hardware_resources
, O
1 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
and O
runs O
32-bit B-hardware_platform
Linux L-hardware_platform
. O

This O
work O
has O
been O
simulated O
using O
MATLAB B-p_language
7 L-p_language
in O
a O
machine O
of O
the O
configuration B-hardware_resources
2.13GHz I-hardware_resources
Intel I-hardware_resources
Xeon I-hardware_resources
Quad I-hardware_resources
Core I-hardware_resources
Processor L-hardware_resources
and O
16384.00 B-hardware_resources
MB I-hardware_resources
of I-hardware_resources
Physical I-hardware_resources
Memory L-hardware_resources
. O

GTSVM O
is O
the O
only O
GPU U-hardware_resources
method O
that O
runs O
on O
KDD-Cup99 O
( O
which O
is O
90 O
% O
sparse O
) O
. O

The O
Caffe U-p_library
implementation O
ran O
on O
the O
single O
GPU U-hardware_resources
. O

All O
experiments O
were O
performed O
on O
an O
Intel B-hardware_resources
c I-hardware_resources
i7 L-hardware_resources
machine O
with O
8 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

Theano U-p_library
provides O
a O
language O
for O
describing O
expressions O
independent O
of O
how O
they O
are O
actually O
implemented O
, O
so O
a O
single O
Pylearn2 O
class O
provides O
both O
CPU U-hardware_resources
and O
GPU U-hardware_resources
functionality O
. O

Java U-p_language
generics O
( O
Cok O
) O
# O
b13 O
. O

In O
Figure B-compute_time
4 L-compute_time
, O
we O
present O
on O
the O
left O
the O
total O
cpu O
time O
( O
in O
seconds O
) O
needed O
by O
the O
policy O
iteration O
to O
find O
the O
solution O
of O
the O
game O
. O

We O
used O
Ilog O
6.2 O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
4 I-hardware_resources
CPU L-hardware_resources
, O
2.0 B-hardware_resources
GHz L-hardware_resources
, O
4 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

Intel B-hardware_resources
2.2 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
is O
used O
for O
verificaion O
and O
resources O
used O
are O
: O
user O
time O
of O
0.046875 B-compute_time
sec L-compute_time
and O
system O
time O
of O
0.015625 B-compute_time
sec. L-compute_time

The O
proposed O
kernel O
has O
been O
compared O
to O
the O
same O
kernels O
as O
in O
the O
previous O
section O
. O

The O
implementation O
of O
the O
compression O
scheme O
is O
performed O
using O
JAVA B-p_language
2 I-p_language
Micro I-p_language
Edition L-p_language
with O
the O
simulation O
using O
Java-2 B-p_library
SE I-p_library
1.5 L-p_library
. O

Spark98 O
# O
b13 O
( O
not O
to O
be O
confused O
with O
SPARK U-p_library
# O
b18 O
and O
SPARK00 O
) O
is O
a O
set O
of O
sparse O
matrix O
kernels O
for O
shared O
memory O
and O
message O
passing O
systems O
. O

The O
CPU U-hardware_platform
version O
of O
the O
code O
is O
estimated O
to O
solve O
a O
system O
of O
L O
= O
512 O
in O
just O
shy O
of O
three O
and O
a O
half O
months O
. O

The O
experiments O
were O
executed O
on O
Nvidia B-hardware_resources
K40 I-hardware_resources
GPUs L-hardware_resources
. O

This O
is O
reflected O
in O
the O
analysis O
by O
a O
strong O
update O
to O
the O
node O
representing O
path O
clone.header O
to O
obtain O
the O
type O
T O
16 O
that O
precisely O
models O
the O
alias O
between O
the O
three O
paths O
clone.header O
, O
clone.header.next O
and O
clone.header.previous O
( O
the O
Java U-p_language
syntax O
used O
here O
hides O
the O
temporary O
variable O
that O
is O
introduced O
to O
be O
assigned O
the O
value O
of O
clone.header O
and O
then O
be O
updated).This O
type O
T O
17 O
is O
the O
loop O
invariant O
necessary O
for O
type O
checking O
the O
whole O
loop O
. O

It O
natively O
runs O
on O
the O
Xeon B-hardware_resources
Phi I-hardware_resources
coprocessor L-hardware_resources
. O

The O
MICCAI O
2013 O
Grand O
Challenge O
on O
Mitosis O
Detection O
was O
won O
by O
a O
GPU-MCMPCNN U-hardware_resources
# O
b87 O
# O
b15 O
. O

For O
each O
compute O
node O
i O
, O
we O
estimate O
its O
compute O
rate O
Ci O
by O
measuring O
the O
runtime O
of O
a O
simple O
computation O
over O
a O
list O
within O
a O
Python U-p_language
program O
, O
yielding O
a O
rate O
of O
computation O
in O
megabytes O
per O
second O
. O

All O
the O
numerical O
experiments O
are O
performed O
on O
a O
personal B-hardware_platform
computer L-hardware_platform
, O
Inter(R B-hardware_resources
) I-hardware_resources
Core(TM I-hardware_resources
) I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
2.50 I-hardware_resources
GHz L-hardware_resources
, O
1.87-GB B-hardware_resources
memory L-hardware_resources
, O
and O
MATLAB B-p_language
environment I-p_language
( I-p_language
Version I-p_language
R2009b) L-p_language
. O
As O
was O
mentioned O
above O
, O
the O
learning O
process O
is O
repeated O
10 O
times O
for O
both O
PSO-MISMO O
and O
GA-MISMO O
for O
each O
time O
series O
. O

All O
experiments O
were O
run O
using O
the O
Open B-p_library
Motion I-p_library
Planning I-p_library
Library I-p_library
( I-p_library
OMPL I-p_library
) L-p_library
# O
b29 O
on O
a O
3.4GHz B-hardware_resources
Intel I-hardware_resources
Core I-hardware_resources
i7 I-hardware_resources
processor L-hardware_resources
with O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
. O

Our O
design O
decisions O
and O
control O
algorithms O
are O
validated O
by O
Matlab U-p_language
and O
ns-2 O
simulations O
. O

Our O
direct O
perception O
ConvNet O
is O
built O
upon O
Caffe U-p_library
# O
b9 O
, O
and O
we O
use O
the O
standard O
AlexNet O
architecture O
# O
b11 O
. O

For O
example O
, O
in O
Torch U-p_library
# O
b7 O
or O
DistBelief U-p_library
# O
b12 O
the O
Models O
are O
modular O
, O
but O
to O
train O
a O
layer O
, O
the O
layer O
needs O
to O
implement O
at O
the O
very O
least O
a O
backpropogation O
method O
for O
computing O
derivatives O
. O

In O
practice O
, O
doing O
HMAC O
- O
SHA1 O
in O
pure O
Java U-p_language
was O
still O
slow O
enough O
to O
be O
an O
issue O
. O

All O
experiments O
were O
conducted O
on O
a O
HP B-hardware_platform
system L-hardware_platform
with O
a O
2.67Ghz B-hardware_resources
Quad I-hardware_resources
CPU L-hardware_resources
, O
4 B-hardware_resources
GBytes I-hardware_resources
of I-hardware_resources
memory L-hardware_resources
, O
and O
running O
a O
64-bit B-hardware_platform
Win I-hardware_platform
7. L-hardware_platform
Performance O
. O

They O
were O
all O
performed O
on O
a O
PC U-hardware_platform
with O
Intel B-hardware_resources
Pentium I-hardware_resources
4 I-hardware_resources
CPU I-hardware_resources
2.8 I-hardware_resources
GHz I-hardware_resources
processor L-hardware_resources
and O
1.21 B-hardware_resources
GB I-hardware_resources
RAM I-hardware_resources
memory L-hardware_resources
under O
Windows B-hardware_platform
XP L-hardware_platform
, O
using O
Matlab B-p_language
7.5 L-p_language
including O
the O
optimization O
toolbox O
. O

The O
machine O
had O
3 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
, O
60 B-hardware_resources
GB I-hardware_resources
secondary I-hardware_resources
storage I-hardware_resources
space L-hardware_resources
and O
an O
Intel B-hardware_resources
i3 I-hardware_resources
processor L-hardware_resources
with O
2.6 B-hardware_resources
GHz I-hardware_resources
clock I-hardware_resources
cycle L-hardware_resources
. O

We O
present O
results O
on O
various O
benchmark O
datasets O
considered O
in O
Section O
4 O
for O
Gaussian O
K(x O
, O
y O
) O
= O
exp O
−x−y O
2 O
2 O
2σ O
2 O
and O
Euclidean O
: O
K(x O
, O
y O
) O
= O
− O
x O
− O
y O
2 O
2 O
kernels O
. O

The O
experiments O
were O
carried O
out O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
X5660/ I-hardware_resources
2.80GHz L-hardware_resources
machine O
with O
4 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
, O
running O
Ubuntu B-hardware_platform
with I-hardware_platform
Linux I-hardware_platform
kernel I-hardware_platform
3.5 L-hardware_platform
. O

The O
tests O
were O
performed O
in O
six O
different O
architectures,(HW1 O
) O
Intel B-hardware_resources
R I-hardware_resources
Core I-hardware_resources
TM I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
E7500 I-hardware_resources
2.93GHz L-hardware_resources
, O
in O
i686 B-hardware_platform
mode L-hardware_platform
, O
( O
HW2 O
) O
Intel B-hardware_resources
R I-hardware_resources
Core I-hardware_resources
TM I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
P7350 I-hardware_resources
2.00GHz L-hardware_resources
, O
in O
i686 B-hardware_platform
mode L-hardware_platform
, O
( O
HW3 O
) O
AMD B-hardware_resources
Athlon I-hardware_resources
TM I-hardware_resources
64 I-hardware_resources
X2 I-hardware_resources
Dual I-hardware_resources
Core I-hardware_resources
Processor I-hardware_resources
4200 I-hardware_resources
+ L-hardware_resources
, O
in O
x86_64 B-hardware_platform
mode L-hardware_platform
, O
( O
HW4 O
) O
AMD B-hardware_resources
Athlon I-hardware_resources
TM I-hardware_resources
64 I-hardware_resources
X2 I-hardware_resources
Dual I-hardware_resources
Core I-hardware_resources
Processor I-hardware_resources
4800 I-hardware_resources
+ L-hardware_resources
, O
in O
x86_64 B-hardware_platform
mode L-hardware_platform
, O
( O
HW5 O
) O
Intel B-hardware_resources
R I-hardware_resources
Core I-hardware_resources
TM I-hardware_resources
2 I-hardware_resources
Duo I-hardware_resources
CPU I-hardware_resources
P7350 I-hardware_resources
2.00GHz L-hardware_resources
, O
in O
x86_64 B-hardware_platform
mode L-hardware_platform
, O
( O
HW6 O
) O
Intel B-hardware_resources
R I-hardware_resources
Xeon I-hardware_resources
R I-hardware_resources
CPU I-hardware_resources
5160 I-hardware_resources
3.00GHz L-hardware_resources
, O
in O
x86_64 B-hardware_platform
mode L-hardware_platform
. O

Table O
III O
lists O
the O
median O
overall O
, O
training O
set O
and O
test-set O
prediction O
accuracy O
for O
the O
three O
benchmark O
load O
signatures O
( O
an O
Intel B-hardware_resources
Core I-hardware_resources
i7 L-hardware_resources
machine O
, O
CPU B-hardware_resources
clock I-hardware_resources
3.1 I-hardware_resources
GHz L-hardware_resources
, O
8 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
) O
. O

Although O
the O
transformations O
take O
place O
at O
bytecode O
level O
, O
Java U-p_language
has O
been O
used O
for O
clarity.public O
class O
X O
private O
Y O
y O
; O
public O
X(Y O
y O
) O
this.y O
= O
y O
; O
protected O
int O
m(long O
j O
) O
return O
y.n(j O
) O
; O
static O
final O
Z O
z O
= O
new O
Z(Y.K O
) O
; O
static O
int O
p(int O
i O
) O
return O
z.q(i O
) O
; O
Figure O
2 O
: O
Sample O
application O
class O
X. O

The O
software O
( O
implementation O
in O
C O
with O
an O
interface O
to O
Matlab U-p_language
) O
is O
available O
from O
http://www2.imm.dtu.dk/ O
∼ O
pch/ O
TVReg/. O

Each O
node O
runs O
on O
a O
quad-core B-hardware_platform
PC L-hardware_platform
equipped O
with O
an O
Intel B-hardware_resources
Core I-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
2400 I-hardware_resources
3.10GHz I-hardware_resources
CPU L-hardware_resources
, O
8 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
, O
and O
a O
Seagate B-hardware_resources
ST31000524AS I-hardware_resources
7200RPM I-hardware_resources
1 I-hardware_resources
TB I-hardware_resources
SATA I-hardware_resources
harddisk L-hardware_resources
. O

Hence O
, O
Θ O
is O
given O
respectively O
for O
|Θ| O
= O
3 O
and O
|Θ| O
= O
4 O
by O
: O
The O
number O
of O
integers O
for O
the O
codification O
of O
one O
element O
θ O
i O
∈ O
Θ O
is O
given O
by O
: O
In O
order O
to O
reduce O
the O
complexity O
, O
especially O
using O
more O
hardware O
language O
than O
Matlab U-p_language
, O
we O
could O
use O
binary O
numbers O
instead O
of O
the O
integer O
numbers O
. O

All O
our O
models O
were O
implemented O
using O
Theano U-p_library
# O
b9 O
and O
Blocks U-p_library
# O
b10 O
. O

OpenJML U-p_library
includes O
operations O
for O
a O
number O
of O
related O
tasks:• O
parsing O
and O
typechecking O
of O
JML U-p_language
in O
conjunction O
with O
the O
corresponding O
Java U-p_language
code O
• O
static O
checking O
of O
code O
and O
specifications O
. O

It O
takes O
93 B-compute_time
CPU I-compute_time
seconds L-compute_time
to O
deform O
the O
60,000 O
MNIST O
training O
images O
, O
most O
of O
them O
( O
87 O
) O
for O
elastic O
distortions O
. O

An O
Intel B-hardware_resources
i7 I-hardware_resources
- I-hardware_resources
990x I-hardware_resources
6-core I-hardware_resources
12 I-hardware_resources
threads L-hardware_resources
workstation U-hardware_platform
with O
24 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
and O
Zotac B-hardware_resources
GeForce I-hardware_resources
GTX I-hardware_resources
560Ti I-hardware_resources
CUDA I-hardware_resources
graphics I-hardware_resources
card L-hardware_resources
were O
used O
for O
processing O
and O
visualisation O
. O

We O
let O
C O
denote O
the O
set O
consisting O
of O
the O
following O
Java U-p_language
bytecode O
instructions.• O
const O
c O
, O
pushes O
the O
constant O
c O
on O
top O
of O
the O
stack.• O
dup O
, O
duplicates O
the O
topmost O
element O
of O
the O
stack.• O
new O
κ O
, O
creates O
an O
object O
of O
class O
κ O
and O
pushes O
a O
reference O
to O
it O
on O
the O
stack.• O
load O
i O
, O
pushes O
the O
value O
of O
local O
variable O
i O
on O
top O
of O
the O
stack.• O
store O
i O
, O
pops O
the O
top O
value O
from O
the O
stack O
and O
writes O
it O
into O
local O
variable O
i.• O
add O
, O
pops O
the O
topmost O
two O
values O
from O
the O
stack O
and O
pushes O
their O
sum O
instead.• O
putfield O
f O
, O
where O
f O
has O
integer O
type O
, O
pops O
the O
topmost O
two O
values O
v O
( O
the O
top O
) O
and O
( O
under O
v O
) O
from O
the O
stack O
where O
must O
be O
a O
reference O
to O
an O
object O
o O
or O
null O
; O
if O
is O
null O
, O
the O
computation O
stops O
, O
else O
v O
is O
stored O
into O
field O
f O
of O
o.• O
ifeq O
of O
type O
t O
, O
with O
t O
∈ O
K O
∪ O
{ O
int O
} O
, O
pops O
the O
topmost O
element O
from O
the O
stack O
and O
checks O
if O
it O
is O
0 O
( O
when O
t O
is O
int O
) O
or O
null O
( O
when O
t O
is O
a O
class O
) O
; O
if O
it O
is O
not O
the O
case O
, O
the O
computation O
stops.• O
if O
cond O
of O
type O
int O
, O
with O
cond O
∈ O
{ O
lt O
, O
le O
, O
gt O
, O
ge O
} O
, O
pops O
the O
topmost O
element O
from O
the O
stack O
and O
checks O
, O
respectively O
, O
if O
it O
is O
less O
than O
0 O
, O
less O
than O
or O
equal O
to O
0 O
, O
greater O
than O
0 O
, O
greater O
than O
or O
equal O
to O
0 O
; O
if O
it O
is O
not O
the O
case O
, O
the O
computation O
stops.• O
call O
κ.m(t1 O
, O
. O
. O
. O
, O

We O
used O
a O
NVIDIA B-hardware_resources
GTX280 I-hardware_resources
GPU L-hardware_resources
, O
which O
has O
240 B-hardware_resources
processor I-hardware_resources
cores L-hardware_resources
with O
1.3 B-hardware_resources
GHz L-hardware_resources
clock O
for O
each O
core O
, O
and O
1 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
device I-hardware_resources
memory L-hardware_resources
. O

Support O
there O
are O
eighty-five O
letters O
of O
which O
a O
filename O
can O
be O
made O
in O
alphabet O
, O
when O
there O
is O
a O
five-letter O
keyword O
, O
it O
spends O
30ms U-compute_time
to O
encrypt O
a O
string O
and O
retrieve O
Bloom O
filter O
one O
time O
by O
a O
computer U-hardware_platform
with O
1.86GH B-hardware_resources
dual-core I-hardware_resources
CPU L-hardware_resources
and O
2 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

We O
introduce O
here O
a O
practical O
codification O
in O
order O
to O
consider O
all O
the O
previous O
remarks O
to O
reduce O
the O
complexity:• O
only O
manipulate O
focal O
elements,• O
add O
constraints O
on O
the O
focal O
elements O
before O
combination O
, O
and O
so O
work O
on O
D O
Θ O
r O
, O
• O
a O
codification O
easy O
for O
union O
and O
intersection O
operations O
with O
programs O
such O
as O
Matlab U-p_language
. O

The O
tests O
have O
been O
run O
on O
the O
same O
hardware O
( B-hardware_resources
a I-hardware_resources
Quad-core I-hardware_resources
Intel(R I-hardware_resources
) I-hardware_resources
Xeon(TM I-hardware_resources
) I-hardware_resources
CPU I-hardware_resources
2.80GHz L-hardware_resources
with O
4 B-hardware_resources
GByte I-hardware_resources
RAM L-hardware_resources
and O
Linux B-hardware_platform
operating I-hardware_platform
system L-hardware_platform
) O
. O

The O
MATLAB U-p_language
routine O
used O
for O
BOBYQA O
is O
instead O
the O
one O
embedded O
in O
the O
NAG B-p_library
optimization I-p_library
toolbox L-p_library
3 O
. O

The O
original O
ESC O
/ O
Java U-p_language
inlined O
called O
procedures O
. O

A O
useful O
Python U-p_language
feature O
is O
the O
ability O
to O
define O
new O
class O
attributes O
whenever O
appropriate O
, O
and O
is O
used O
in O
the O
preceding O
snippet O
for O
storing O
information O
about O
the O
iteration O
in O
scheme.info O
. O

It O
took O
their O
algorithm O
80 B-compute_time
days I-compute_time
of I-compute_time
CPU I-compute_time
time L-compute_time
to O
perform O
the O
exhaustive O
search O
with O
parameters O
k O
= O
16 O
and O
s O
= O
5 O
and O
find O
the O
same O
10 O
solutions O
that O
our O
new O
algorithm O
finds O
in O
a O
few O
milliseconds O
. O

Limiting O
our O
analysis O
to O
the O
database O
loaded O
with O
the O
93 O
test O
images O
, O
the O
system O
required O
on O
average O
12 B-compute_time
secs L-compute_time
to O
answer O
a O
query O
, O
on O
a O
machine O
with O
Celeron B-hardware_resources
400 I-hardware_resources
MHz I-hardware_resources
CPU L-hardware_resources
and O
128 B-hardware_resources
MB I-hardware_resources
RAM L-hardware_resources
running O
both O
the O
client O
and O
the O
server O
. O

This O
is O
coded O
in O
Python U-p_language
/ O
Scipy U-p_library
# O
b23 O
and O
based O
on O
the O
CVXOPT O
/ O
CVXPY O
optimization O
core O
# O
b20 O
. O

We O
developp O
our O
algoritm O
with O
the O
Nvidia B-hardware_resources
CUDA I-hardware_resources
architecture L-hardware_resources
to O
parallelize O
all O
the O
calculation O
on O
the O
448 B-hardware_resources
cores L-hardware_resources
of O
a O
Nvidia B-hardware_resources
Geforce I-hardware_resources
GTX I-hardware_resources
470 I-hardware_resources
card L-hardware_resources
. O

All O
the O
codes O
are O
in O
MATLAB U-p_language
and O
the O
experiments O
are O
run O
on O
a O
workstation U-hardware_platform
with O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
E5540@2.53GHz I-hardware_resources
CPU L-hardware_resources
and O
48 B-hardware_resources
GB I-hardware_resources
memory L-hardware_resources
. O

All O
the O
simulations O
were O
performed O
using O
Matlab U-p_language
software O
on O
an O
iMac B-hardware_platform
desktop I-hardware_platform
computer L-hardware_platform
, O
equipped O
with O
an O
Intel B-hardware_resources 
Core I-hardware_resources 
i5 I-hardware_resources 
processor I-hardware_resources 
( I-hardware_resources 
2.2 I-hardware_resources 
GHz I-hardware_resources 
) L-hardware_resources 
and O
8 B-hardware_resources 
GB I-hardware_resources 
RAM L-hardware_resources 
. O

In O
particular O
, O
Y O
should O
be O
slower O
than O
classical O
quicksort O
, O
which O
has O
also O
been O
observed O
in O
with O
respect O
to O
Sun O
's O
Java B-p_language
7 L-p_language
.)The O
authors O
of O
# O
b4 O
] O
conjectured O
that O
another O
cost O
measure O
- O
the O
average O
number O
of O
cache O
misses O
- O
explains O
observed O
running O
time O
behavior O
. O

The O
test O
data O
were O
collected O
from O
a O
HP B-hardware_platform
Compaq I-hardware_platform
8200 I-hardware_platform
Elite I-hardware_platform
SFF I-hardware_platform
PC L-hardware_platform
, O
which O
is O
equipped O
with O
Intel B-hardware_resources
Core I-hardware_resources
i5 I-hardware_resources
- I-hardware_resources
2400 I-hardware_resources
quad-core I-hardware_resources
CPU L-hardware_resources
, O
clocked O
at O
3.10 B-hardware_resources
GHz L-hardware_resources
, O
4 B-hardware_resources
GB I-hardware_resources
RAM L-hardware_resources
. O

All O
numerical O
experiments O
were O
run O
in O
MATLAB B-p_language
7.3.0 L-p_language
on O
a O
Dell B-hardware_platform
Precision I-hardware_platform
670 I-hardware_platform
workstation L-hardware_platform
with O
an O
Intel B-hardware_resources
xeon(TM I-hardware_resources
) I-hardware_resources
3.4GHZ I-hardware_resources
CPU L-hardware_resources
and O
6 B-hardware_resources
GB I-hardware_resources
of I-hardware_resources
RAM L-hardware_resources
. O

OpenJML U-p_library
has O
addressed O
some O
of O
the O
sources O
of O
unsoundness O
and O
incompleteness O
that O
were O
present O
in O
ESC O
/ O
Java U-p_language
( O
cf O
. O

Counting O
abstractions O
have O
been O
applied O
on O
a O
wide O
range O
of O
applications O
from O
parametrized O
systems O
specified O
as O
concurrent O
java U-p_language
programs O
to O
cache O
coherence O
protocols O
( O
see O
# O
b21 O
) O
and O
to O
programs O
manipulating O
complex O
data O
structures O
like O
lists O
( O
see O
for O
instance O
# O
b2 O
) O
. O

We O
use O
the O
Matlab B-p_library
Toolbox I-p_library
TFOCS L-p_library
( O
# O
b1 O
) O
and O
choose O
in O
TFOCS O
Auslender O
and O
Teboulle O
's O
single O
- O
projection O
method O
to O
solve O
# O
b18 O
. O

Standard O
Java U-p_language
@interface O
declarations O
are O
used O
to O
specify O
native O
annotations O
, O
which O
enable O
development O
environments O
such O
as O
Eclipse O
to O
parse O
, O
identify O
and O
auto O
- O
complete O
@Shallow O
, O
@Deep O
, O
and O
@Copy O
tags O
. O

On O
the O
other O
hand O
, O
scripting O
languages O
such O
as O
Python U-p_language
favor O
ease O
of O
use O
over O
computational O
speed O
and O
do O
not O
generally O
emphasize O
parallelism O
. O

A O
MATLAB U-p_language
compatible O
algorithm O
without O
optimization O
is O
given O
below O
, O
the O
full O
program O
may O
be O
downloaded O
from O
the O
MATLAB B-p_library
Central I-p_library
File I-p_library
Exchange L-p_library
from O
# O
b3 O
. O

We O
conduct O
our O
evaluation O
on O
a O
server U-hardware_platform
running O
on O
an O
Intel B-hardware_resources
CPU I-hardware_resources
at I-hardware_resources
2.4GHz L-hardware_resources
. O

All O
experiments O
have O
been O
done O
on O
an O
Intel B-hardware_resources
Xeon I-hardware_resources
W3530 L-hardware_resources
, O
2.8 B-hardware_resources
GHz L-hardware_resources
, O
running O
linux B-hardware_platform
debian I-hardware_platform
1 L-hardware_platform

