A Pretrained DenseNet Encoder for Brain Tumor Segmentation

Abstract
This article presents a convolutional neural network for the automatic segmentation of brain tumors in multimodal 3D MR images based on a U-net architecture. We evaluate the use of a densely connected convolutional network encoder (DenseNet) which was pretrained on the ImageNet data set. We detail two network architectures that can take into account multiple 3D images as inputs. This work aims to identify if a generic pretrained network can be used for very specific medical applications where the target data differ both in the number of spatial dimensions as well as in the number of inputs channels. Moreover in order to regularize this transfer learning task we only train the decoder part of the U-net architecture. We evaluate the effectiveness of the proposed approach on the BRATS 2018 segmentation challenge [1,2,3,4,5] where we obtained dice scores of 0.79, 0.90, 0.85 and 95% Hausdorff distance of 2.9mm, 3.95mm, and 6.48mm for enhanced tumor core, whole tumor and tumor core respectively on the validation set. This scores degrades to 0.77, 0.88, 0.78 and 95% Hausdorff distance of 3.6mm, 5.72mm, and 5.83mm on the testing set [1].

Introduction
Automatic segmentation of brain tumor structures has a great potential for surgical planning and intraoperative surgical resection guidance. Automatic segmentation still poses many challenges because of the variability of appearances and sizes of the tumors. Moreover the differences in the image acquisition protocols, the inhomogeneity of the magnetic field and partial volume effects have also a great impact on the image quality obtained from routinely acquired 3D MR images. However brain gliomas can be well detected using modern magnetic resonance imaging. The whole tumor is particularly visible in T2-FLAIR, the tumor core is visible in T2 and the enhancing tumor structures as well as the necrotic parts can be visualized using contrast enhanced T1 scans. An example is illustrated in figure 1. In the recent years, deep neural networks have shown to provide state-ofthe-art performance for various challenging image segmentation and classification problems  #b5  #b6  #b8  #b9  #b7 . Medical image segmentation problems have also been successfully tackled by such approaches  #b10  #b11  #b13  #b14  #b18 . However training deep neural networks can still be challenging in the case of a limited number of training data. In such situations it is often necessary to limit the complexity and the expressivity of the network. It has been observed that initializing weights of a convolutional network that has been pretrained on a large data set improves its accuracy on specific tasks where a limited number of training data is available  #b15 . We evaluate in this work the accuracy of a U-net architecture  #b10  #b11  where the encoder is a densely connected convolutional network  #b16  which has been pretrained on the ImageNet data set  #b17 . We study an extreme case of transfer learning where we fix the weights of the pretrained DenseNet encoder. Moreover we consider a segmentation problem where the input data dimensionality does not match the native input dimensions of the pretrained network. We will thus make use of a fixed pretrained network trained on 2D color images in order to segment 3D multimodal medical images. We will see that fixing the weights of the encoder is a simple but effective way to regularize the segmentation results.

Method
This section details the proposed network architectures, the loss function used to train the network as well as the training data preparation.

Convolutional Neural Network Architectures
The network processes 2D images of size (224,224) pixels containing three channels. An input image is composed of three successive slices of the input volume along one of the three anatomical orientations: either along the coronal, the sagittal or the transverse plane. We use a pretrained network that has been designed to take a single 2D color image as input. In order to be able to process multi modal inputs, we have designed two distinct architectures:the first solution (M1) consists in removing the stem of the original DenseNet and only make use of the following convolutional layers which input is a tensor of size (64,112,112). This architecture is illustrated in figure 2. The proposed network is composed of a "precoder" which produces an adequate high dimensional input tensor for the pretrained network. This architecture is illustrated in figure 3. It processes independently each input images and concatenates the resulting tensors. This approach is very flexible and could take as input an image of any dimensions. the second solution (M2) consists in evaluating the different input modality separately through the original DenseNet encoder. Each input image modality is processed with the same encoder which shares its weights across the different modalities. Outputs at different scales are then concatenated and fed to the decoder. This architecture is illustrated in figure 4 and 6. This architecture does not permit to vary the number of input slices but has the advantage to fully leverage the original DenseNet weights.For both architectures, the decoder consists in upsampling a low resolution layer, concatenate it with a higher resolution layer before applying a sequence of convolution operations. The first convolutional layer reduces the number of input channels by applying a (1x1) convolution. Following layers are composed of spatial (3x3) convolutions with residual connections.We give here additional details about the network architectures: Fig. 3: Precoder architecture (M1). The precoder architecture process independently the input images by a sequence of multiple residual blocks (R1, R2) and concatenates the resulting output tensors. A residual block (R) is also illustrated. All convolution operations are computed with (3x3) kernels.each sample 3D image y is normalised so that voxels values falls in the interval [0, 1]. batch normalisation is performed after each convolutional layer using a running mean and standard deviation computed on 5000 samples: each layer is composed of residual connections as illustrated in figure 6, the activation function used in the network is a rectified linear unit, convolutions are computed using reflective border padding, upsampling is performed by nearest neighbor interpolation.   

Training
We used the BRATS 2018 training and validation sets for our experiments  #b1  #b2  #b3  #b4 . The training set contains 285 patients (210 high grade gliomas and 75 low grade gliomas). The BRATS 2018 validation set contains 66 patients with brain tumors of unknown grade with unknown ground truth segmentations. Each patient contains four modalities: T1, T1 with contrast enhancement, T2 and T2 FLAIR. The aim of this experiment is to segment automatically the whole tumor, the tumor core and the tumor enhancing parts. Note that the outputs of our neural network corresponds directly to the probability that a pixel belongs to a tumor, the core of a tumor and the enhancing part of the tumor. The last layer of the proposed architecture is thus composed of three independent (1x1) convolutional layers because we directly model the problem as a multilabel segmentation problem where a pixel can be assigned to multiple classes. Note that only weights of the "precoder" and the decoder are learned. Original weights of the pretrained DenseNet-121 stay fixed during the training procedure.The network produces a segmentation maps by minimizing a loss function defined as the combination of the mean cross entropy (mce) and the mean Dice coefficients (dce) between the ground truth class probabilities and the network estimates:ce = k −1 n i y k i log(p k i )(1)where y k i and p k i represent respectively the ground truth probability and the network estimate for the class k at location i.dce = k =0 1.0 − 1 n 2 i p k i y k i + i (p k i ) + i (y k i ) + .(2)Note that we exclude the background class for the computation of the dice coefficient. The network is implemented using Microsoft CNTK 1 . We use stochastic gradient descent with momentum to train the network and L2 weights regularization. We use a cyclic learning rate where the learning rate varies from 0.0002 to 0.00005. An example of the evolution of the accuracy and the learning rate is illustrated in figure 7. We train the network for 160 epochs on a Nvidia GeForce GTX 1080 GPU. A full epoch consists in analyzing all images of the BRATS training data set and extracting 20 2D random samples from the 3D MR volumes.

Testing
Segmentation results are obtained by evaluating the network along slices extracted from the three anatomical orientations and averaging the results. A segmentation map is then obtained by assigning to each voxel the label having the   

Discussion
The validation and testing results obtained on the BRATS segmentation challenge show that the proposed approaches are indeed efficient. Despite the fact that the used encoder has been trained on natural color images, it turns out that the learned features can be leveraged for a large class of applications including segmentation of medical images. Using a fixed encoder is thus an effective way to regularize the neural network. Note that we did not make use of advanced image augmentations or ensembling methods. The two approaches produce comparable results and have both advantages and drawbacks. The model (M1) is more versatile since it can use any number of input modalities (channels) and any number of spatial dimensions. However current experiments shows that the model (M2), despite its simplicity, produces slightly better results. A major limitation of the proposed approach is the lack of 3D spatial consistency. 

Conclusion
We have studied an extreme version of transfer learning by using a fixed pretrained network trained on 2D color images for segmenting 3D multi modal medical images. We have presented two simple approaches for leveraging pretrained networks in order to perform automatic brain tumor segmentation. We obtained competitive scores on the BRATS 2018 segmentation challenge 3 . Future work will concentrate on several possible improvements by additionally fine tuning the pretrained encoder. A fixed large expressive 2D neural network is thus an interesting alternative to a relative small task specific 3D neural networks.

Footnote
1 : https://www.microsoft.com/en-us/cognitive-toolkit/
3 : https://www.cbica.upenn.edu/BraTS17/lboardValidation.html