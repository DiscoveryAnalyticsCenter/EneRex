Decentralized Control Systems Laboratory Using Human Centered Robotic Actuators

Abstract
University laboratories deliver unique hands-on experimentation for STEM students but often lack state-of-the-art equipment and provide limited access to their equipment. The University of Texas Cloud Laboratory provides remote access to a cutting-edge series elastic actuators for student experimentation regarding human-centered robotics, dynamical systems, and controls. Through a browser-based interface, students are provided with various learning materials using the remote hardware-inthe-loop system for effective experiment-based education. This paper discusses the methods used to connect remote hardware to mobile browsers, the adaptation of textbook materials regarding system identification and feedback control, data processing to generate clean and useful results for student interpretation, and initial usage of the end-to-end system for individual and group learning.

I. INTRODUCTION
In control system and robotic laboratory courses, students often grasp novel concepts and ideas from experimental data and analysis of experiments. The strategies for conducting these laboratories, however, have not changed in decades. First, advanced state-of-the-art devices can be prohibitively expensive and require significant human supervision. While there are some exceptions  #b0 [2]  #b2 , there will always exist a segment of the population for which even the relatively low-priced systems are out of reach. In parallel, many topperforming devices and testbeds developed from competitive research and industrial projects are rarely used for educational purposes but hold a strong potential for such purpose. It is compelled to enhance control systems education by creating methods for accessing ubiquitously cutting-edge equipment.In the past, several projects have been geared towards an online laboratory for education. An Internet based control laboratory is devised in  #b3 , consisting of eighteen benches containing educational equipment for learning feedback control systems, and it has been used in many courses across multiple departments. A 3-DOF parallel robot has been used as a Distance Laboratory System  #b4  showing that users can collaborate on control algorithms and enhance their experience. However, these online laboratories either focus only on the remotization aspect with no tutoring content or lack stepby-step guidance for the students to learn new concepts.  $b1  Authors are with The Department of Mechanical Engineering, University of Texas at Austin, Austin, TX 78712, USA. Send correspondence to binghan@utexas.edu.  $b2  Authors are with The Faculty Technology Studio, University of Texas at Austin, Austin, TX 78712, USA.  $b3  Author is with The Department of Aerospace Engineering and Engineering Mechanics, University of Texas at Austin, Austin, TX 78712, USA.  Open online courses, e.g. MOOCs  #b5 ,  #b6 , provide fundamental tutoring. In addition, researchers have built several systems to acquire specific knowledge skills. Sherlock  #b7  is used for guiding students to troubleshoot electrical equipment; ELM-ART  #b8  supports students to learn programming in Lisp; Andes  #b9  provides tutoring for learning physics; and Why2-Atlas  #b10  guides students in writing physics essays. These online courses all provide tutoring content using questions, hints, and guidelines, which assist the learners to obtain specific competencies. However, these online courses have not been connected to any experimental hardware.There are also other great efforts to combine educational tutoring with laboratory devices. Quanser  #b11  has been founded in response to a need among engineering educators and researchers for robust, high precision control experiments. The company developed a servomotor system featuring a modular platform for teaching and research. However, their platform is not remote as it needs to be in the same location as its users. iLabCentral  #b12  is an educational platform for remote hardware experimentation. The platform has been used to connect various laboratory devices for science education. However their devices provide learning of basic scientific principles instead of teaching content for state-of-the-art engineering platforms.These challenges and opportunities have prompted the authors to develop the UT Cloud Laboratory (CLAB) with focus on teaching concepts related to state-of-the-art engineering equipment. Given the focus on distance learning, it has leveraged distributed communication software and cloud framework technologies to provide remote education with a state-ofthe-art robotic actuator (Fig. 1). In Section II, the platform design, which includes a series elastic actuator (SEA) testbed and a cloud-based software architecture is introduced. It also introduces a Linear Temporal Logic (LTL)  #b13  method which automatically synthesize a finite state machine to manage human-server-machine interaction with a procedural control system experiment. In Section III, experiment content for system identification [15, pg.175-178] and feedback control [16, pg.404-410] are described. The feedback control experiment has been implemented in the CLAB system using the LTL synthesis method. In Section IV, the paper introduces a method to present to the students clean system identification plots from the experimental data by applying a piecewise Fast Fourier Transformation method. In Section V, the educational browser interface for usage of the CLAB system is shown which includes pre-laboratory questions, usage scheduling, and remote laboratory experimentation content.

II. PLATFORM DESIGN
A. State-of-the-art HardwareThe CLAB system includes an Apptronik P-170 Orion SEA testbed (Fig. 2). The experiment content is suited to teach third and/or fourth year engineering students principles of control system theory. The P-170 was developed based on the UT-SEA  #b16 , which has been adapted for the NASA Valkyrie robot  #b17 ,  #b18 . The SEA's control board is connected to a small PC with Ubuntu 14.04 OS which connects to a cloud server for remotization.

B. Software Architecture
Several software platforms have been established for massive open online courses  #b20 , including POSA MOOC  #b21 . Fig. 3 shows the diagram of the software system that drives the CLAB portal. The software system is supported by the Google Firebase database  #b22  and Amazon Web services (AWS)  #b23  in order to connect users to the P-170 SEA.Google Firebase is a real-time database, which is a cloudhosted and allows people to store and synchronize data between users in real-time. It offers a variety of services common to modern web applications. CLAB makes use of Firebase's authentication service and the database. In the software framework, Firebase is used for managing user accounts as well as saving data from the users. The data that is collected, including students' answers to pre-lab questions, students' scheduled experimentation times, and students' input parameters for each experiment are stored on the application.Data to be stored in the Google Firebase real-time database is managed in the application server, which is built upon AWS. The application server acts as an intermediary between To control the motor and read sensor data, the testbed has an AXON control board which includes EtherCat communications, provides optimized real-time control, low latency data transfer, and a floating point processor. the web portal and other resources. The server communicates with the experimentation testbed to handle several activities, including reserving a block of experimentation time, initiating an experiment, and streaming experimental data for students to view. The server constructs the structure of the interface, offers different activity options to users, and changes the actuator operating modes. It also communicates with the control design engine. For instance, once a student chooses the first lab experiment, the server will transfer the mode value to align with the control design engine, and will allow the control design engine to evaluate the student's answers.The Control Design Engine is in the form of a finite state machine synthesized by the LTL method to manage the actionreaction interactions between student, server, and testbed. For example, the range of acceptable values for an experimentation question may depend on values submitted earlier in the control design sequence. The control design engine contains the logic for dynamically determining which student submissions are acceptable. Additional details will be provided in subsequent sections.To improve student experience when interacting with the CLAB system, real-time video streaming is provided during the lab section. The web socket video relay takes in a live video of the lab device and broadcasts the feedback to a student in a browser-friendly format via the web portal. The video relay is optimized to be low latency. The time between a student pressing the "Start Run" button and seeing the device execution is only about two tenths of a second. JSMpeg and FFMpeg are used for the video recording feature. JSMpeg is a video player written in JavaScript. FFMpeg is a cross-platform solution to record, convert, and stream audio and video. After the experiment, the experimental data and the video streaming will be stored in Amazon's simple cloud storage service, S3, for later review.The SEA is run by a computer with a web camera pointed at the device itself. The computer receives and responds to messages via ZeroMQ, a lightweight messaging framework, to perform actions and launch experiments. Live experimental output data is broadcast in real-time back to the application server using ZeroMQ's publisher-subscriber model. The data is subsequently forwarded to the students browser for real-time plotting.C. Control Design Engine 1) Student-Server-Machine Interaction: In a controller design experiment, the server asks the student to enter variable values through posing lab questions. The server will check these variables within the cloud computation segment of the control design engine, and will record whether these variables have been entered correctly. When all the variables have been correctly entered and the student enters the "Start Run" command, the server tells the testbed's local computer to start the experiment, and receives the experiment results if the experiment is successfully finished. The machine reports an error message to the server if there is any problem in running the experiment. The student can reset the system back to the beginning of the controller design activity at any time.The Control Design Engine, which lives in the Amazon server, manages all interactions between the student, cloud computation, and local machine on the testbed (Fig. 4). Whenever there is an action executed from the student or machine, the Control Design Engine identifies the correct responding action to guide the student to complete all questions and collect all necessary inputs to start the experiment.2) Linear Temporal Logic: The Control Design Engine, which is called "system" in this LTL synthesis, is a finite state machine in which transitions are triggered from the student, cloud computation, and machine actions. The state indicates the suitable system response. LTL  #b13  is used to represent the system specifications for all interactions, and automatically synthesizes the finite state machine.First, the atomic propositions (AP) of LTL are defined based on the actions of the system, student, cloud computation, and machine. Assume x is one variable from a series of questions that the student needs to complete before the experiment. s,  h, c, and m stand for system, student, cloud computation, and local machine. The associated atomic propositions are as follows:1) System-to-Human actions: ϕ s−h x indicates the system asks a question to the student to calculate x. ϕ s−h exp indicates the system asks if the student wants to enter the experiment. ϕ s−h reset indicates the system asks if the student wants to reset itself. All system-to-human action APs are included in set S h . 2) Human-to-System actions: ϕ h x indicates the student provides the value of x to the system; ϕ h exp indicates the student clicks the "Start Run" button to run the experiment; ϕ h reset indicates the student clicks the reset button to restart from the beginning. All human-to-system action APs are included in set E h . 3) System-to-Computation actions: ϕ s−c x indicates the cloud computation checks whether x has been correctly calculated by the student. All system-to-computation action APs are included in set S c . 4) Computation-to-System actions: ϕ c true and ϕ c f alse indicate the correctness of cloud computation checking result for the entered variable. All computation-to-system action APs are included in set E c . 5) System-to-Machine actions: ϕ s−m exp indicates that the system triggers the experiment on the low level testbed machine. All system-to-machine action APs are included in set S m . 6) Machine-to-System actions: ϕ m result indicates that the experiment has been completed successfully and the experimental results have been displayed and saved; ϕ m error indicates the experiment has been interrupted and an error message has been collected. All machine-to-system action APs are included in set E m . 7) System-Self actions: ϕ s h , ϕ s m , and ϕ s c indicate which external factor the system is currently communicating with. ϕ s x indicates the variable x has been calculated correctly by the student and is saved for the setup of the experiment. ϕ s result indicates experiment results have been saved in the system. For ease of later discussions, superscript e ∈ {h, m, c} is also defined.All APs are formulated into constraints by propositional logic operators and temporal operators for automatic synthesis. The temporal operators, stands for 'always', ♦ stands for 'eventually', and stands for 'next time step.' All interactions are formulated under a structure of a twoplayer game in which one player is the system and the other player is the group of all external factors (human, cloud computation, and local machine). The system specifications of the two-player game are expressed into GR(1)  #b24  formulas, which allows automatic synthesis of the finite state machine. The GR(1) formulas include safety assumptions, liveness assumptions, and initial assumptions for human, computation and machine; and safety requirements, liveness requirements, and initial requirements for the server. The assumptions of actions from human, cloud computation, and machine are defined as the follows.1) Safety Assumption 1: At each time step, there is only one action ϕ e i ∈ E h ∪ E c ∪ E m executed by the student, computation, or machine,ϕ e i → ¬ j =i, ϕ e j ∈E h ∪Ec∪Em ϕ e j(1)2) Safety Assumption 2: The student will not be able to enter the value of x in the next time step if a variable x has not been requested by the server at the current time step,¬ϕ s−h x → ¬ϕ h x(2)3) Safety Assumption 3: The student will not be able to enter the experiment in the next time step if the experiment has not been requested by the server at the current time step,¬ϕ s−h exp → ¬ϕ h exp(3)4) Safety Assumption 4: The student will not be able to reset the system in the next time step if a reset has not been requested by the server at the current time step,¬ϕ s−h reset → ¬ϕ h reset(4)5) Safety Assumption 5: The machine will send experiment results or an error message in the next time step if and only if the server has triggered the experiment at the current time step,ϕ s−m exp ↔ (ϕ m result ∨ ϕ m error )(5)6) Safety Assumption 6: The cloud computation will send a 'correct' message or 'incorrect' message in the next time step if and only if the server has asked the computation to check the value of x at the current time step,ϕ s−c x → (ϕ c true ∨ ϕ c f alse )(6)7) Liveness Assumption 1: Any action, ϕ e i ∈ E h ∪ E c ∪ E m , from the student, computation, and machine is available in the future at every time step,♦ ϕ e i(7)The system requirements from the server are defined as follows, noting that there is no liveness requirement in these specifications:1) Safety Requirement 1: x 1 is a prerequisite value of value x 2 . The server will ask the student to enter the value of x 2 if and only if in the student mode there is no correct value of x 2 saved in the server and a correct value of x 1 saved,(¬ϕ s x2 ∧ ϕ s x1 ∧ ϕ s h ) ↔ ϕ s−h x2(8)2) Safety Requirement 2: y is a prerequisite value of the experiment. The server will ask the student to enter the experiment if and only if in the student mode there is a correct value of y saved in the server,(ϕ s y ∧ ϕ s h ) ↔ ϕ s−h exp(9)3) Safety Requirement 3: The server will ask the student to reset if and only if the server is in the student mode, i. An x is held by the system at the current time step or an x will be entered by the student in the next time step. ii. No x under the checking of cloud computation at the current time step or no 'false' message will be sent from cloud computation in the next time step. iii. No 'error' message will be sent from the machine in the next time step.ϕ s h ↔ ϕ s−h reset(10)iv. No reset command will be entered from the student in the next time step.(ϕ s x ∨ ϕ h x ) ∧ (¬ϕ s−c x ∨ ¬ ϕ c f alse ) ∧ ¬ ϕ m error ∧ ¬ ϕ h reset ↔ ϕ s x(14)8) Safety Requirement 8: The system will hold an experiment result in the next time step if and only if all the following conditions hold:i. An experiment result is held by the system at the current time step or an experiment result will be sent from the machine in the next time step. ii. No reset command will be entered by the student in the next time step.(ϕ s result ∨ ϕ m result ) ∧ ¬ ϕ h reset ↔ ϕ s result (15) Finally, after defining all these assumptions and system requirements, GR(1) is used to solve a finite state machine which satisfies all constraints. For the CLAB system, TuLip  #b25 , which is a Python LTL synthesis package, was used to formulate and solve all the constraints discussed. The resulting finite state machine was implemented as the Control Design Engine in the server.Notice that initial assumptions and requirements have not been specified. However, in order to ensure the system starts properly, reset commands are automatically executed at the beginning of the lab questions.

III. EXAMPLE EXPERIMENTS
In this section, two example experiments for teaching third and/or fourth year engineering students control systems theory has been provided. The first experiment, system identification, is a preliminary task before all other experiments on the testbed. The lab questions designed for the second experiment, feedback control, provide the students step-by-step guidance to design a lead controller. The automatic synthesis of the finite state machine under the constraints (1) -(11) will be applied to ease the implementation of the feedback control experiment on CLAB. The sequence of the lab questions are programmed under the form of Safety Requirement 1 in the previous section.

A. System Identification
Before students design control systems for the actuator, they need to understand the system model and its mathematical representation. When the actuator arm has been locked, it is modeled as a second order linear system (Fig. 6) [15, pg.75] with a transfer function:P (s) = βk s m k s 2 + b ef f s + k s ,(16)where m k is the spring-motor lumped mass, b ef f is the effective damping ratio of the spring, k s is the spring constant, and β is a product of the motor efficiency and gear ratio of the drivetrain. are measured from the original Bode diagrams from the system identification experiment. The desired phase margin (green) is given. The other intermediate parameters (red) are asked in a step-by step manner. These questions assist the student in developing a transfer function for the lead controller such that the student can implement the lead controller to obtain a new Bode diagram to see the phase margin improvement.In the system identification experiment [15, pg.175-178], electric current in the form of sine waves of varying frequencies are sent to the series elastic actuator. The resulting system outputs, spring forces, are measured. From this data, a Bode diagram can be developed, showing the magnitude and phase diagrams when considering output spring force as a result of input current of varying frequencies. The Bode diagrams allow the student to measure the associated phase margin as well as to recognize the effects of non-ideal conditions within an engineering system.

B. Feedback Control
Without a controller, this SEA will be unstable in the closed loop configuration due to the negative phase margin that was measured in the system identification experiment. The phase margin should be positive and relatively large so that it can stably track a desired output trajectory and overcome disturbances and time delay from the real world. The feedback control experiment introduces a lead controller, which is a type of feedback controller used to improve the phase margin and system stability. A series of six questions based on a control system textbook [16, pg.404-410] guides the student step-bystep to design the lead controller (Fig. 5).Before the feedback control design experiment, the Bode diagram from the system identification experiment is amplified by a predefined steady gain k ss . The original phase margin φ pm , and the original gain-crossover frequency ω gc−min are measured by the students from the amplified Bode diagram. The first question asks about ∆φ, which is the difference between φ d and φ pm .∆φ = φ d − φ pm(17)The second question asks about φ max , which is chosen based on the entered value of ∆φ. As a design rule of thumb [16, pg.405], φ max is 5 − 10 • greater than ∆φ. The third question asks about α, which is the ratio between the pole and the zero of the transfer function of the lead controller. The parameter can be calculated from a function in terms of φ max .α = 1 + sin φ max 1 − sin φ max(18)The CLAB system then requests that the student enter ω gc−max , the maximum possible value of the new gaincrossover frequency. The value of ω gc−max is measured on the original Bode diagrams by finding the new gain-crossover frequency after shifting the magnitude diagram 20 log α upward. The fifth question asks the student about the new gaincrossover frequency ω gc , which is a value between ω gc−min and ω gc−max . The final question requests that the gain k, pole p, and zero z values of the lead controller transfer function be entered into the interface. The prerequisite values have all been calculated in the previous questions.k = α, p = ω gc √ α, z = ω gc √ α .(19)The transfer function of the lead controller G c (s) with the predefined steady gain can be expressed as:G c (s) = k ss · k · s + z s + p(20)Similar to the system identification experiment, electrical current in the form of sine waves of varying frequencies are the inputs and the output spring forces, are measured. The lead controller with the transfer function of (17) is automatically implemented into the experiment. The Bode diagrams are created from the input command. The current command is inversely calculated from the relationship between electrical current and output spring force provided by the controller equation. The student will be able to see that the phase margin on the bode diagram has been improved by the lead controller and be able to compare this new phase margin with the desired phase margin.By applying constraints (1) -(11), a finite state automata with 13 environment actions, 28 system actions, and 78 states is automatically synthesized.

IV. RESULTS
The vedio of demonstration is available at https://www. youtube.com/watch?v=IkcvnRCCqoI. Before the user enters into an experiment, the CLAB home page provides an introduction to the testbed, the CLAB interface, and the motivation for the experiments. The user interface is separated into two parts: a menu bar and the main content of each experiment. The menu bar on the left side of the CLAB interface shows the session names for each experiment, which is composed of three subsection: pre-lab, scheduler, and experiment. The prelab tab leads the users to understand fundamental knowledge used in the experiments with a sequence of questions. After users complete the pre-lab, they can schedule the lab time by clicking "Schedule Lab," shown in the menu bar.The lab activity will become unblocked in the menu bar only when the scheduled time begins, so that multiple users (with different login ID's) will not be able to access the experiment system to run the testbed at the same time. It is important to note that multiple students can access the experiment via multiple laptops and/or iPhones using the same login ID, so that use of CLAB in a classroom environment is supported. When users start the lab activity, there may be a set of questions instructing them to input the parameters used in running the experiment. The interface in which the experiment is executed contains real-time video streaming, real-time input and output data, and simulation results for comparison. After the experiment is complete, Bode diagrams will also be provided for comparison against the simulated results.After the experiment, all the data and video will be automatically stored on the S3 Amazon Server for users to conveniently review their experiments and data to make observations and conclusion about the results.

A. Prelab
The CLAB interface allows for a prelab to be associated with each experiment. Instructors and teaching assistants can create and modify the questions using Firebase. Firebase allows for the questions to be structured in three different ways: free response questions that take a specific answer, free response questions which can take a range of answers, and multiple choice questions. The purpose of the prelab is that which is typical for in-person laboratories: to ensure the understanding of key concepts which are relevant to the current experiment so that the student can appreciate the applicability of theory to the real world.Example questions for the system identification and feedback control experiments are provided in Fig. 6. In Fig. 6(a), the locked output SEA model, which was discussed previously, is presented, and the student is asked to devise the transfer function between input current and the force measured in the spring. This question allows for the understanding of model development, transfer functions, and the input-output relationship relevant for system identification. If the student is unsure of an answer, he or she can access a hint  #b26 ,  #b27 , which provides further insight on the relevant topics and/or a pointer to useful references for more information. Other topics covered in the system identification prelab relate to experiment procedure, system behavior as a function of different degrees of damping, system order, and phase margin measurement. If the answer is submitted incorrectly, the student can continue to submit answers until it is correct. Fig. 6(b) shows the interface for the feedback control prelab. The prelab focuses on ensuring that the student understands the relevance of lead controller design parameters and the ability to formulate these parameters, as demonstrated in the question displayed. Users can move forward as long as their responses are in the range of accepted answers, and they are allowed to go back and review their answers after they have answered correctly. The ability to schedule a lab is contingent upon full completion of the associated prelab. Upon completion, the student is automatically directed to the scheduler.

B. Scheduler
The CLAB scheduler interface guides users to schedule the experiments online. The scheduler helps multiple users efficiently make use of the device. The scheduler interface design does not change between experiments, and the feedback control experiment is provided as an example. Fig. 7 shows the interface during and after scheduling an experiment time. Fig. 7(a) shows that times occupied by others or which have already passed are denoted as gray, and these periods are automatically blocked for scheduling. The user can click on the unblocked spaces to select a time between 9:00 AM to 4:30 PM. A legend box is provided to distinguish between blocked times, times for "actuator cool-down time" in order to not stress the machine, and time reserved by the user. After clicking on the calendar, the system will automatically reserve two hours for the experiment section.The period selected will be highlighted in blue. If users are satisfied with the time period they can click on the "Schedule" button located in the bottom-right of the interface. After a user schedules the experiment time, that period will turn green to indicate that the time has been reserved, as shown in Fig.  7(b). After the reservation is complete, the "Schedule" button changes into a "Cancel" button to allow students to change their reserved times, if needed. Users are allowed to cancel their appointment until the beginning of the lab section. By clicking on the "Cancel" button, the previously-reserved time is unreserved, and the user is allowed to choose another other experiment time period.There are multiple rules to conveniently help users manage their scheduling: Users cannot arrange another time period During the experiments, the student will notice the drive belt (connecting motor to output) moving at different frequencies, and the motions of the other components. (b) Time-domain output from the system identification experiment. The student will notice that the input current's amplitude remains constant but that the frequency increases over time. In the Output Force vs. Time plot, the varying spring force as a result of the varying frequencies provides valuable data for the generation of the associated Bode diagrams.(a) (b) Fig. 9. Within the CLAB interface the student has access to plotted real data for the feedback control experiment, as well as simulation data for comparison. The student can read the positive phase margin gained from using feedback control, as well as identify deviations from expected behavior. Through sideby side comparison, one notes deviations from a predicted phase of zeros degrees at low frequencies, and deviations from a relatively constant phase at high frequencies in ideal conditions. for the same experiment until they finish the one they already scheduled; Users are allowed to use multiple devices to access to the experiment website; Users are allowed to arrange multiple lab experiments if they finish all the corresponding prelab sections; Users cannot cancel the scheduling during the lab experiment section. Once the scheduling time begins, users are allowed to start their lab experiment and they can start or end at any time during the scheduling period.

C. Lab
The CLAB interface is configured for remote access to the system identification and feedback controller design experiments. When the student conducts an experiment, he or she can see the experiment being executed in real-time ( Fig.  8(a)). There is also audio available, as the sound of the system combined with visual information can give insight into understanding expected versus actual behaviors. For example, the student might be able to identify that the system needs to be lubricated if the belt does not move significantly despite high-frequency sounds. As the experiment is executed, timedomain data is simultaneously plotted, showing input current versus time and measured spring force versus time (Fig. 8(b)).After the experiment concludes, the CLAB software automatically conducts a Fast-Fourier transform on the experimental data to produce Bode diagrams. The Bode phase diagram associated with the system identification experiment shows a negative phase margin, indicating instability. The student can then understand the benefit of implementing control of the system. The Bode diagrams of the open-loop system with the lead controller integrated into the control scheme, as seen in Fig. 9, shows the positive phase margin achieved.In both experiments, the student has access to predicted ideal Bode diagrams which were produced in Matlab simulations. These figures for comparison highlight one of the key benefits of performing laboratory experiments on real hardware -the ability to identify the disparities between predicted and real-world behaviors. For example, as can be seen in Fig. 9 for the feedback control experiment, simulation suggests that in ideal conditions the phase should be equal to zero at low frequencies. In the real system, one recognizes that the phase is less than zero at low frequencies. Disturbances to the system, such as nonlinear drivetrain friction, contribute to this observed decrease in stability. The simulation also shows that at high frequencies the ideal phase will reach a steady value as frequency increases, while the real data shows the phase continuing to decrease. Another source of imperfection in the embedded system is time delay, which may contribute to this deviation from expected behaviors. The two experiments allow for the development of key engineering skills -to decipher between predicted and actual outcomes, and to recognize the potential sources for imperfections in physical systems.

V. CONCLUSIONS
In this paper, a method to learn the usage of stat-of-the-art robotics equipment via remote browsers has been discussed. The concept by devising a cloud-based infrastructure, CLAB, which delivers the experiment content pertaining to the analysis and control of a series elastic actuator developed for NASA to remote users has been demonstrated. The CLAB infrastructure allows users to answer prelab questions, obtain hints if needed, schedule lab time, solve lab questions, process real-time remote experiments, and collect experimental data and video through a web browser. With this foundation, system identification and feedback control experiments were implemented on the CLAB infrastructure. The authors believe this infrastructure could be effective at training students for their job careers since it uses state-of-the-art equipment.