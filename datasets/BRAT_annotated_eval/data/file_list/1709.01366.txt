Speeding-up the decision making of a learning agent using an ion trap quantum processor

Abstract
We report a proof-of-principle experimental demonstration of the quantum speed-up for learning agents utilizing a small-scale quantum information processor based on radiofrequency-driven trapped ions. The decision-making process of a quantum learning agent within the projective simulation paradigm for machine learning is implemented in a system of two qubits. The latter are realized using hyperfine states of two frequency-addressed atomic ions exposed to a static magnetic field gradient. We show that the deliberation time of this quantum learning agent is quadratically improved with respect to comparable classical learning agents. The performance of this quantum-enhanced learning agent highlights the potential of scalable quantum processors taking advantage of machine learning. Keywords: machine learning, reinforcement learning, quantum computing, trapped ions, quadratic speed-up algorithm ‡ Other approaches that we will not further discuss here concern among others models where internal processes are sped up by annealing processes [15, 16] ; or where the environment, and the agent's interaction with it may be of quantum mechanical nature as well [17, 18, 19] .

Introduction
The past decade has seen the parallel advance of two research areas -quantum computation  #b0  and artificial intelligence  #b1  -from abstract theory to practical applications and commercial use. Quantum computers, operating on the basis of information coherently encoded in superpositions of states that could be considered classical bit values, hold the promise of exploiting quantum advantages to outperform classical algorithms, e.g., for searching databases  #b2 , factoring numbers  #b3 , or even for precise parameter estimation with quantum metrology  #b4  #b5 . At the same time, artificial intelligence and machine learning have become integral parts of modern automated devices using classical processors  #b6  #b7  #b8  #b9 . Despite this seemingly simultaneous emergence and promise to shape future technological developments, the overlap between these areas still offers a number of unexplored problems  #b10  #b11 . It is hence of fundamental and practical interest to determine how quantum information processing and autonomously learning machines can mutually benefit from each other.  (a) Learning agents receive perceptual input ("percepts") from and act on the environment. The projective simulation (PS) decision-making process draws from the agent's memory and can be modeled as a random walk in a clip network, which, in turn, is represented by a stochastic matrix P . Here the clips represent the elementary patches of episodic memory of prior experiences. (b) Q-RPS agents enhance the relative probability of (desired) actions (green columns) compared to other clips (grey) that may include undesired actions or percepts (blue) within the stationary distribution of P before sampling, achieving a quadratic speed-up with respect to classical RPS agents.Within the area of artificial intelligence, a central component of modern applications is the learning paradigm of an agent interacting with an environment  #b12  #b1  #b13  illustrated in figure 1 (a), which is usually formalized as so-called reinforcement learning. This entails receiving perceptual input and being able to react to it in different ways. The learning aspect is manifest in the reinforcement of the connections between the inputs and actions, where the correct association is (often implicitly) specified by a reward mechanism, which may be external to the agent. In this very general context, an approach to explore the intersection of quantum computing and artificial intelligence is to equip autonomous learning agents with quantum processors for their deliberation procedure ‡. That is, an agent chooses its reactions to perceptual input by way of quantum algorithms or quantum random walks. The agent's learning speed can then be quantified in terms of the average number of interactions with the environment until targeted behavior (reactions triggering a reward) is reproduced by the agent with a desired efficiency. This learning speed cannot generically be improved by incorporating quantum technologies into the agent's design  #b16 .However, a recent model  #b19  for learning agents based on projective simulation (PS)  #b13  allows for a speed-up in the agent's deliberation time during each individual interaction. Theoretical work has shown that such a quantum improvement in the reaction speed should be possible within the reflecting projective simulation (RPS) variant of PS  #b19 . There, the desired actions of the agent are chosen according to a probability distribution that can be modified during the learning process. This is of particular relevance to adapt to rapidly changing environments  #b19 , as we shall elaborate on in the next section. For this task, the deliberation time of classical RPS agents is proportional to the quantities 1/δ and 1/ , where δ represents a spectral gap of a Markov chain and represents the probability to sample an action in a probability distribution. These characterize the time needed to generate the specified distribution in the agent's internal memory and the time to sample a suitable (e.g., rewarded rather than an unrewarded) action from it, respectively. A quantum RPS (Q-RPS) agent, in contrast, is able to obtain such an action quadratically faster, i.e., within a time of the order 1/ √ δ as is shown in the next section. Here, we report on the first proof-of-principle experimental demonstration of a quantum-enhanced reinforcement learning system, complementing recent experimental work in the context of (un)supervised learning  #b20  #b21  #b22 . We implement the deliberation process of an RPS learning agent in a system of two qubits that are encoded in the energy levels of one trapped atomic ion each. Within experimental uncertainties, our results confirm the agent's action output according to the desired distributions and within deliberation times that are quadratically improved with respect to comparable classical agents. This laboratory demonstration of speeding up a learning agent's deliberation process can be seen as the first experiment combining novel concepts from machine learning with the potential of ion trap quantum computers where complete quantum algorithms have been demonstrated  #b23  #b24  #b25  #b26  and feasible concepts for scaling up  #b27  #b28  #b29  are vigorously pursued.

Theoretical Framework of RPS
A generic picture for modeling autonomous learning scenarios is that of repeated rounds of interaction between an agent and its environment. In each round the agent receives perceptual input ("percepts") from the environment, processes the input using an internal deliberation mechanism, and finally acts upon (or reacts to) the environment, i.e., performs an "action"  #b13 . Depending on the reward system in place and the given percept, such actions may be rewarded or not, which leads the agent to update its deliberation process, the agent learns.Within the projective simulation (PS)  #b13  paradigm for learning agents, the decision-making procedure is cast as a (physically motivated) stochastic diffusion process within an episodic compositional memory, that is, a (classical or quantum) random walk in a representation of the agent's memory containing the interaction history. One may think of the episodic compositional memory as a network of clips that can correspond to remembered percepts, remembered actions, or combinations thereof. That is, the clips represent the elementary patches of episodic memory. Mathematically, this clip network is described by a stochastic matrix (defining a Markov chain) P = (p ij ), where the p ij with 0 ≤ p ij ≤ 1 and i p ij = 1 represent transition probabilities between the clips labeled i and j with i, j ∈ {1, 2, . . . , N }. The learning process is implemented through an update of the N × N matrix P , which, in turn, serves as a basis for the random walks in the clip network. Different types of PS agents vary in their deliberation mechanisms, update rules, and other specifications.In particular, one may distinguish between PS agents based on "hitting" and "mixing". For the former type of PS agent, a random walk could, for instance, start from a clip c 1 called by the initially received percept. The first "step" of the random walk then corresponds to a transition to clips c j with probabilities p 1j . The agent then samples from the resulting distribution {p 1j } j . If such a sample provides an action, for instance, if the clip c k is "hit", this action is selected as output, otherwise the walk continues on from the clip c k . An advanced variant of the PS model based on "mixing" is reflecting projective simulation (RPS)  #b19 . There, the Markov chain is first "mixed", that is, an appropriate number § of steps are applied until the stationary distribution is attained (approximately), before a sample is taken. This, or other implementations of random walks in the clip network provide the basis for the PS framework for learning. The classical PS framework can be used to solve standard textbook problems in reinforcement learning  #b30  #b31  #b32 , and has recently been applied in advanced robotics  #b33 , adaptive quantum computation  #b34 , as well as in the machine-generated design of quantum experiments  #b35 .Here, we focus on RPS agents, where the deliberation process based on mixing allows for a speed-up of Q-RPS agents with respect to their classical counterparts  #b19 . In contrast to basic hitting-based PS agents, the clip network of RPS agents is structured into several sub-networks, one for each percept clip, and each with its own stochastic matrix P . In addition to being stochastic, these matrices specify Markov chains which are ergodic  #b19 , which ensures that the Markov chain in question has a unique stationary distribution, i.e., a unique eigenvector α α α with eigenvalue +1, Pα α α = α α α. Starting from any initial state, continued application of P (or its equivalent in the quantized version) mixes the Markov chain, leaving the system in the stationary state.As part of their deliberation process, RPS agents generate stationary distributions over their clip space, as specified by P , which is updated as the agent learns. These distributions have support over the whole sub-network clip space, and additional specifiers -flags -are used to ensure an output from a desired sub-set of clips. For instance, standard agents are presumed to output actions only, in which case only the actions are flagged using standard emoticons  #b13 . This ensures that an action will be output, while maintaining the relative probabilities of the actions. Put simply, flags provide a mechanism that can be used as a short-term memory, or to mark actions, to (temporarily) store additional information about the clip network besides that contained in the Markov chain. The same mechanism of flags can also be used to eliminate iterated attempts of actions which did not yield rewards in recent time-steps. This leads to a more efficient exploration of correct behavior.In the quantum version of RPS, each clip c i is represented by a basis vector |i in a Hilbert space H. In the most general case, the mixing process is then realized by a diffusion process on two copies of the original Hilbert space. On the doubled space H⊗H a unitary operator W (P ) (called the Szegedy walk operator  #b36  #b37 ) and a quantum state |α with W (P ) |α = |α take the roles of the classical objects P and α α α. Both W (P ) and |α depend on a set of unitaries U i on H that act as U i |0 = j √ p ij |j for some reference state |0 ∈ H . The more intricate construction of W (P ) is given in detail in reference  #b38 . The feature of the quantum implementation of RPS that is crucial for us here is an amplitude amplification similar to Grover's algorithm  #b2 , which incorporates the mixing of the Markov chain and allows outputting flagged actions after an average of O(1/ √ ) calls to W (P ), where is the probability of sampling an action from the stationary distribution. The algorithm achieving this is structured as follows. After an initialization stage where |α is prepared, a number of diffusion steps are carried out. Each such step consists of two parts. The first part is a reflection over the states corresponding to actions in the first copy of H. In the second part, an approximate reflection over the state |α , the mixing, is carried out  #b19 . This second step involves O(1/ √ δ) calls to W (P ). The two-part diffusion steps are repeated O(1/ √ ) times before a sample is taken from the resulting state by measuring in the basis {|i } i=1,...,N . If an action is sampled, the algorithm concludes and that action is chosen as output. Otherwise, all steps are repeated. Since the algorithm amplifies the probability of sampling an action (almost) to unity, carrying out the deliberation procedure with the help of such a Szegedy walk hence requires an average of O(1/ √ δ ) calls to W (P ). In comparison, a classical RPS agent would require an average of O(1/δ) applications of P to mix the Markov chain, and an average of O(1/ ) samples to find an action. Q-RPS agents could hence achieve a quadratic speed-up in their reaction time.Here, it should be noted that, its elegance not withstanding, the construction of the approximate reflection for general RPS networks is demanding for current quantum computational architectures. Most notably, this is due to the requirement of two copies of H, on which frequently updated coherent conditional operations need to be carried out  #b38  #b40  #b41 . However, for the special case of rank-one Markov chains P , the entire chain can be represented on one copy of H by a single unitary U P = U i ∀i, since all columns of P are identical. Conceptually, this simplification corresponds to a situation where each percept-specific clip network contains only actions and the Markov chain is mixed in one step (δ = 1). In such a case one uses flags to mark desired actions. Interestingly, these minor alterations also allow to establish a oneto-one correspondence with the hitting-based basic PS using two-layered networks, into which all standard tabular reinforcement learning models such as Q-learning or SARSA can be subsumed when the update, and transition rules have been appropriately amended  #b1 . In particular, basic PS using a two-layered network is already able to solve interesting classical tasks such as the mountain-car problem, grid-world, and many more  #b30  #b31  #b32  #b33  #b34  #b35 .Let us now discuss how the algorithm above can be performed for the rank-one case with the flagging mechanism in place. First, we restrict A to be the subspace of the flagged actions only, assuming that there are n N of these, and we denote the corresponding probabilities within the stationary distribution by a 1 , . . . , a n . In the initialization stage, the state |α = i=1,...,N √ a i |i is prepared. Then, an optimal number of k diffusion steps  #b2  is carried out, wherek = round π 4 √ − 1 2 ,(1)and = i=1,...,n a i is the probability to sample a flagged action from the stationary distribution. Within the diffusion steps, the reflections are performed only over all flagged actions, i.e.,ref A = 2 n i=1 |i i| − 1.(2)In the rank-one case, the reflections over the stationary distribution α becomes an exact reflectionref α = 2 |α α| − 1(3)and can be carried out on one copy of H  #b38 . After the diffusion steps, a sample is taken and the agent checks if the obtained action is marked with a flag. If this is the case, the action is chosen as output, otherwise the algorithm starts anew. While a classical RPS agents requires an average of O(1/ ) samples until obtaining a flagged action, this number reduces to O(1/ √ ) for Q-RPS agents. This quantum advantage is particularly pronounced when the overall number of actions is very largeUpdating of the clip network may include, e.g., modifications of the weights associated to the edges of the graph corresponding to the clip network in such a way that weights of connections between percepts and rewarded actions are increased. In addition, updates may involve the addition or deletion of clips, as well as more sophisticated mechanisms such as glow, generalization, etc., see Refs.  #b30  #b19  $b40 ]. compared to n and the environment is unfamiliar to the agent or has recently changed its rewarding pattern, in which case may be very small. Given some time, both agents learn to associate rewarded actions with a given percept, suitably add or remove flags, and adapt P (and by extension α α α). In the short run, however, classical agents may be slow to respond and the advantage of a Q-RPS agent becomes apparent. Despite the remarkable simplification of the algorithm for the rank-one case with flags, the quadratic speed-up is hence preserved ¶. This simplification also leads to a reduction in experimental complexity, in terms of the required number of two-qubit gates.

Experimental Implementation of Rank-One RPS


Quantum Algorithm
The proof-of-principle experiment that we report in this paper experimentally demonstrates the speed-up of quantum-enhanced learning agents. That is, we are able to empirically confirm both the quadratically improved scaling of O(1/ √ ), and the correct output according to the tail of the stationary distribution. Here, denotes the initial probability of finding a flagged action within the stationary distribution α α α = {a i } for the average number of calls of the diffusion operator before sampling one of the desired actions. The tail is defined as the first n components of α α α. By a correct output according to the tail of the stationary distribution, we mean that a j /a k = b j /b k ∀j, k ∈ {1, . . . , n}, where b j denotes the final probability that the agent obtains the flagged action labeled j. Note that the Q-RPS algorithm enhances the overall probability of obtaining a flagged action such that≡ n i=1 b i > n i=1 a i = ,(4)whilst maintaining the relative probabilities of the flagged actions according to the tail of α α α, as illustrated in figure 1 (b).For the implementation we hence need at least a three-dimensional Hilbert space that we realize in our experiment using two qubits encoded in the energy levels of two trapped ions (see the experimental setup section): Two states to represent two different flagged actions (represented in our experiment by |00 and |01 ), and at least one additional state for all non-flagged actions (|10 and |11 in our experiment). The preparation of the stationary state is implemented by|α = U P (θ 1 , θ 2 ) |00 = R 1 (θ 1 , π 2 )R 2 (θ 2 , π 2 ) |00 ,(5)where R j (θ, φ) is a single-qubit rotation on qubit j, i.e.,R j (θ, φ) = exp[i θ 2 (X j cos φ − Y j sin φ)].(6)Here, X j , Y j , and Z j denote the Pauli operators of qubit j. The total probability = a 00 + a 01 for a flagged action within the stationary distribution is then determined ¶ Since δ = 1, the speed-up is only possible, and is achieved for, the quantity .by θ 1 via = cos 2 (θ 1 /2),(7)whereas θ 2 determines the relative probabilities of obtaining one of the flagged actions viaa 00 / = cos 2 (θ 2 /2).(8)The reflection over the flagged actions ref A is here given by a Z rotation, defined by R j,z (θ) = exp[−i θ 2 Z j ], with rotation angle −π for the first qubit,ref A = R 1,z (−π) = exp[i π 2 Z 1 ].(9)The reflection over the stationary distribution can be performed by a combination of single-qubit rotations determined by θ 1 and θ 2 and a CNOT gate given byref α = R 1 (θ 1 − π, π 2 )R 2 (θ 2 + π 2 , π 2 )U CNOT R 1 (−θ 1 − π, π 2 )R 2 (−θ 2 − π 2 , π 2 ),(10)which can be understood as two calls to U P (once in terms of U † P ) supplemented by fixed single-qubit operations  #b38 . The total gate sequence for a single diffusion step (consisting of a reflection over the flagged actions followed by a reflection over the stationary distribution) can hence be decomposed into single-qubit rotations and CNOT gates and is shown in figure 2. The speed-up of the rank-one Q-RPS algorithm with respect to a classical RPS agent manifests in terms of a quadratically smaller average number of calls to U P (or, equivalently, to the diffusion operator D = ref α ref A ) until a flagged action is sampled. Since the final probability of obtaining a desired action is ≡ i=1,...,n b i , we require 1/˜ samples on average, each of which is preceded by the initial preparation of |α and k diffusion steps. The average number of uses of U P to sample correctly is henceC = (2k( ) + 1)/˜ ,(11)which we refer to as 'cost' in this paper. In what follows, it is this functional relationship between C and that we put to the test, along with the predicted ratio a 00 /a 01 of occurrence of the two flagged actions.

The experimental setup
Two 171 Yb + ions are confined in a linear Paul trap with axial and radial trap frequencies of 2π × 117 kHz and 2π × 590 kHz, respectively. After Doppler cooling, the two ions form a linear Coulomb crystal, which is exposed to a static magnetic field gradient of 19 T/m, generated by a pair of permanent magnets. The ion-ion spacing in this configuration is approximately 10 µm. Magnetic gradient induced coupling (MAGIC) between ions results in an adjustable qubit interaction mediated by the common vibrational modes of the Coulomb crystal  #b42 . In addition, qubit resonances are individually shifted as a result of this gradient and become position dependent. This makes the qubits distinguishable and addressable by their frequency of resonant excitation. The addressing frequency separation for this two-ion system is about 3.7 MHz. All coherent operations are performed using radio frequency (RF) radiation near 12.6 GHz, matching the respective qubit resonances  #b43 . The RF power is carefully adjusted for each ion in order to achieve an equal Rabi frequency of 20.92(3) kHz. A more detailed description of the experimental setup is given in Refs.  #b42  #b44  #b25 . The qubits are encoded in the hyperfine manifold of each ion's ground state, representing an effective spin 1/2 system. The qubit states |0 and |1 are represented by the energy levels | 2 S 1/2 , F = 0 and | 2 S 1/2 , F = 1, m F = +1 , respectively. The ions are Doppler cooled on the resonance | 2 S 1/2 , F = 1 ↔ | 2 P 1/2 , F = 0 with laser light near 369 nm. Optical pumping into long-lived meta-stable states is prevented using laser light near 935 nm and 638 nm. The vibrational excitation of the Doppler cooled ions is further reduced by employing RF sideband cooling for both the center of mass mode and the stretch mode  #b45 . This leads to a mean vibrational quantum number of n ≤ 5 for both modes. The ions are then initialized in the qubit state |0 by state selective optical pumping with a 2.1 GHz blue-shifted Doppler-cooling laser on the | 2 S 1/2 , F = 1 ↔ | 2 P 1/2 , F = 1 resonance.

State preparation, conditional dynamics, and read-out
The desired qubit states are prepared by applying an RF pulse resulting in a coherent qubit rotation with precisely defined rotation angle and phase as given by (6) -(8). We replace R z ( π 2 ) by R( π 2 , π 2 )R( π 2 , 0)R( π 2 , 3π 2 ) and R z (− π 2 ) by R( π 2 , π 2 )R( π 2 , π)R( π 2 , 3π 2 ). The required number of diffusion steps is then applied to both qubits, using appropriate single-qubit rotations and a two-qubit ZZ-interaction given byU ZZ (θ) = exp [i θ 2 Z 1 Z 2 ],(12)which is directly realizable with MAGIC  #b42 . A CNOT gate (U CNOT ) can then be performed viaU CNOT = e −i π 4 R 2 ( π 2 , 3π 2 )U ZZ ( π 2 )R 2 ( π 2 , 0)R 2,z ( π 2 )R 1,z (− π 2 ).The required number of single qubit gates is optimized by combining appropriate single qubit rotations together from ref A and ref α (see figure 2). Thus, we can simplify the algorithm toD = R 2 (θ 2 , π 2 )R 1 (θ 1 , π 2 )R 2,z (− π 2 )R 1,z ( π 2 )U ZZ ( π 2 )R 2 (−θ 2 , π 2 )R 1 (θ 1 , π 2 ),(13)as shown in figure 3. The qubits are prepared in the desired input states using single-qubit rotations implemented by applying RF pulses. For each RF pulse, the two parameters within the parentheses represent the specific rotation angle and phase according to (6) -  #b7 . Also, dynamical decoupling (DD) during conditional evolution U zz (π/2) (indicated by a green box), is implemented using RF pulses (indicated in yellow). Ten sets of 14 pulses each (UR14)  #b46  are applied during the evolution time τ = 4.24 ms with a J-coupling between the two ions of 2π × 59 Hz. The diffusion step is repeated k times according to (1) in section 2. Laser light near 369 nm is used for cooling and to initialize the ions in the qubit state |0 ≡ | 2 S 1/2 , F = 0 . At the end of the coherent manipulation, laser light is used again for state selective detection and also for Doppler cooling. These process durations are: 30 ms for Doppler cooling, 100 ms for sideband cooling on the center-of-mass mode, 100 ms for sideband cooling on the stretch mode, 0.25 ms for initialization in state |0 of the ions, and 2 ms for detection.During the evolution time of 4.24 ms for U ZZ in each diffusion step both qubits are protected from decoherence by applying universally robust (UR) dynamical decoupling (DD) pulses  #b46 . A set of ten (x = 10) UR14 (N = 14) RF π-pulses, equaling a total of 140 pulses, is applied. Each set is comprised of 14 error cancelling pulses (figure 3) with appropriately chosen phase φ:0, 6π 7 , 4π 7 , 8π 7 , 4π 7 , 6π 7 , 0, 0, 6π 7 , 4π 7 , 8π 7 , 4π 7 , 6π 7 , 0 .Since the phases of the π-pulses are symmetrically arranged in time, only the first seven pulses are shown in figure 3. The last pulse is also shown to visualize the spacing of these pulses with respect to the start and end of evolution time, compared to the intermediate pulses. The maximum interaction time of 30 ms required to realize the deliberation algorithm (corresponding to 7 diffusion steps) is 60 times longer than the qubit coherence time. Such a long coherent interaction time is accomplished by the DD pulses applied to each qubit simultaneously. Finally, projective measurements on both qubits are performed in the computational basis {|0 , |1 } by scattering laser light near 369 nm on the | 2 S 1/2 , F = 1 ↔ | 2 P 1/2 , F = 0 transition, and detecting spatially resolved resonance fluorescence using an electron multiplying charge coupled device to determine the relative frequencies b 00 , b 01 , b 10 , b 11 for obtaining the states |00 , |01 , |10 , and |11 , respectively. Two thresholds are used to distinguish between dark and bright states of the ions, thus discarding 10% of all measurements as ambiguous events with a photon count that lies in the region of two partially overlapping Poissonian distributions representing the dark and bright states of the ions  #b47  #b44 .

Experimental Results
As discussed above, our goal is to test the two characteristic features of rank-one Q-RPS: (i) the scaling of the average cost C with , and (ii) the sampling ratio for the different flagged actions. Therefore, our first set of measurements studies the behavior of the cost C as a function of the total initial probability . The second set of measurements studies the behavior of the output probability ratio r f = b 00 /b 01 as a function of input probability ratio r i = a 00 /a 01 .For the former, a series of measurements is performed for different values of corresponding to k = 1 to k = 7 diffusion steps after the initial state preparation (table 1). To obtain the cost C = (2k( ) + 1)/˜ , where˜ = b 00 + b 01 , we measure the probabilities b 00 and b 01 after k diffusion steps and repeat the experiment 1600 times for fixed . The average cost is then plotted against as shown in figure 4. The algorithm complexity is defined as the number of computational steps (equivalently, the number of calls to U P ) until the flagged action is sampled. To describe the algorithm complexity, the number of operations can be expressed as O( −ξ ). Ideally, the RPS gives ξ = 1 whereas the Q-RPS gives ξ = 0.5. The experimental data shows that the cost decreases with where ξ = 0.57  #b4 . This is in good agreement with the behavior expected for the ideal Q-RPS algorithm. In the range of chosen probabilities , the experimental  result of Q-RPS shows improved scaling as compared to the expected classical RPS, and clearly outperforms the classical RPS, as shown in figure 4. The deviation from the ideal behavior is attributed to a small detuning of the RF pulses implementing coherent operations, as we discuss in section 4.1.For the second set of measurements, we select calculated probabilities a 00 and a 01 in order to obtain different values of the input ratio r i = a 00 /a 01 between 0 and 2, whilst keeping k( ) in a range between k = 1 and k = 3 (table 2). For these probabilities a 00 and a 01 , the corresponding rotation angles θ 1 and θ 2 of RF pulses used for preparation are extracted using (7) and  #b7 . We then carry out the Q-RPS algorithm for the specific choices of k and repeat it 1600 times to estimate the probabilities b 00 and b 01 . We finally obtain the output ratio r f = b 00 /b 01 , which is plotted against the input ratio in figure 5. The experimental data follows a straight line with a small offset from the ideal behavior r f /r i = 1. Therefore, the ratio of the number of occurrences of the two actions obtained at the end of the deliberation process is maintained with respect to the relative probabilities of the initial stationary distribution.The slopes of the two fitted linear functions shown in figure 5 agree within their respective error showing that the deviation of the output ratio from the ideal result is independent of the number of diffusion steps. In addition, this indicates that this deviation is not caused by the quantum algorithm itself, but by the initial state preparation and/or by the final measurement process where such a deviation can be caused by an asymmetry in the detection fidelity (see section 4.1). Indeed, the observed deviation is well explained by a typical asymmetry in the detection fidelity of 3% as encountered in the measurements presented here. This implies reliability of the quantum algorithm also for a larger number of diffusion steps.

Interpretational considerations
In this section, we discuss deviations of the experimental data from idealized theory predictions. In particular, for the chosen values of and the corresponding optimal k( ), it is expected that the probability of obtaining a flagged action is close to 100%. However, the success probability in our experiment lies between 66% (for k = 7) and 88% (for k = 1). In what follows, we discuss several reasons for this. First, we consider in detail experimental imperfections that affect the scaling of cost C with as shown in figure 4. Then, we discuss how the input and output ratios (figure 5), r i and r f , are affected by an imbalanced detection efficiency for both qubit states. In both cases the observed deviations from the ideal results are quantitively explained by numerically simulating the quantum algorithm taking into account experimental imperfections.

4.1.1.
Scaling of cost C. Even in an ideal scenario without noise or experimental imperfections the success probability˜ , as defined in (4), after k diffusion steps is usually not equal to unity, and depends on the specific value of . This behavior originates from the step-wise increase of the number of diffusion steps k = round(π/(4 √ ) − 1 2 ) in the algorithm. The success probability is hence only 100%, if k is an integer without rounding. The change of the ideal success probability with deviations of from such specific values is largest for small numbers of diffusion steps (e.g., k = 1) and can drop down to 82% (neglecting the cases where it is not advantageous to use a quantum algorithm at all). For larger numbers of diffusion steps, the exact value of does not play an important role any more for the ideal success probability provided that the correct number of diffusion steps is chosen. For example, for k = 6, the ideal success probability is larger than 98% independently of the exact value of . Throughout this paper, we have chosen in such a way, that (π/(4 √ ) − 1 2 ) (see (1)) is always close to an integer (see table. 1), such that the deviation from a 100% success probability due to the theoretically chosen is negligible compared to other error sources.However, in a real experiment, the initial state, and therefore , can only be prepared with a certain accuracy. This can lead to an inaccurate estimation of the optimal number of diffusion steps. As opposed to the ideal case, an assumed accuracy of ± 1% for the preparation only has a small effect on the success probability˜ (drop of less than 5%) for 0.01, corresponding to k ≤ 3. However, when does not fulfil the aforementioned condition and approaches ≈ 0.01 from above, corresponding to k = 6, then the success probability drops down to˜ = 70% due to a non-optimal choice of k.The preparation accuracy depends on the detuning ∆ω of the RF pulses for single-qubit rotations as well as on the uncertainty ∆Ω in the determination of the Rabi frequency Ω. The calibration of our experiment revealed ∆ω/Ω < 0.05 and ∆Ω/Ω = 0.0015 leading to an error in of ±2.5 · 10 −3 and a decrease of the success probability˜ of less than 0.04. The detuning ∆ω and the uncertainty of the Rabi frequency ∆Ω not only influence the state preparation at the beginning of the quantum algorithm, but also its fidelity, as is detailed in the next paragraph.To prevent decoherence during conditional evolution, we use 140 RF π-pulses per diffusion step and ion. Therefore, already a small detuning influences the fidelity of the algorithm. Consequently, the error induced by detuning is identified as the main error source leading, for example, to˜ ≈ 0.77 for k = 6 and ∆ω/Ω = −0.04. This error is much larger than the error caused by dephasing (that is still present after DD is applied), or the detection error. In a separate measurement, we determined an exponential dephasing rate of γτ ≈ 1/14 for a single diffusion step of duration τ ≈ 4 ms, which would lead tõ ≈ 0.90 for k = 6. Here, γ indicates the experimentally diagnosed rate of dephasing, and τ is the time of coherent evolution. The influence of the detuning on the cost of our algorithm is shown in figure 6 for different detunings. Here, we simulated the complete quantum algorithm including the experimentally determined dephasing and detection errors for ∆ω/Ω ∈ {0, −0.04, −0.08}. The experimental data is consistent with an average negative detuning of ∆ω/Ω = −0.04. Note that the detuning not only influences the single-qubit rotations that are an integral part of the quantum algorithm, but also leads to errors during the conditional evolution when dynamical decoupling pulses are applied.

Input and output ratios.
In the ideal algorithm, the output ratio r f = b 00 /b 01 of the two flagged actions represented by the states |00 and |01 at the end of the algorithm equals the input ratio r i . However, in the experiment we have observed deviations from r f /r i = 1. During the measurements for the investigation of the scaling behavior (figure 4), we fixed r i = 1. The observed output ratios are varying by 0.98 ≤ r f /r i ≤ 1.33. That is, the probability b 00 to obtain the state |00 is increased with respect to b 01 . Also during the measurement testing the output ratio, we observe that the output ratios are larger than the input ratios. An asymmetric detection error could be the cause for this observation. Typical errors in our experiment are given by the probability to detect a bright ion (|1 ) with a probability of d B = 0.06 as dark, and a dark ion (|0 ) with a probability of d D = 0.03 as bright. In figure 7 we compare the measured output ratios with the calculated output ratios assuming the above mentioned detection errors and two different detuning errors, ∆ω/Ω ∈ {−0.015, −0.04}.When the experimentally determined detection error is taken into account, the simulation with detuning error ∆ω/Ω = −0.04 does not describe the experimental data well for both one diffusion step and three diffusion steps. The experimental data agree well with a simulation using an average detuning error ∆ω/Ω = −0.015. This indicates that the detuning during these measurements was kept around ∆ω/Ω = −0.015 leading to an average success probability of˜ = 85% for k = 3 diffusion steps compared tõ = 77% for k = 3 during the measurements investigating the scaling (see table. 1). In addition, errors in the preparation of the input states play a role, especially when preparing very large or very small ratios leading to either a 00 or a 01 being close to the preparation accuracy of ≤ 2.5 · 10 −3 .

Conclusion
We have investigated a quantum-enhanced deliberation process of a learning agent implemented in an ion trap quantum processor. Our approach is centered on the projective simulation  #b13  model for reinforcement learning. Within this paradigm, the decision-making procedure is cast as a stochastic diffusion process, that is, a (classical or quantum) random walk in a representation of the agent's memory.The classical PS framework can be used to solve standard textbook problems in reinforcement learning  #b30  #b31  #b32 , and has recently been applied in advanced robotics  #b33 , adaptive quantum computation  #b34 , as well as in the machine-generated design of quantum experiments  #b35 . We have focused on reflecting projective simulation  #b19 , an advanced variant of the PS model based on "mixing", where the Table 1.Experimentally realized success probabilities. Initial theoretical probabilities, , of finding a flagged action within the stationary distribution for various diffusion steps are shown. Success probabilities (˜ ), that are theoretically calculated and experimentally measured, for diffusion steps k = 1-7 are also shown.

Theory
Theory Experiment k a 00 a 01 b 00 b 01˜ b 00 b 01˜ 1 0.1371 0.1371 0.2742 0.4966 0.4966 0.9932 0.449  #b14  0.440  #b14  0.89 (2) (12) deliberation process allows for a quantum speed-up of Q-RPS agents with respect to their classical counterparts. In particular, we have considered the interesting special case of rank-one Q-RPS. This provides the advantage of the speed-up offered by the mixing-based approach, but is also in one-to-one correspondence with the hittingbased basic PS using two-layered networks, which has been applied in classical task environments  #b30  #b31  #b32  #b33  #b34  #b35 . In addition, rank-one Q-RPS can be used to encode all tabular reinforcement learning models including Q-Learning and SARSA by appropriately amending the update and transition rules  #b1 . In a proof-of-principle experimental demonstration, we verify that the deliberation process of the quantum learning agent is quadratically faster compared to that of a classical learning agent. The experimental uncertainties in the reported results, which are in excellent agreement with a detailed model, do not interfere with this genuine quantum advantage in the agent's deliberation time. We achieve results for the cost C for up to 7 diffusion steps corresponding to an initial probability = 0.01 to choose a flagged action. In this sense, our experimental realization of a rank-one Q-RPS decision-making algorithm, which differs from standard amplitude amplification already due to the reflection over the stationary (rather than a uniform) distribution, also provides a comprehensive test of the scaling behaviour that goes beyond previous experiments  #b48  #b49  #b50 , where standard amplitude amplification based on single diffusion steps has been carried out. The systematic variation of the ratio r i between the input probabilities, a 00 and a 01 for flagged actions and the measurement of the ratio r f between the learning agent's output probabilities, b 00 and b 01 as a function of r i shows that the quantum algorithm is reliable independent of the number of diffusion steps.This experiment highlights the potential of a quantum computer in the field of quantum enhanced learning and artificial intelligence. A practical advantage, of course, will become evident once larger percept spaces and general rank-N Q-RPS are employed. Such extensions are, from the theory side, unproblematic given that the modularized nature of the algorithm makes it scalable, following reference  #b38 . An experimental realization of such large-scale quantum enhanced learning will be feasible with the implementation of scalable quantum computer architectures. Meanwhile, all essential elements of Q-RPS have been successfully demonstrated in the proof-ofprinciple experiment reported here.