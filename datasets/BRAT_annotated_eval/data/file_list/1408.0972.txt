A Flexible Iterative Framework for Consensus Clustering

Abstract
A novel framework for consensus clustering is presented which has the ability to determine both the number of clusters and a final solution using multiple algorithms. A consensus similarity matrix is formed from an ensemble using multiple algorithms and several values for k. A variety of dimension reduction techniques and clustering algorithms are considered for analysis. For noisy or high-dimensional data, an iterative technique is presented to refine this consensus matrix in way that encourages algorithms to agree upon a common solution. We utilize the theory of nearly uncoupled Markov chains to determine the number, k , of clusters in a dataset by considering a random walk on the graph defined by the consensus matrix. The eigenvalues of the associated transition probability matrix are used to determine the number of clusters. This method succeeds at determining the number of clusters in many datasets where previous methods fail. On every considered dataset, our consensus method provides a final result with accuracy well above the average of the individual algorithms.

Introduction
Cluster analysis is an important tool used in hundreds of data mining applications like image segmentation, text-mining, genomics, and biological taxonomy. Clustering allows users to find and explore patterns and structure in data without prior knowledge or training information. Hundreds (if not thousands) of algorithms exist for this task but no single algorithm is guaranteed to work best on any given class of real-world data. This inconsistency of performance in cluster analysis is not unique to the clustering algorithms themselves. In fact, the dimension reduction techniques that are expected to aid these algorithms by revealing the cluster tendencies of data also tend to compete unpredictably, and it is difficult to know beforehand which low-dimensional approximation might provide the best separation between clusters. Having many tools and few ways to make an informed decision on which tool to use, high-dimensional cluster analysis is doomed to become an ad hoc science where analysts blindly reach for a tool and hope for the best. Cluster analysis is not the first type of data mining to encounter this problem. Data scientists were quick to develop ensemble techniques to escape the unreliability of individual algorithms for tasks like prediction and classification. Ensemble methods have become an integral part of many areas of data mining, but for cluster analysis such methods have been largely ignored.An additional problem stems from the fact that the vast majority of these algorithms require the user to specify the number of clusters for the algorithm to create. In an applied setting, it is unlikely that the user will know this information before hand. In fact, the number of distinct groups in the data may be the very question that an analyst is attempting to answer. Determining the number of clusters in data has long been considered one of the more difficult aspects of cluster analysis. This fact boils down to basics: what is a cluster? How do we define what should and should not count as two separate clusters? Our approach provides an original answer this question: A group of points should be considered a cluster when a variety of algorithms agree that they should be considered a cluster. If a majority of algorithms can more or less agree on how to break a dataset into two clusters, but cannot agree on how to partition the data into more than two clusters, then we determine the data has two clusters. This is the essence of the framework suggested herein.Our purpose is to address both problems: determining the number of clusters and determining a final solution from multiple algorithms. We propose a consensus method in which a number of algorithms form a voting ensemble, proceeding through several rounds of elections until a majority rule is determined. This allows the user to implement many tools at once, increasing his or her confidence in the final solution.

Consensus Clustering


Previous Proposals for Consensus Clustering
In recent years, the consensus idea has been promoted by many researchers  #b0  #b25  #b21  #b22  #b28  #b43  #b26  #b40  #b9  #b10  #b39  #b36  #b30 . The main challenge to ensemble methods using multiple algorithms is generally identified to be the wide variety in the results produced by different algorithms due to the different cluster criteria inherent in each algorithm. Thus any direct combination of results from an ensemble will not often generate a meaningful result  #b32  #b18 .Most often the consensus problem has been formulated as an optimization problem, where the optimal clustering, C * , minimizes some relative distance metric between C * and all of the clusterings C i in the ensemble. There are many ways to define the distance between two clusterings, for example one could take the minimum number of elements that need to be deleted for the two partitions to become identical  #b13 . Using d(C 1 , C 2 ) to denote some measure of distance between two different clusterings, we'd writeC * = arg min C N i=1 d(C i , C ).(1)This problem is known as the median partition problem in the literature and dates back to the 1965-'74 work of Régnier ([13]) and Mirkin ([25])  #b10 . Alternatively, some authors use a relative validity metric like the normalized mutual information N M I(C i , C ) in place of a distance function and attempt to maximize the objective function in Eq. 1  #b39 . The median partition problem was shown by Krivanek and Moravek, and also by Wakabayashi, to be NP-complete  #b10 , but many heuristics have since been proposed to find approximate solutions  #b39  #b10  #b0  #b26 . We believe that these methods are bound to suffer because each clustering in the ensemble is given equal importance. Suppose we had 4 perfect clusterings and 1 terribly inaccurate clustering. These methods would not take into account the fact that the majority of the algorithms share 100% agreement on a perfect clustering, and instead may shift the optimal clustering away from perfection towards inaccuracy. Thus, we feel that the optimization in Eq. 1 leads to a "middle-of-the-road" solution or a compromise between algorithms, rather than a solution of "agreement" or consensus. In our method, the clustering algorithms act as a voting ensemble and continually move through a series of elections until a desired level of consensus is reached. Additionally, we introduce a parameter of intolerance, which allows the user to impose a level of agreement that must be reached between algorithms in order to accept a cluster relationship between objects.

The Consensus Matrix
To begin, we introduce some notation. Since consensus methods combine multiple solutions from multiple algorithms (or multiple runs of the same algorithm), we start with a cluster ensemble. A cluster ensemble, C = {C 1 , C 2 , . . . , C N }, is a set of N clusterings of the n data objects x 1 , x 2 , . . . , x n . That is, each clustering C j in the ensemble is a k j -way partition of the data, composed of individual clusters,C j = [C 1 , C 2 , . . . , C kj ],where the number of clusters k j in each clustering may be allowed to vary. In Figure 1, we illustrate a simple example with N = 3 clusterings. The information from a cluster ensemble is then recorded in a consensus matrix.Definition 1 (The Consensus Matrix). Given a cluster ensemble,  of n data points x 1 , x 2 , . . . , x n , the consensus matrix M is an n × n matrix such that M(C ) ij = # of times object x i was placed in the same cluster as x j in the ensemble C .C = {C 1 , C 2 , . . . , C N },C 1 = { {1, 2, 3, 4} {5, 6, 7, 8, 9} {10, 11}} k 1 = 3 C 2 = { {1, 2, 3, 4} {5, 7} {6, 8, 9} {10, 11}} k 2 = 4 C 3 = { {1, 2} {3, 4} {5, 6, 8} {7, 9} {10, 11}}One might prefer to think of the consensus matrix as the sum of individual adjacency matrices for each clustering in the ensemble. For a given clustering C i we could define an adjacency matrix, A i asA ij = 1 if object x i was clustered with x j 0 otherwiseThen the consensus matrix M would be the sum of the adjacency matrices of each clustering in the ensemble:M(C ) = N i=1 A i .As an example, the consensus matrix for the ensemble depicted in Figure 1 is given in Figure 2.  The consensus matrix from Figure 2 is very interesting because the ensemble that was used to create it had clusterings for various values of k. The most reasonable number of clusters for the colored circles in Figure 1 is k * = 3. The 3 clusterings in the ensemble depict k 1 = 3, k 2 = 4, and k 3 = 5 clusters. However, the resulting consensus matrix is clearly block-diagonal with k * = 3 diagonal blocks! This is not an isolated phenomenon, in fact it is something we should expect from our consensus matrices if we labor under the following reasonable assumptions:B B B B B B B B B B B B B B B @ 1 C C C C C C C C C C C C C C C A• If there are truly k distinct clusters in a given dataset, and a clustering algorithm is set to findk > k clusters, then the k "true" clusters will be broken apart into smaller clusters to makek total clusters.• Further, if there is no clear "subcluster" structure, meaning the original k clusters do not further break down into meaningful components, then different algorithms will break the clusters apart in different ways.This block-diagonal structure is the subject of Section 3.3.

Benefits of the Consensus Matrix
As a similarity matrix, the consensus matrix offers some benefits overs traditional approaches like the Gaussian or Cosine similarity matrices. One problem with these traditional methods is the curse of dimensionality: In high dimensional spaces, distance and similarity metrics tend to lose their meaning. The range of values for the pairwise distances tightens as the dimensionality of the space grows, and little has been done to address this fact. In Figure 3 we show the distribution of similarity values for the same 1 million entries in a consensus matrix compared to the cosine similarity matrix. As you can see, the consensus approach allows a user to witness some very high levels of similarity in high-dimension data, whereas the cosine similarities have a much smaller range. The dataset, which is more formally introduced in Section 3.2, is the Medlars-Cranfield-CISI document collection (≈ 4, 000 documents)  #b17 . Such contrast is typical among high-dimensional datasets.  An additional benefit is that entries in the consensus matrix have depth. By this, we mean that they result from summing entries in adjacency matrices output by individual clustering algorithms, so more information is available about the meaning of each similarity value. The cosine of the angle between two data vectors x i and x j may tell us something about their correlation, but knowing, for instance that these two objects were clustered together by all algorithms withk ≤ 5, by some algorithms with 6 ≤k ≤ 7, and never whenk ≥ 7, provides a depth of insight not previously considered. While we do not use this information explicitly in our analysis, it may be beneficial in practical research.The greatest benefit of using a consensus matrix for clustering is that it provides superior information about clustering within the data. This has been demonstrated time and again in the literature  #b22  #b34  #b35  #b11  #b25  #b40  #b21  #b39  #b14  #b30 . We add to the pile of evidence for this statement with the experiments in this paper.

Iterative Consensus Clustering (ICC)
The consensus approach outlined herein is based on the work in  #b21  #b40  #b33  #b22  #b11  where the consensus matrix is treated as similarity matrix and used as input to a clustering algorithm to reach a final solution. In  #b21  the authors suggest using many runs of the k -means algorithm, initialized randomly, to build the consensus matrix and then using a spectral clustering method, such as normalized cut (NCut)  #b38 , to determine a final solution. In  #b40  #b14  #b11 , the approach is again to build a consensus matrix using many runs of the k -means algorithm and then to cluster the consensus matrix with one final run of k -means . In  #b22  a consensus matrix is formed via k -means and then used as input to the stochastic clustering algorithm (SCA). While all these methods provide better results than individual algorithms, they still rely on a single algorithm to make both the consensus matrix and the final decision on cluster membership.Our method uses a variety of algorithms, rather than just k -means , to create the initial cluster ensemble. In addition, each algorithm is paired with different dimension reductions because it is often unclear which dimension reduction gives the best configuration of the data; each lower dimensional representation has the potential to separate different sets of clusters in the data. In this way, we essentially gather an initial round of votes for whether or not each pair of objects (x i , x j ) belong in the same cluster. These votes are collected in a consensus matrix M as defined in Definition 1.

Clustering Algorithms Used for Ensembles
The experiments contained herein use a number of different clustering algorithms. The details of these popular algorithms are omitted due to space considerations but we refer the reader to the following resources:Data Clustering Algorithms 1. Spherical k-means (solution with lowest objective value from 100 runs, randomly initialized)  #b31  2. PDDP: Principal Direction Divisive Partitioning  #b2  3. PDDP-k-means: k-means with initial centroids provided by PDDP clusters  #b34  4. NMFcluster: k dimensional Nonnegative Matrix Factorization for Clustering  #b37  Graph Clustering Algorithms (Requiring a similarity matrix)1. PIC: Power Iteration Clustering  #b8  2. NCUT: Normalized Cuts according to Shi and Malik  #b38  3. NJW: Normalized Cuts according to Ng, Jordan, and Weiss  #b27  Each algorithm in our ensemble is assumed to be reasonable, making good choices on cluster membership most of the time. It is inevitable that each of the clustering algorithms will make mistakes, particularly on noisy data, but it is assumed that rarely will the majority of algorithms make the same mistake. To account for this error, we introduce an intolerance parameter, τ , for which entries in the consensus matrix M ij < τ N will be set to zero. In other words, τ is the minimum proportion of algorithms that must agree upon a single cluster relationship (x i , x j ) in order to keep those "votes" in the consensus matrix.After the initial consensus matrix is formed, we use it as input to each of the clustering algorithms again. Essentially we start a debate between algorithms, asking each of them to use the collective votes of the ensemble to determine a second solution. Again these solutions are collected in a consensus matrix and the process repeats until a simple majority of algorithms agree upon one solution. Once the majority of algorithms have chosen a common solution, we say the algorithms have reached consensus and call that resulting solution the final consensus solution. This process is illustrated in the flow chart in Figure 4. 

Example with Medlars-Cranfield-CISI Text Collection
To illustrate the effectiveness of this procedure, we consider a combination of 3 text datasets used frequently in the information retrieval literature. For simplicity, we assume the number of clusters is known a priori. In Section 3.3 this information will be extracted from the data. The combined Medlars-Cranfield-CISI (MCC) collection consists of nearly 4,000 scientific abstracts from 3 different disciplines. These 3 disciplines (Medlars = medicine, Cranfield = aerodynamics, CISI = information science) form 3 natural clusters in the data  #b1  #b17 . The document data is high-dimensional with m ≈ 11, 000 features (words). As a result, clustering algorithms tend to run slowly on the raw data. Thus, we reduce the dimensions of the data using 3 preferred algorithms:

Nonnegative Matrix Factorization (NMF) by Alternating Constrained Least
Squares (ACLS)  #b20  2. Singular Value Decomposition (SVD)  #b7  #b5  3. Principal Components Analysis (PCA)  #b15  One should realize that PCA is, in fact, a Singular Value Decomposition of Data under z-score normalization. However, in practice, these two decompositions generally provide quite different results, particularly for high-dimensional data.For each dimension reduction technique, the number of features is reduced from m = 11, 000 to r = 5, 10, and 20 creating a total of 9 input data sets. On each input dataset, 3 different clustering methods were used to cluster the data:1. k-means 2. PDDP

PDDP-k-means
The accuracy (proportion of documents classified correctly  #b34 ) of each algorithm on each data input are given in Table 1 The accuracy of the results ranges from 61% (>1,500 misclassified) to 98% (78 misclassified). A reasonable question one might ask is this: Why not choose the solution with the lowest k -means objective value? The biggest problem with this boils down to the curse of dimensionality: the distance measures used to compute such metrics lose their meaning in high-dimensional space  #b34  #b30 . The only comparison we could make between clusterings would be with the full dimensional data and, surprisingly, the objective function values for the minimum accuracy solution is approximately equal to the maximum accuracy solution! Other internal metrics, like the popular Silhouette coefficient  #b31  suffer from the same problem. One must be very careful when attempting to compare high-dimensional clusterings with such metrics.Our suggestion is instead to compile the clusterings from Table 1 into a consensus matrix, cluster that consensus matrix with multiple algorithms, and repeat that process until the majority of the algorithms agree upon a solution. This can be done with or without dimension reduction on the consensus matrix. For simplicity, we'll proceed without reducing the dimensions of the consensus matrix, but we will include an additional clustering algorithm, NMFCluster, which was not well suited for the analysis on the low-dimensional representations in Table 1. Table 2 provides the accuracy of these 4 clustering algorithms on the consensus matrices through iteration. Boxes are drawn around values to indicate a common solution chosen by algorithms. A final consensus solution is found in the third iteration with 3 of the 4 algorithms agreeing upon a single solution. The accuracy of this final consensus solution is much greater than the average of all the initial clustering results in Table 1. Such a result is typical across all datasets considered.  

Perron Cluster Analysis
In Section 2.2 an example was given that alluded to our methodology for determining the number of clusters. We approach this task using Perron-cluster methodology  #b22  #b29  #b6  #b35  #b34  on the consensus similarity matrix. Perroncluster analysis involves the examination of eigenvalues of a nearly uncoupled or nearly completely reducible Markov chain. We consider the transition probability matrix P of a random walker on the graph defined by the consensus matrix M:P = D −1 Mwhere D is a diagonal matrix containing the row sums of M: D = diag(Me). According to our assumptions in Section 1, there exists some simultaneous permutation of rows and columns of our consensus matrix such that the result is block-diagonally dominant. By this we essentially mean that P (after row and column permutation) is a perturbation of a block-diagonal matrix B, such thatP = B + E =         B 11 E 12 E 13 . . . E 1k E 21 B 22 E 23 . . . E 2k E 31 E 32 B 33 . . . E 3k . . . . . . . . . . . . . . . E k1 E k2 E k3 . . . B kk        (2)where the off-diagonal blocks, E ij , are much smaller in magnitude than the the diagonal blocks. In fact, the entries in the off-diagonal blocks are small enough that the diagonal blocks are nearly stochastic, i.e. B ii e ≈ 1 for i = 1, 2, . . . , k.A transition probability matrix taking this form describes a nearly uncoupled or nearly completely reducible Markov Chain. The degree to which a matrix is considered nearly uncoupled is dependent on one's criteria for measuring the level of coupling (interconnection) between the aggregates (clusters of states) of the Markov chain  #b29  #b23  #b42 . In  #b23 , the deviation from complete reducibility is defined as follows: P k1 P k2 P k3 . . . P kk         the number δ = 2 max i P i * ∞ ,where P i * represents a row of blocks, is called the deviation from complete reducibility.It is important to point out that the parameter δ, or any other parameter that measures the level of coupling between clusters in a graph (like those suggested in  #b29  #b42 ) cannot be computed without prior knowledge of the clusters in the graph. Such parameters are merely tools for the perturbation analysis, used to present the following important fact regarding the spectrum of blockdiagonally dominant stochastic matrices  #b29  #b16  #b22  #b23  #b6  #b3 :  #b29  #b23  #b6  #b22  ). For sufficiently small δ = 0, the eigenvalues of P(δ) are continuous in δ, and can be divided into 3 parts:

Fact 1 (The Spectrum of a Block-Diagonally Dominant Stochastic Matrix
1. The Perron root, λ 1 (δ) = 1, 2. a cluster of k − 1 eigenvalues λ 2 (δ), λ 3 (δ), . . . , λ k (δ) that approach 1 as δ → 0 (known as the Perron cluster), and 3. the remaining eigenvalues, which are bounded away from 1 as δ → 0.In order to recover the number of blocks (clusters), we simply examine the eigenvalues of the stochastic matrix P = D −1 M and count the number of eigenvalues in the Perron cluster, which is separated from the remaining eigenvalues by the Perron gap, the largest difference between consecutive eigenvalues λ k and λ k+1 . The size of this gap is determined by the level of uncoupling in the graph, with larger gaps indicating more nearly uncoupled structures  #b22 .

Perron Cluster Analysis for Consensus Matrices
To build the consensus similarity matrix, we use one or more algorithms to cluster the data into a varying number of clusters. We set the algorithm(s) in our ensemble to findk 1 ,k 2 , . . . ,k J clusters in the data. The choice of the values k i is for the user, but we suggest choosing these values such that they might overestimate the number of clusters but remain less than √ n. We then construct the consensus similarity matrix M from the resulting clusterings, examine the eigenvalues of the transition probability matrix P = D −1 M, and count the number of eigenvalues near λ 1 = 1 by locating the largest gap in the eigenvalues.It is sometimes helpful in this phase of the algorithm to consider the use of an intolerance parameter τ in the construction of the consensus matrix because we may have allowed the algorithms to partition the data into fewer clusters than actually exist in the data. We return to the Medlars-Cranfield-CISI (MCC) collection discussed in Section 3.2 as an example where traditional SSE plots generally fail to provide a clear picture of how many clusters may be optimal  #b34 . Before discussing the results of our method, we first look at the eigenvalues of the transition probability matrix that would result from using cosine as a measure of similarity (this is the most common similarity matrix used for text collections in the spectral clustering literature). The largest eigenvalues of this 3891×3891 matrix are displayed in Figure 5. The plot shows only one eigenvalue in the Perron cluster and therefore, as with the other methods discussed in  #b34 , no information is gathered about the number of clusters in the data. Now we look at the eigenvalues of the transition probability matrix associated with a consensus similarity matrix. This consensus matrix was built from an ensemble of various algorithms paired with different dimension reductions and different levels of dimension reduction. All 3 of the authors' preferred dimension reduction techniques (NMF, PCA, SVD) were used to reduce the dimensions of the data to r = 5, 10, and 20 dimensions, creating a total of 10 data inputs (including the raw high-dimensional data) for each clustering algorithm. Three different clustering methods were used to cluster each data input: PDDP, spherical k -means initialized randomly, and spherical k -means initialized with centroids from the clusters found by PDDP. Counting every combination of dimension reduction and clustering procedure, the ensemble had 30 algorithms at work. For each of the 30 algorithms,k = 2, 3, 4, . . . , 10 clusters were determined and the resulting 270 clusterings were collected in the consensus matrix M. We show in Figure 6 side-by-side images showing the eigenvalues of the transition probability matrix associated with the consensus similarity matrix with and without use of the intolerance parameter τ . Particularly with text and other high-dimensional data, this intolerance parameter, by removing extraneous connections in the consensus graph, encourages a nearly uncoupled structure in the clustering results  #b35  #b34 . This uncoupling effect, even for conservative values of τ , is clearly identified by the widened gap after λ 3 in the eigenvalue graphs. However, both eigenvalue plots in Figure 6, with and without the intolerance parameter, reveal a Perron-cluster containing k * = 3 eigenvalues, as desired.

Refining the Consensus Matrix through Iteration
We have seen with the Medlars-Cranfield-CISI collection that the consensus matrix can provide better clustering information than the raw data. Therefore it seems reasonable that iterating the consensus process using multiple values of k may refine the consensus matrix in way that minimizes or eliminates elements outside of the diagonal blocks, revealing a more identifiable Perron cluster. This is most often the case. Iterating the clustering process has an uncoupling effect on the consensus matrix  #b35 . In Figure 7a we show a matrix heat-map of a consensus matrix formed by clustering 700 documents (100 of each in 7 clusters) intok = [10, 11, . . . , 20] clusters with 4 different algorithms and 3 different dimension reductions. Red pixels indicate high levels of similarity while yellow pixels represent lower levels of similarity. There is a considerable amount of noise outside of the diagonal blocks. This consensus matrix was then clustered by the same 4 algorithms and 3 dimension reductions, again intok = [10, 11, . . . , 20], and a heat map of the resulting consensus matrix (iteration 2) is shown in Figure 7b. It is easy to see the refinement of the clusterings by the reduction of noise outside the diagonal blocks. The difference is also clearly shown in the eigenvalue plots displayed in Figure 8. For high-dimensional or noise-ridden data, we suggest this iterated procedure in determining the Perron gap, because spurious cluster relationships will often couple the clusters together.  In Section 4 the flexibility of our approach is demonstrated using a comprehensive example on another benchmark dataset. The Iterative Consensus Clustering Framework is summarized in Algorithm 1.  The Newsgroups 6 (NG6) dataset is a subset from the infamous "Twenty Newsgroups" text corpus that has become a common benchmark for cluster analysis. The Twenty Newsgroups corpus consists of approximately 20,000 news documents (web articles) partitioned somewhat evenly across 20 different topics. The collection of these documents is attributed to Ken Lang, although it is never mentioned explicitly in his original paper  #b19 . It is now publicly available via the web  #b4 . To create the NG6 collection, 300 documents from 6 topics were randomly selected, resulting in a term-document matrix with 11,324 terms and 1800 documents. Our initial consensus matrix (used to determine the number of clusters) was formed using only the k -means algorithm (randomly initialized), performed on the raw data and 3 dimension reductions. To determine an appropriate rank for dimension reduction we followed convention by observing the screeplot (plot of the singular values) for the NG6 data matrix. The screeplot shown in Figure 9, indicates our decision to reduce the dimensions of the data from m = 11, 324 to r = 10.The dimensionality of the data was then reduced using our 3 preferred dimension reduction algorithms: performed on the reduced data, this phase of the process proceeds extremely fast. The result was a total of 330 clusterings which contributed to the initial consensus matrix. An intolerance parameter was not used for this initial matrix. The next step in our analysis is to examine the eigenvalues of the transition probability matrix associated with this initial consensus matrix. The Perron cluster in Figure 10 contains 5 eigenvalues for initial consensus matrix. As discussed in Section 3.4 there are two adjustments one might consider to further explore the cluster structure.1. Implement an intolerance parameter τ to distinguish the Perron cluster 2. Iterate the consensus procedure using the initial consensus matrix as input (no dimension reduction was used here).In Figure 11 the results of both adjustments are shown. In either scenario, a Perron cluster with k * = 6 eigenvalues becomes clear. When the iterative procedure is repeated once more, the number of eigenvalues in the Perron cluster does not change. For the purposes of comparison, we present in Figure 12 the eigenvalues of the transition probability matrix associated with the Cosine similarity matrix, which is commonly used to cluster document datasets with spectral algorithms. No information regarding the number of clusters is revealed by the Perron cluster, which contains only a single eigenvalue.  Tables 3, 4 and 5 demonstrate the superiority of the consensus matrices to traditional data inputs. The accuracies of certain algorithms increase by as much as 60% when the consensus matrix is used as input compared with the raw data. The average accuracies of all the algorithms also increases dramatically. One interesting fact to point out is that in this example, the algorithms perform quite poorly on the NMF dimension reduction. Even though these results are contained in the consensus matrices, the nature of the process is able to weed out these poor results. The authors have experimentally discovered time and again that the ICC process is not sensitive to a small number of poor results contained in the cluster ensemble. When it comes to clustering the ensemble, such results are essentially "voted out."

Algorithm
Raw Data PCA r = 10 SVD r = 10 NMF r    

NG6 Data: Determining a Final Solution
Our second step in the ICC process, once the number of clusters has been determined via the eigenvalue analysis, is to iterate the consensus procedure using the determined number of clusters in an attempt to witness agreement between algorithms. Combining the clustering results of each algorithm on Consensus B (Column 3 in Table 4 and Column 4 in Table 5) into another consensus matrix, we run through a second round of "voting". The matrix Consensus B was chosen because the eigenvalue gap was larger, although using Consensus matrix A provides a similar result. The accuracies of the resulting solutions are given in  We began our analysis with a collection of documents and algorithms -both for dimension reduction and for clustering. Traditional tools for determining the number of clusters were not successful. An analyst, having somehow determined the number of clusters and attempting to cluster this data with the given set of tools had a chance of finding a solution with accuracy ranging from 18% to 99%. If that analyst had chosen the best dimension reduction algorithm (PCA) for this particular dataset (a task for which there are no hard and fast guidelines), the accuracy of his/her solution may have been between 77% and 99%. Internal cluster validation metrics like the k -means objective function would not have been much help in choosing between these solutions, as such measures are difficult to compare on high-dimensional data. However, by using all of the tools at our disposal in the Iterative Consensus Clustering Framework, we found that the clustering algorithms worked out their differences constructively -finally settling down on a solution with the highest level of accuracy achieved by any of the algorithms independently.

Conclusion
Herein we have presented a flexible framework for combining results from multiple clustering algorithms and/or multiple data inputs. Not only does this framework provide the user with an above average clustering solution, it also contains a practical exploratory procedure for determining the number of clusters.We have discovered that consensus matrices built using multiple algorithms and multiple values for the number, k, of clusters will often allow users to estimate an appropriate number of clusters in data by determining the maximum number of clusters for which algorithms are likely to agree on a common solution. We have provided several examples to show how this approach succeeds at determining the number of clusters in datasets where other methods fail. When the initial consensus matrix does not provide this information, it can be refined through the use of an intolerance parameter or iteration to get a clearer picture of how many clusters the algorithms might be able to agree upon.While the consensus matrix itself is not a new idea, the practice of using multiple algorithms and dimension reductions together to create the matrix had not previously been explored, nor had varying the number of clusters for the purposes of approximating k. Our approach to building the consensus matrix is novel and improves clustering results from nearly every clustering algorithm on all datasets considered. This consensus matrix has several advantages over traditional similarity matrices as discussed in Section 2.2.1.The ICC Framework encourages clustering algorithms to agree on a common solution to help escape the unreliability of individual algorithms. While previous consensus methods have aimed to average cluster solutions in one way or another, ours is the first to emphasize agreement between clustering algorithms. After seeing some of the results of the individual algorithms in our ensemble, it should be clear that an average solution could be very poor indeed. Rather than deciding each clustering is equally valid, we simply sum the number of times a cluster relationship was made between two points and let the algorithms decide whether this sum is considerable enough to draw those points together, or whether it might be more reasonable to dissolve the connection in favor of others. This framework iteratively encourages algorithms to agree upon a common solution because the value of the similarity metric reflects the level of algorithmic agreement at each step. Thus, through iteration, cluster relationships upon which the algorithms do not agree are abandoned in favor of relationships with higher levels of agreement.