Power Grid Defense Against Malicious Cascading Failure

Abstract
An adversary looking to disrupt a power grid may look to target certain substations and sources of power generation to initiate a cascading failure that maximizes the number of customers without electricity. This is particularly an important concern when the enemy has the capability to launch cyber-attacks as practical concerns (i.e. avoiding disruption of service, presence of legacy systems, etc.) may hinder security. Hence, a defender can harden the security posture at certain power stations but may lack the time and resources to do this for the entire power grid. We model a power grid as a graph and introduce the cascading failure game in which both the defender and attacker choose a subset of power stations such as to minimize (maximize) the number of consumers having access to producers of power. We formalize problems for identifying both mixed and deterministic strategies for both players, prove complexity results under a variety of different scenarios, identify tractable cases, and develop algorithms for these problems. We also perform an experimental evaluation of the model and game on a real-world power grid network. Empirically, we noted that the game favors the attacker as he benefits more from increased resources than the defender. Further, the minimax defense produces roughly the same expected payoff as an easy-to-compute deterministic load based (DLB) defense when played against a minimax attack strategy. However, DLB performs more poorly than minimax defense when faced with the attacker's best response to DLB. This is likely due to the presence of low-load yet highpayoff nodes, which we also found in our empirical analysis.

INTRODUCTION
Rapid cascading failure in a power grid caused by a succession of overloading lines can lead to very large outages, as observed in the United States in 2003  #b0 . Studies on cascading failure  #b6  #b7  #b15  have illustrated that such a failure can be initiated with only a small number of initial node failures. Further, power grid infrastructure is often particularly vulnerable with respect to cyber-security due to a variety of issues, including the use of legacy and proprietary computer hardware and software  #b25 .In this paper, we extend the work on cascading failure models to a two-player game where an attacker attempts to create a cascade that maximizes the number of customers without power while the defender defends key nodes to avoid a major outage. In Section 2, we introduce an extension to the failure model of  #b7  to not only consider the attacker and defender, but also the different types of nodes in the power grid (i.e. power generation vs. power consumers). In Section 3, we explore the computational complexity of finding deterministic best-response strategies for the attacker and defender under several different scenarios depending on the relative number of resources each player has and whether the opponent has a deterministic or mixed strategy. Here we found that, in general, these problems are NP-hard, though we do identify some tractable cases. In Section 4, we explore heuristic algorithms for finding determinsitic "best responses" as well as minimax mixed strategies. We introduce a "high-load" strategy for defense (based on the observations of  #b7 ), greedy heuristics for deterministic strategies, and a double-oracle approach based on  #b14  for finding a mixed strategy. In Section 5 we perform experiments on a real-world dataset of a power grid  #b19  and find that this game seems to favor the attacker as he benefits more from increased resources than the defender. Further, our experiments revealed that the minimax defense produces roughly the same expected payoff as an easy-to-compute deterministic load based (DLB) defense when played against a minimax attack strategy, though the load based defense does more poorly than minimax when faced with the attacker's best response to DLB. This is likely due to the presence of low-load yet high-payoff nodes, which we also found in our empirical analysis of the model. Finally, related work is discussed in Section 6.

TECHNICAL PRELIMINARIES
Consider a power-grid network modeled as an undirected graph G = (V, E). Let Vsrc, V ld ⊆ V be source (producers of power) and load (consumers of power) on the network. We shall use the notation discV ld ,Vsrc (G) to denote the number of nodes in V ld which are not connected to any node in Vsrc in graph G. Let G be the set of all subgraphs of G. For a given node i, let NG(i) be the set of nodes in Vsrc − {i} that are closest to that node (based on path length in G). From this, we define edge load (similar to the idea of edge betweenness  #b24 ). Definition 2.1 (Edge Load). Given edge ij ∈ E, the edge load, loadG(ij) is defined as follows:loadG(ij) = t∈V ld s∈N G (t) σG(s, t|ij) |NG(t)| σG(s, t) ,where σG(s, t) is the number of shortest paths between s, t ∈ V and σG(s, t|ij) is the subset of these paths that pass through edge ij ∈ E.Starting from initial network G0 = (V0, E0) we use cij to denote the capacity edge ij ∈ E0. In a real-world setting, we would expect to have this information. However, in this paper, we use the following proxy (similar to  #b7 ).cij(G0) = (1 + α)loadG 0 (ij)where α is a non-negative real that specifies the excess capacity available on that line. We shall refer to α as the capacity margin. We assume that an edge ij ∈ E fails inG = (V, E), with E ⊂ E0, if loadG(ij) > cij(G0).Once nodes (and adjacent edges) in V0 are removed from G0, this results in a change of shortest paths between sources and loads, hence more edges will potentially fail. This cascading power failure is modeled by a "failure" operator denoted with F (based on the failure model of  #b7  -though we note that our model is a new contribution due to the consideration of source and load nodes) that maps networks to networks. We define it as follows.Definition 2.2 (Failure Operator). The failure operator, F : G → G, is defined as follows:F((V, E)) = (V, {ij ∈ E|load (V,E) (ij) ≤ cij(G0)})Intuitively, one application of the failure operator removes all edges that have exceeded their maximum capacity. We can define multiple applications of this operator as follows:F i (G) = G if i = 0 F(F i−1 (G)) otherwiseClearly, there must exist a fixed point that is reached in no more than |E| + 1 applications of F. Hence, we shall use the following notation:F * (G) = F i (G) s.t. F i (G) = F i+1 (G)We now consider two agents: an attacker and a defender. The attacker's strategy is to destroy nodes (and their adjacent edges) in an effort to cause a cascading failure that maximizes the number of load nodes (V ld ) that are disconnected from all source nodes (Vsrc). Meanwhile, the defender's strategy is to harden certain nodes such that the attacker is unable to destroy them -though these nodes can be taken offline as a result of the cascading failure 1 . The attacker can destroy ka nodes while the defender can harden k d nodes. Thus the strategy space of both the attacker and defender consists of all subsets Va, V d ⊆ V of size |Va| ≤ ka (|V d | ≤ k d respectively). We denote these strategy spaces by AT K (DEF respectively), i.e., if we allow the attacker to consider all strategies of size ka or less we have:AT K = {S ∈ 2 V : |S| ≤ ka}We now have all of the components to define the payoff function.Definition 2.3 (Payoff Function). Given initial net- work G = (V, E) with edge capacities cij(G), attack (defend) strategy Va(V d ), the payoff function is defined by pG(Va, V d ) = discV ld ,Vsrc (F * ((V − (Va − V d ), E)).Now, in reality, the defender will have real-world limitations on the number of nodes (i.e. substations) he may harden. For instance, with regard to smart grid defense, applying the most up-to-date patches on all systems may not be realistic as it could potentially require system down-timeaffecting customer service. Further, it would also likely not make sense for the defender to only harden certain nodes and ignore others. Hence, it is reasonable to consider a situation where the defender can only harden certain nodes against attack (and may do so probabilistically -i.e. applying hardware or software updates according to a schedule). Therefore, we study mixed strategies. Such strategies will be specified by probability distributions Pra, Pr d for the attacker and defender respectively. We shall denote the number of strategies assigned a non-zero probability as |Pra|, |Pr d |. We can define expected payoff as follows.Definition 2.4 (Expected Payoff). Let Pra, Pr d be probability distributions over all subsets of V of sizes ka (resp. k d ) or less. These probability distributions correspond to a mixed strategy for the attacker and defender respectively. Hence, given such probability distributions, the expected payoff can be computed as follows:ExP(Pra, Pr d ) = Va∈2 V Pra(Va) V d ∈2 V Pr d (V d )pG(Va, V d )In this work our goal is to find the minimax strategy for the defender -that is the mixed strategy for the defender that minimizes the attacker's maximum expected payoffas well as deterministic "best responses" for both players given the other's strategy.

COMPUTATIONAL COMPLEXITY
In this section, we analyze the computational complexity of determining the best response for each of the agents to a strategy of its opponent. First, we shall discuss the case for finding a deterministic strategy for the defender and attacker. Then we shall explore the computational complexity of finding a mixed strategy. We summarize our complexity results in Table 3. We frame the formal combinatorial problem of finding the best-response for the defender as follows:Grid-Defend Deterministic Best Response (GD-DBR) INPUT: Network G = (V, E), attacker mixed strategy Pra (where each option is of size no greater than ka), natural number k d , real numbers X, α OUTPUT: "Yes" if there exists a set V d ⊆ V s.t. |V d | ≤ k d and Va∈AT K Pra(Va)pG(Va, V d ) ≤ X and "no" otherwise.We shall study this case under several conditions. The first, and easiest case is when Pra = 1 (the attacker uses a deterministic strategy) and ka ≤ k d .Proposition 3.1. When ka ≤ k d and |Pra| = 1 then GD-DBR is solvable in polynomial time.Proof. As the attacker plays only one strategy and the defender can defend at least as many nodes as are being attacked, the defender simply defends all the nodes in the attacker's strategy.However, even with |Pra| = 1, the problem becomes NPhard in the case where ka > k d .Theorem 1. When ka > k d then GD-DBR is NP-complete, even when |Pra| = 1 and X is an integer.Proof. Clearly, checking if a given deterministic defender strategy V d meets the requirements of the "output" of GD-DBR can be completed in polynomial-time, providing membership in the class NP.For NP-hardness consider the known NP-hard "set cover" problem  #b10  that takes as input a natural number k, set of elements S = {s1, . . . , sn}, family of subsets of S, H = {h1, . . . , hm} and returns "yes" if there is a k-sized (or smaller) subset of H s.t. their union is equal to S. We can embed Set Cover into an instance of GD-DBR in polynomial time with the following embedding: set ka = |H|, k d = k, X = 0, α = |H| + |S|, create G = (V, E) as follows:• For each h ∈ H create a node v h and for each s ∈ S create node vs• If s ∈ h, create edge (v h , vs), for each ij ∈ E • Set Vsrc = {v h |h ∈ H}, V ld = {vs|s ∈ S}, Va = V − V ldSuppose, by way of contradiction (BWOC), that there is a "yes" answer to Set Cover but a "no" answer to GD-DBR. Consider set H a subset of H that is the certificate for Set Cover and the corresponding set V = {v h |h ∈ H } in the instance of GD-DBR. Suppose the defender utilizes this as a strategy. The attacker then effectively attacks the set V − V ld −V . Note that as the graph is bi-bipartite, this does not cause any cascading failure. By the construction, each load node must be connected to a source node, hence the number of offline load nodes is X. This gives us a contradiction.Suppose, BWOC, that there is a "yes" answer to GD-DBR but a "no" answer to the corresponding instance of Set Cover. Let V be the certificate for GD-DBR. We note that any element of V ld ∩ V in V can be replaced by a neighboring node from Vsrc without changing the size of this set and that such a set would still allow for all load nodes to remain online, let V be this new set. Consider the set {h|v h ∈ V }. By the contra-positive of the claim, this cannot be a cover of all elements of S. However, this would also imply that there is some element vs ∈ V ld that is not connected to V meaning that it fails (as the attacker successfully destroys all its neighbors). This means that the adversary has a payoff greater than 0 (which is what X was set to) -hence a contradiction.Hence, the presence of a more advantageous attacker is a source of complexity. The next question would be if the attacker's behavior, i.e. deterministic vs. non-deterministic, also affects the complexity of the problem, even if the defender has the advantage. First, let us examine the case where the attacker has a mixed strategy with ka = 1.Proposition 3.2. When ka = 1 then GD-DBR is solvable in polynomial time (w.r.t. |Pra|), even when |Pra| ≥ 0.Proof. In this case, we can re-write the payoff functionas pG({v}, V d ) = 0 if v ∈ V d and pG({v}, V d ) = pG({v}, ∅) otherwise. Let V = ∪{Va ∈ AT K|Pra(Va) > 0}.Note that each element of V is also a strategy the attacker plays with a non-zero probability (as the attacker only plays singletons). Hence, the expected payoff can be re-written as v∈V −V d Pra({v})pG({v}, ∅). Therefore, the best a defender can do is defend the top k d nodes in V where Pra({v})pG({v}, ∅) is the greatest -which can be easily computed in polynomial time and allows us to determine the answer to GD-DBR.However, if the defender is playing a mixed strategy with ka > 1, then the problem again becomes NP-complete.Theorem 2. When |Pra| > 1 and ka > 1, GD-DBR is NP-complete, even when k d > ka and X is an integer.Proof. NP-completeness mirrors that of Theorem 1. For NP-hardness, we again consider a reduction from set-cover (defined in the proof of Theorem 1. The embedding can again be performed in polynomial time as follows: set ka = maxs∈S |{h|s ∈ h}|, set k d = k, X = 0, α = |H| + |S|, create G = (V, E), Vsrc, and V ld as per the construction in Theorem 1. We then set up the mixed strategy as follows: for each s ∈ S, let V s a = {h|s ∈ h} and Pra(V s a ) = 1/|S|. Suppose, BWOC, that there is a "yes" answer to set cover and a "no" answer to the instance of GD-DBR. Consider set cover solution H * and set V d = {v h |h ∈ H * }. Note that V d meets the cardinality requirement. Note that by the construction, a source node becomes disconnected only if all of the load nodes connected to it are attacked, hence there is some node in the set V ld that is totally disconnected under at least one attacker strategy -let vs be this node. However, as set H * covers S, then regardless of the attacker strategy, there is always some node v h that is connected and never attacked (giving the attacker a payoff of zero) -hence a contradiction.Suppose, BWOC, that there is a "yes" answer to GD-DBR and a "no" answer to the instance of set cover. Consider GD-DBR solution V . We note that any element of V ld ∩ V in V can be replaced by a neighboring node from Vsrc without changing the size of this set and that such a set would still allow for all load nodes to remain online, let V be this new set. Consider the set H * = {h|v h ∈ V }. Note that |H * | ≤ k. By the contra-positive, there must be at least one element of S not covered by H * . Let node vs be a node associated with uncovered element s. As GD-DBR returned "yes" then there is no attacker strategy where vs becomes disconnected from some node in Vsrc. As attack strategy V s a includes all nodes that are connected to vs, then at least one of these nodes must be included in V . Therefore, for every node vs ∈ V ld there is some node v h ∈ V ld ∩ V that is connected to it, which means, by the construction, that H * must cover all elements of S -a contradiction.We now frame the formal problem for finding a deterministic best-response for the attacker below.Grid-Attack Deterministic Best Response (GA-DBR) INPUT: Network G = (V, E), defender mixed strategy Pr d (where each option is of size no greater than k d ), natural number ka, real numbers X, α OUTPUT: "Yes" if there exists a set Va ⊆ V s.t. |Va| ≤ ka and V d ∈DEF Pr d (V d )pG(Va, V d ) ≥ X and "no" otherwise.In the case of ka = 1, this problem is solvable in polynomial time: simply consider each v ∈ V . The attacker computes V d ∈DEF Pr d (V d )pG({v}, V d ) until one is found that causes the payoff to exceed or be equal to X. However, for strategies of larger size, the problem becomes NP-hard, regardless of the size of the defender strategy.  Proof. Clearly, a certificate consisting of a set Va ⊆ V can be verified in polynomial time, giving us membership in NP. For NP-hardness consider the known NP-hard "vertex cover" problem  #b10  that takes as input a graph G = (V , E ) (with no self-loops) and natural number k and returns "yes" iff there is a set of k or fewer vertices that are adjacent to each edge in E. We can embed vertex cover into an instance of GD-DBR in polynomial time with the following embedding: set ka = k, k d = 0, V d = ∅, X = |V |, α = |E|, G = G , and Vsrc = V ld = V .Suppose, BWOC, the above problem instance provides a "yes" answer to the vertex cover problem but a "no" answer to GA-DBR. Let V be a vertex cover of size k or less for G . Consider the corresponding set of vertices in G (we shall call this V * ). Note that |V * | ≤ ka. As an attacker attacking V * disconnects those nodes from the network, all edges adjacent to V * fail. As V * is a vertex cover for G, this means that there are no edges in the graph once V * is removed. Hence, no load node is connected to any source node -giving the attacker a payoff of at least X -hence a contradiction. Suppose, BWOC, the above problem instance provides a "yes" answer to GA-DBR but a "no" answer to the vertex cover problem. Let Va be the set of nodes the attacker attacks in GA-DBR. As α = |E| and as Vsrc = V , nodes only fail in a cascade if they are either targeted by the attacker or become totally disconnected. Further, as X = |V |, all nodes in G are either in Va or disconnected -meaning that Va must be a vertex cover of size ka or less. As ka = k we have a contradiction.Due to the use of covering problems for the complexity results in Theorems 1, 2, and 3, it may seem reasonable to frame the problem as a sub-or super-modularity optimization where the objective function is monotonic. However, here we show (unfortunately) that these properties do not hold for either player. First, we shall make statements regarding the monotonicity of the payoff function.Proposition 3.3. Iff ∀V * d , Va ⊆ V a : pG(Va, V * d ) ≤ pG(V a , V * d ) then ∀V * a , V d ⊆ V d : pG(V * a , V d ) ≥ pG(V * a , V d ).The idea of submodularity can be thought of as "diminishing returns." Given a set of elements S and a function f : 2 S → + , we say a f is submodular if for any sets S1 ⊆ S2 and element s / ∈ S2, we have the following relationship:f (S1 ∪ {s}) − F (S1) ≥ f (S2 ∪ {s}) − F (S2)A complementary idea of supermodularity is also often studied -in this case the inequality is reversed. Unfortunately, when we fix the strategy for the defender, the attacker strategy is neither submodular nor supermodularmaking the dynamics of this model significantly different from others (i.e.  #b23 ). Let consider strategies Va, V d where Va causes some load node v / ∈ (Va ∪ V d ) ∩ V ld to disconnect and any node the strategy {v} causes to disconnect will also become disconnected with strategy Va (such a case is easy to contrive, particularly with a bi-partite network). Therefore, we get the following relationship:pG(Va ∪ {v}, V d ) − pG(Va, V d ) < pG({v}, V d ) − pG(∅, V d )This arises from the fact that the left-hand side of the above equation becomes zero and the right hand side of the equation is equal to pG({v}, V d ) which must be at least one. Now consider another example. Suppose we have a simple Vshaped network of three nodes. The angle of the V is a load node, while the other two nodes are source nodes. With α = 1, the load node receives power if at least one of the source nodes is connected to it. However, it does not require both. Let Va be a strategy consisting of one source node and v be the other source node, and V d consist of the load node. From this, we have the following relationship:pG(Va ∪ {v}, V d ) − pG(Va, V d ) > pG({v}, V d ) − pG(∅, V d )In this case, the right-hand side becomes zero while the left hand side becomes one. This leads us to the following fact:Fact 3.2. When V d is fixed, pG is neither submodular nor supermodular. Now let us consider when we fix the attacker's strategy. If the payoff is submodular when the attacker's strategy is fixed, then we have the following for V d ⊆ V d and v / ∈ V d if the payoff subtracted from the number of nodes is submodular:pG(Va, V d ∪ {v}) − pG(Va, V d ) ≥ pG(Va, V d ∪ {v}) − pG(Va, V d )This is equivalent to the following:pG(Va − (V d ∪ {v}), ∅) − pG(Va − V d , ∅) ≥ pG(Va − (V d ∪ {v}), ∅) − pG(Va − V d , ∅) Now let V a = Va − (V d ∪ {v}) and V a = V a ∪ (V d − V d ).Clearly V a ⊇ V a and v / ∈ V a . Now we get the following:pG(V a , ∅) − pG(V a ∪ {v}, ∅) ≥ pG(V a , ∅) − pG(V a ∪ {v}, ∅) pG(V a ∪ {v}, ∅) − pG(V a , ∅) ≤ pG(V a ∪ {v}, ∅) − pG(V a , ∅)Hence, submodualrity of the payoff function when the attacker's strategy is fixed would give us supermodualrity of the payoff function when the defender's strategy is fixed at the empty set. However, this clearly violates Fact 3.2 and gives rise to the following:Fact 3.3.When Va is fixed, pG is neither submodular nor supermodular.

ALGORITHMS
In this section, we present heuristic algorithms for finding the deterministic best response of each player as the results of the previous section generally preclude a polynomial time algorithm for an exact solution. We first introduce a version of a "high load" strategy for the defender based on the ideas of  #b7 . Then we introduce a greedy heuristic for each player. This is followed by our approach for finding mixed strategies based on the double-oracle algorithm of  #b14 .Hi-Load Node Approach. In  #b7 , the authors study "high load" nodes: nodes through which the greatest number of shortest paths pass. They show that attacks on these nodes tend to initiate cascading failures -suggesting that they should be a priority for defense. We formalize the definition of nodal load in our framework (essentially an extended definition of node betweenness  #b24 ) by extending our function loadG for nodes as follows.Definition 4.1 (Nodal Load). For a given node, the nodal load is defined as the sum of the fraction of shortest paths for each pair that pass through that node. Formally:loadG(i) = s∈Vsrc,t∈V ld σG(s, t|i) σG(s, t) ,where σG(s, t|i) is the number of shortest paths between s, t ∈ V that pass through node i.Hence, we shall refer to the Deterministic Load-Based or DLB strategy for the defender as one in which he deterministically protects the k d nodes with the greatest load. We note that this is not necessarily a "best response" but the intuition is that defense will occur at nodes that are perceived to be critical to the adversary. This intuition is similar to that of the "most vital arc" idea seen in other failure model games  #b1  #b20 .Greedy Heuristics for Finding Deterministic Strategies. Here we present a simple greedy heuristic to find the defender's best-response (GREEDY DEFENDER RESP). The analogous heuristic for the attacker is not shown due to space constraints, but we shall refer to it as GREEDY ATTACKER RESP. We note that while we do not make general approximation guarantees (due to the results in Section 3), we note that by Proposition 3.3, that nodes added in step 18 will always cause an increase in payoff to the defender (and in the analogous greedy approach for the attacker, this holds true as well). Further, by Proposition 3.2, when ka = 1, we can be sure that GREEDY DEFENDER RESP returns an exact solution, even when the attacker has a mixed strategy. Unfortunately, by Theorem 3, the same cannot be said if the greedy heuristic is used for the attacker's best response.

Algorithm 1 GREEDY DEFENDER RESP
Require: Mixed strategy Pra, Natural number k d Ensure: Set of nodes V d 1: V d = ∅ 2: Let AT K be the set of strategies associated with Pra 3: Set f lag = True, p * = −∞ 4: while |V d | ≤ k d and f lag and p * < 0 do 5:p * = − Va∈AT K Pr d (Va)p G (Va, V d )

6:
curBest = null, curBestScore = 0, haveV alidScore = False 7:for i ∈ V − V d do 8: curScore = p * − Va∈AT K Pr d (Va)p G (Va, V d ∪ {i})

9:
if curScore ≥ curBestScore then 10: Finding Mixed Strategies. If the attacker uses a mixed strategy that consists of uniformly attacking elements of {S ⊂ V ld : |S| = ka} then the best any pure defender strategy can do is defending V d ⊂ V ld . The attacker's strategy implies that any node in V ld is attacked with probability ka |V ld | . Each of the |V ld | − ka remaining nodes in V ld is then disconnected with probability ka |V ld | , i.e., x ≥ ka(1 − k d |V ld | ). Clearly due to the cascading the value of the game will probably be higher, illustrating the disadvantage the defender has in this game. To determine both player's optimal strategies and the value of the game we resort to an algorithmic approach. We find the defender's optimal strategy with the following linear program. We can find minimax strategy for the defender with the following linear program. It simply assigns a probability to each of the defenders strategies in a manner that minimizes the maximum payoff for the adversary. As a consequence, the solution to the following linear program, DEF LP can provide the mixed minimax strategy for the defender. An analogous linear program, ATK LP (not shown), which mirrors DEF LP, will provide that result for the attacker.min p * (1) subj.to p * ≥ V d ∈DEF X V d p G (Va, V d ) ∀Va ∈ AT K (2) 1 = V d ∈DEF X V d (3) X V d ∈ [0, 1] ∀V d ∈ DEF (4)Note that the above linear program requires one variable for each of the defender's strategies and one constraint for each of the attacker's strategies. However, as there are a combinatorial number of strategies, even writing down such a linear program is not practical except for very small problem instances. To address this issue of intractability, we employ the double-oracle framework for zero-sum games introduced in  #b14  and has been applied in more recent work as well  #b4  #b11 . We present the algorithm DOUBLE ORACLE as follows: 

5:
IF numIters < maxIters THEN let Va be the attacker's best response to Pr d and V d be the defender's best response to Pra 6:IF Va ∈ AT K and V d ∈ DEF THEN f lag = False ELSE AT K = AT K ∪ {Va}, DEF = DEF ∪ {V d } 7: numIters+ = 1 8: end while 9: return Pra.The intuition behind the above algorithm is that it iteratively creates mixed strategies for both the attacker and defender based on a solution to a linear program over the sets of current possible strategies for both players (AT K, DEF ). This is followed by finding (for each player) the best deterministic response to it's opponent's strategy. If these new strategies are both already in the set of possible strategies for the respective players, the algorithm terminates. Otherwise, they are added to AT K, DEF respectively. We note that by Theorem 1 of  #b14  that the above algorithm will guarantee an exact solution if maxIters is set to the number of possible strategies. In practice,  #b14  demonstrates that the algorithm converges much faster.In DOUBLE ORACLE, the finding the solutions to DEF LP, ATK LP will be tractable provided that the algorithm converges in a polynomial number of steps (either through convergence or after the specified maxIters). However, as we have shown, computing the best responses is usually computationally difficult. Although, we note in the case where ka = 1, that by Proposition 3.2 and Fact 3.1, the double oracle algorithm will return an optimal solution, even if greedy approximations are used for the oracles (provided it runs until convergence).

EXPERIMENTAL EVALUATION
All experiments were run on a computer equipped with an Intel X5677 Xeon Processor operating at 3.46 GHz with a 12 MB Cache and 288 GB of physical memory. The machine was running Red Hat Enterprise Linux version 6.1. Only one core was used for experiments. All algorithms were coded using Python 2.7 and leveraged the NetworkX library 2 as well as the PuLP library for linear programming 3 . All statistics presented in this section were calculated using the R statistics software.In our experiments, we utilized a dataset of an Italian 380 kV power transmission grid  #b19 . This power grid network consisted of 310 nodes of which 113 were source, 96 were load, and the remainder were transmission nodes. The nodes were connected with 361 edges representing the power lines.In our initial experiments, we examined the properties of the model when no defense is employed. In Figure 1 (left) we show results concerning nodal load vs. the payoff achieved by the adversary if that node is attacked (and no others). Interestingly, we noticed a significant number of nodes with low nodal load yet high-payoff if attacked (see nodes in dashed box). This may suggest that the DLB strategy may be insufficient in some cases. Later we see how DLB fails to provide adequate in a defense against the attacker best response to DLB. This is likely due to these hi-payoff, low-load nodes. In Figure 1 (right) we examine α (capacity margin) vs. attacker payoff for various settings of ka (using the GREEDY ATTACKER RESP heuristic). Here we found that, in general, payoff decreases linearly with capacity margin (R 2 ≥ 0.84 for each trial).Next, we examined the relative performance of the minimax (mixed) defense strategy and the DLB strategy under different resource constraints and against the minimax (mixed) attack strategy as well as the attacker's (deterministic) greedy response to the DLB defense. In these experiments, we considered the case where both players have equal resources, the attacker has one resource (which by Proposition 3.2 and Fact 3.1 we are guaranteed an optimal solution), and the defender has one resource. These results are displayed in Figure 2. In these trials we set the capacity margin α = 0.5, meaning that all edges had an excess capacity of 50%. We did not use the maxIters parameter of the DOUBLE ORACLE algorithm, but instead allowed it to run until convergence.With regard to the comparison between DLB and minimax defense, both performed comparably against the minimax attack strategy. In fact, an analysis of variance (ANOVA) indicated little variance between the two when faced with the minimax attacker (p ≥ 0.74 for these trials). Yet, a defender known to be playing a single strategy would likely not face an attacker who plays the minimax strategy, but rather the best response to the DLB. In this case, DLB play resulted in significantly greater payoff to the attacker than the defender (p ≤ 0.29 for these trials, the DLB defense results in 15.6 more disconnected nodes on average). This failure of the DLB strategy to perform well against a deterministic attacker best response is likely due to the presence of low-load yet high-payoff nodes as shown in Figure 1.We also noticed that an increase in resources seems to favor the attacker more than the defender. When both players played their respective minimax strategy, the expected payoff for the attacker increased monotonically with the cardinality of the strategies. Further, when k d = 1 and ka was greater, the attacker's payoff tripled when his resources increased from 1 to 6. However, when ka = 1 and k d was greater, the defender's payoff only increased by a factor of 1.7. Hence, the attacker can cause more damage than the defender can mitigate with the same amount of extra resources. We suspect that this is likely because a defended node can still fail during a cascade -which would likely be the case if the attack and defense operations are restricted to cyber-space, where physical system failure may still be possible as the result of a cascade initiated by virtual means.We also examined the run-time of our approach, as displayed in Figure 3 (left). Though run-time did seem to scale linearly with strategy size (R 2 = 0.90 ± 0.2 for each experiment), it appears that run-time will in general prohibit the study of larger strategies or networks (our longest experiment ran for 12 days). In examining the iterations of the DOUBLE ORACLE algorithm, Figure 3 (left), we find that run-time of an iteration of the algorithm progressively increases (note that this figure is showing the run-time for . This increase is likely the combined result of the growing linear program and the growing size of the mixed strategies considered by the greedy approximation sub-routines. We are currently exploring reliable methods to limit the number of iterations while maintaining defender payoff.

RELATED WORK
Network security has received much attention from the research community in the past two decades. Recent incidents have shown that due to their internet connectedness such networks can come under cyber attack, causing severe problems 4 . See  #b25  for a discussion of cyber-security issues relevant to smart grid grids. The utilization of game theory in designing defense solutions seems ubiquitous. For instance  #b12  model the interaction between a DDoS attacker and the network administrator while  #b13  considers a game theoretic formulation for intrusion detection. Other formulations consist include stochastic games  #b16 , signaling games  #b18 , allocation games  #b3  and repeated games  #b2 . Game theory is also being used in monitoring and decision making in smart grids, see for instance  #b8  or the survey by Fadlullah et al.  #b9 . However to date no game theoretic approach has been given for the specific problem where the attacker explicitly sets of a cascading power failure to maximize the damage to the defender.Cascading failure models applied to power grid infrastructure have been studied in the past  #b6  #b7  #b15 . The model of  #b7  introduces the idea of edge failure based on excessive loads. The goal of the research presented in these papers was to illustrate properties of the cascade, rather than explore strategies for attack and defense as this work does. There has been work on attack and defense of a power-grid network under the DC power-flow mode  #b1  #b20  #b19  #b5 . However, the DC power flow model is not designed to model the more rapid cascading failures (i.e. the 2003 cascading failure in the eastern United States  #b0 ).The application of game theory to security situations was made popular by  #b17  where it used for airport security patrol scheduling. Since then, other applications have emerged including port protection  #b22 , finding weapons caches  #b21 , and security checkpoint placement  #b11 . One that bears similarity to this work is  #b23  -studying games for controlling contagions on a network. However, as previously discussed, that model operates under very different dynamics.

CONCLUSION
In this paper, we explored complexity, algorithmic, and implementation issues in a two-player security game where the attacker/defender look to create/mitigate cascading failure on a power grid. Future work includes an examination of scalability issues (larger networks and strategies), adding uncertainty to the model, and the consideration of more realworld information about the power grid network (i.e. actual line capacities, etc.) in order to create a richer model.

ACKNOWLEDGMENTS


Footnote
1 : Note that this would likely be the case where the attack and defense occurs in cyber-space, while the cascade occurs in the physical world.
2 : http://networkx.lanl.gov/ 
4 : http://www.wired.com/threatlevel/2009/10/smartgrid/
3 :  http://pythonhosted.org/PuLP/