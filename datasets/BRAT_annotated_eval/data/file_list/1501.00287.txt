Consistent Classification Algorithms for Multi-class Non-Decomposable Performance Metrics

Abstract
We study consistency of learning algorithms for a multi-class performance metric that is a non-decomposable function of the confusion matrix of a classifier and cannot be expressed as a sum of losses on individual data points; examples of such performance metrics include the micro and macro F-measure used widely in information retrieval and the multi-class G-mean metric popular in class-imbalanced problems. While there has been much work in recent years in understanding the consistency properties of learning algorithms for 'binary' non-decomposable metrics [1, 2, 3, 4, 5], little is known either about the form of the optimal classifier for a general multi-class non-decomposable metric, or about how these learning algorithms generalize to the multi-class case. In this paper, we provide a unified framework for analyzing a multi-class nondecomposable performance metric, where the problem of finding the optimal classifier for the performance metric is viewed as an optimization problem over the space of all confusion matrices achievable under the given distribution. Using this framework, we show that (under a continuous distribution) the optimal classifier for a multi-class performance metric can be obtained as the solution of a cost-sensitive classification problem, thus generalizing several previous results on specific binary non-decomposable metrics. We then design a consistent learning algorithm for concave multi-class performance metrics that proceeds via a sequence of cost-sensitive classification problems, and can be seen as applying the conditional gradient (CG) optimization method over the space of feasible confusion matrices. To our knowledge, this is the first efficient learning algorithm (whose running time is polynomial in the number of classes) that is provably consistent for a large family of multi-class non-decomposable metrics. Our consistency result makes use of a novel proof technique based on the convergence analysis of the CG method.

Introduction
In many real-world classification tasks, the performance metric used to evaluate a multi-class classifier is often a non-decomposable function of the confusion matrix of a classifier and cannot be expressed as a sum or expectation of losses on individual data points; this includes for example, the micro and macro F-measure used widely in information retrieval and the multi-class G-mean metric popular in class-imbalanced problems (see Table 1 for other examples). While there has been much work in recent years in understanding the consistency properties of plug-in or cost-sensitive risk minimization based learning algorithms for 'binary' non-decomposable metrics  #b0  #b1  #b2  #b3  #b4 , little is known about the form of the optimal classifier for a general multi-class non-decomposable metric, or about how these learning algorithms for binary performance metrics, which make use of a brute-force line search of a single threshold/cost parameter, generalize to the multi-class case, where the number of parameters needed to be tuned scales with the number of classes.In this paper, we provide a general framework for analysing a multi-class non-decomposable performance metric, where the problem of finding optimal classifier for the performance metric is viewed as an optimization problem over the space of all confusion matrices achievable under the given distribution. Using this framework, we show that, under a continuous distribution, the optimal classifier for any multi-class performance metric (that satisfies a mild condition) can be obtained by solving a cost-sensitive classification problem, where the costs are given by the gradient of the non-decomposable metric at the optimal confusion matrix. This result generalizes a previous result for binary non-decomposable metrics  #b1  and also recovers several previous results on the form of the optimal classifier for specific binary performance metrics  #b5  #b2  #b4 .A natural first-cut learning algorithm that arises from the above characterization is one that learns a plug-in classifier by applying an empirical weight matrix chosen by a brute-force search to a suitable class probability estimator. While this method can be shown to be statistically consistent with respect to the given performance metric (under a continuous distribution), it becomes computationally inefficient when the number of classes is large. As an alternative, we provide an efficient learning algorithm based on the conditional gradient (CG) optimization method (which we call the 'BayesCG' algorithm) that avoids a brute-force search over costs and can be seen as instead running the CG method over the space of feasible confusion matrices; the resulting algorithm proceeds via a sequence of cost-sensitive classification problems, the solutions for which take the form of plug-in classifiers. We show that the BayesCG algorithm is consistent for performance metrics that are concave functions of the confusion matrix; to the best of our knowledge, this is the first efficient learning algorithm (whose running time is polynomial in the number of classes) that is provably consistent for a large family of multi-class non-decomposable metrics. Also, unlike the brute-force plug-in method, the BayesCG algorithm requires no assumptions on the form of the optimal classifier for the given performance metric and hence on the underlying distribution.Our consistency result makes use of a novel proof technique based on the convergence analysis of the CG method  #b6 . More specifically, we show that the linear optimization step of the above CG method is solved approximately in the BayesCG algorithm and thus establish a regret bound for the algorithm for smooth concave performance metrics. For performance metrics that are nonsmooth concave functions of the confusion matrix, we prescribe applying the BayesCG algorithm to a suitable smooth approximation of these performance metrics; we instantiate and show consistency of this approach for concave performance metrics such as the G-mean, H-mean and Q-mean.

Related Work
There have been several algorithms designed to optimize non-decomposable classification metrics, particularly in the binary classification setting; these include the binary plug-in algorithm that applies an empirical threshold to a class probability estimate  #b7  #b0  #b1  #b2  #b4 , cost-sensitive risk minimization based approaches  #b8  #b2  #b3 , methods that optimize convex and non-convex approximations to the given performance metric  #b9  #b10  #b11  #b12  #b13 , and decision-theoretic methods that learn a class probability estimate and compute predictions that maximize the expected value of the performance metric on a test set  #b14  #b15  #b8 . Of these, the plug-in method is known to be consistent for any binary performance metric for which the optimal classifier is threshold-based  #b1 , while the cost-sensitive approach is shown to be consistent for the class of fractional-linear performance metrics  #b2 . There have also been results characterizing the optimal classifier for several binary nondecomposable metrics  #b0  #b5  #b1  #b2 , with the specific form of the classifier available in closed-form for fraction-linear metrics (i.e., metrics that are ratios of linear functions)  #b2 .We would also like to point out that there has been some work on designing algorithms for optimizing the F-measure in multi-label classification settings  #b16  #b17  #b18  #b3  and consistency results for these methods  #b18  #b19 , but these results do not apply to the setting considered in this paper. In particular, while the multi-class performance metrics that we seek to optimize are nondecomposable/non-additive over data points, the standard performance metrics of interest in a multi-label setting can indeed be expressed as a sum of losses on individual examples, with each loss on an example potentially being a non-decomposable function of the labels on the example.Organization. We start with some preliminaries and background on non-decomposable performance metrics in Section 2. In Section 3, we give a general framework for analysing multi-class non-decomposable performance metrics and use this framework to derive the form of the optimal classifier for a non-decomposable performance metric. Based on this characterization, we consider a brute-force plug-in method for a multi-class non-decomposable metric in Section 4, and show that this method is consistent. In Section 5, we design an alternate efficient learning algorithm based on the conditional gradient optimization method, which we show is consistent for a large family of concave non-decomposable metrics. All proofs not in the main text are provided in the Appendix.

Preliminaries and Background
Notations. For any n ∈ Z + , we shall denote [n] = {1, . . . , n}. For a predicate φ, we shall denote by 1(φ) the indicator function that takes value 1 if φ is true and 0 otherwise. The probability simplex of dimension n will be denoted by ∆ n = {p ∈ R n + | n i=1 p i = 1}. For a matrix G ∈ R n×n , we will use g y to denote the y th column of the matrix, and shall refer to G 1 = n i=1 n j=1 |G ij | as the ℓ 1 norm of G and to G ∞ = max 1≤i<j≤n |G ij | as the ℓ ∞ norm of G; for any two matrices A, B ∈ R n×n , we shall denote their component-wise inner product as A,B = n i=1 n j=1 A i,j B i,j .For any set C, we denote its closure under an appropriate metric space by C. For maximization over integral sets, the notation argmax shall refer to ties being broken in favor of the larger number.Problem Setup. Let X be an instance space and Y = [n] be a set of class labels. We are given a training sample S = ((x 1 , y 1 ), . . . , (x m , y m )) ∈ (X × [n]) m drawn i.i.d. according to an underlying (unknown) probability distribution D over X × [n], and the goal in a multi-class classification problem is to learn from these examples a prediction model h S : X → [n], which when given a new instance x ∈ X , makes a prediction y = h S (x) ∈ [n]. We will be interested in the more general problem of learning from S, a randomized classifier h S : X → ∆ n that for each instance outputs a probability distribution over the labels in [n]; note that any deterministic classifier can be seen as randomized classifier whose output is always a vertex of the probability simplex ∆ n . In particular, we will consider settings where the performance of h S is evaluated using a non-decomposable performance metric P D : ∆ X n → R + that cannot be expressed as a sum or expectation of losses on individual examples. We shall denote the marginal of D over X as D X , the conditional class probabilities for an instance x as η y (x) = P(Y = y | X), ∀y ∈ [n], and the prior class probabilities as π y = P(Y = y), ∀y ∈ [n]; for a sample S, we shall use D S to denote the empirical distribution which has its mass uniformly on the instances in S. [h] = P(h(X) = y | Y = y), Prec y [h] = P(Y = y | h(X) = y), and π y = P(Y = y). Each performance metric here can be expressed as P D [h] = ψ(conf(h, D) ≡ C), where the form of ψ : [0, 1] n×n → R + for a performance metric is given in the fourth column; the last column provides important properties of ψ, all of which hold over the set of feasible confusion matrices C D (see Eq. (3)). Note that for any C ∈ C D , π y = n y=1 C y, y . + 1 TPR 1 [22] 2C 2,2 2C 2,2 +C 1,2 +C 2,1Non-concave, Pseudo-linear Jaccard Coefficient (JAC)π 2 TPR 2 π 2 + π 1 (1−TPR 1 ) [23] C 2,2 C 2,2 +C 2,1 +C 1,2Non-concave, Pseudo-linear AMS metric -  #b23  2 (C 12 + C 22 ) log 1 + conf(h, D) i,j = E (X,Y )∼D 1(Y = i, h(X) = j) , ∀i, j ∈ [n];the corresponding confusion matrix for a randomized classifier h : X → [n] is given byconf(h, D) i,j = E (X,Y )∼D h j (X) · 1(Y = i) , ∀i, j ∈ [n].In this paper, we shall be interested in non-decomposable performance metrics that can expressed as a continuous and bounded function ψ : [0, 1] n×n → R + of the confusion matrix:P D [h] = ψ(conf(h, D)).(1)For example, the macro F 1 -measure used widely in text retrieval can be expressed as a functionψ F 1 (C) = 1 n n y=1Cy,y n y=1 C y, y + n y=1 C y,y of the confusion matrix C ∈ [0, 1] n×n . Table 1 contains several examples of performance metrics that are functions of the confusion matrix. 1,2 Throughout this paper, we shall use the term performance metric to refer to both P and ψ.Algorithm 1 Plug-in Algorithm for Binary Non-decomposable Performance Metric.1: Input: S = ((x 1 , y 1 ), . . . , (x m , y m )) ∈ (X ×  #b1 ) m , ψ : [0, 1] 2×2 → R + 2: Split S into two sets S ′ and S ′′ with sizes m 1 = ⌊(1 − α)m⌋ and m 2 = ⌈αm⌉.3: Learn η S ′ = CPE(S ′ ), where CPE : ∪ ∞ m=1 (X × [2]) m → [0, 1] X is a suitable CPE algorithm 4: t S ∈ argmax t∈[0,1] P D S ′′ [ h t ], where h t (x) = [1, 0] ⊤ if η S ′ (x) ≤ t [0, 1] ⊤ otherwise 5: Output: h t S ψ-consistency.We now consider the optimal value of performance metric P over all randomized classifiers:P * D = sup h:X → ∆n P D [h],and shall refer to the classifier attaining the above value, if one exists, as the ψ-optimal classifier. One can then define the ψ-regret of classifier h asregret ψ D [h] = P D [h] − P * D .A learning algorithm that takes a training sample S drawn i.i.d. from D m and outputs a classifier h S is said to be ψ-consistent if the ψ-regret of classifier h S goes to zero in probability:regret ψ D [ h S ] P − → 0,where the convergence in probability is over the random draw of S from D m . 3Optimal Classifier for Decomposable Metrics. While in general, it is not clear if there exists a classifier that attains the optimal value of a given performance metric P D [h] = ψ(conf[h]), it is well-known that when ψ is a linear function (i.e., P D can be expressed as an expectation of a loss on individual example), a ψ-optimal classifier always exists. In particular, if ψ takes the form ψ G (C) = n y=1 n y=1 G y, y C y, y = C, G , for some matrix G ∈ R n×n + , then any classifier h * : X → ∆ n that satisfies the following condition is ψ G -optimal:h * i (x) > 0 only if i ∈ argmax y∈[n] g ⊤ y η(x) .(2)It is seen that there always exists a deterministic classifier that satisfies the above condition. Also, it is worth noting that maximizing the above performance metric is equivalent to solving a costsensitive classification problem, with the costs given by the the negative of the 'gain' matrix G.Plug-in Algorithm for Decomposable Metrics. A standard approach for maximizing a decomposable metric (or equivalently solving a cost-sensitive classification problem) is the plug-in method, where one first obtains a class probability estimation (CPE) model η S : X → ∆ n from the  $b3  We say φ(S) converges in probability to a ∈ R, written as φ(S)P − → a, if ∀ǫ > 0, PS∼Dm(|φ(S) − a| ≥ ǫ) → 0 as m → ∞.given training sample S and constructs a classifier h S (x) = argmax y∈[n] g ⊤ y η S (x) for any instance x. This approach can be shown to be ψ G -consistent if the CPE algorithm used to learn η S is such that E X η S ′ (X) − η(X) 1 P − → 0  #b31  (which is indeed the case for any algorithm that performs a regularized empirical risk minimization of a proper loss such as the logistic loss  #b32  #b33 ).Known Results for Binary Non-decomposable Performance Metrics. We now summarize what is understood about the the optimal classifier for binary non-decomposable performance metrics and about the consistency properties of learning algorithms for these metrics. It is known that, under a continuous distribution, the optimal classifier for a binary monotonic non-decomposable metric is obtained by placing a suitable threshold on the posterior class probability function  #b1 . For certain specific performance metrics, such as those that are fractional-linear/ratio of linear functions (e.g., binary F-measure and JAC measure)  #b0  #b34  #b5  #b2 , the geometric mean of precision and recall  #b1 , and the approximate median sign (AMS) metric  #b4 , this characterization holds even without the continuity assumption on the distribution; for some of these metrics, the exact form of the threshold is also available in closed-form  #b2  #b4 . It is also known that a plug-in algorithm that constructs a classifier by assigning an empirical threshold to a suitable class probability estimate (see Algorithm 1) is statistically consistent with respect to any binary non-decomposable metric for which the optimal classifier is of the above thresholded form  #b1  #b2 ; a similar result has also been shown for a cost-sensitive risk minimization based approach for fractional-linear metrics  #b2 .While there has been a lot of work on binary non-decomposable metrics as seen above, little is known about how these results extend to the multi-class case. In particular, what is the form of the optimal classifier for a general multi-class non-decomposable metric? How does the plug-in and cost-sensitive risk minimization based algorithms for binary performance metrics, which essentially need to tune a single parameter, generalize to the multi-class case, where the number of parameters needed to be tuned grows with the number of classes? In this paper, we address these questions.Before we proceed further, we will find it convenient to define for any given function µ : X → R n , the set of weighted argmax classifiers obtained by a gain matrix G ∈ R n×n + on µ:H µ = h : X → ∆ n | ∃ G ∈ R n×n s.t. ∀x ∈ X , h i (x) = 1 if i = argmax y∈[n] [Gµ(x)] y .Finally, a function f : R d×d → R is said to be L-Lipschitz w.r.t. the ℓ 1 norm over M ⊆ R d×d , for some L > 0, if|f (M 1 ) − f (M 2 )| ≤ L M 1 − M 2 1 , ∀ M 1 , M 2 ∈ M,and is β-smooth w.r.t. the ℓ 1 norm over M ⊆ R d×d , for some β > 0, if∇f (M 1 ) − ∇f (M 2 ) ∞ ≤ β M 1 − M 2 1 , ∀ M 1 , M 2 ∈ M.

Characterization of the Optimal Classifier for a General Multiclass Performance Metric
We start by providing a generic framework for studying a multi-class non-decomposable performance metric, where we view the problem of finding the optimal classifier for a non-decomposable metric as an optimization problem over the space of all confusion matrices that are attainable under the given distribution. Using this framework, we give a characterization of the optimal classifier for a non-decomposable metric; in particular, we show that under a continuous distribution, the optimal classifier for any multi-class non-decomposable performance metric (that satisfies a mild condition) can be obtained by maximizing a decomposable performance metric, whose gain matrix is given by the gradient of non-decomposable metric at the optimal confusion matrix. To our knowledge, this is the first such result for a general multi-class non-decomposable metric, generalizing a previous result for binary non-decomposable metrics  #b1  and in addition also recovering previous results on the form of the optimal classifier for several performance metrics  #b5  #b2  #b4 .Feasible confusion matrices. We begin by defining the set of feasible confusion matrices for a distribution D as the set of all confusion matrices achievable by a randomized classifier under D:C D = {C ∈ [0, 1] n×n : C = conf(h, D) for some h : X → ∆ n }.(3)Note that every matrix C ∈ C D is such that its row sums are equal to the prior probabilities, i.e. n y=1 C y, y = π y , ∀y ∈ [n]. It can be shown that this set is convex.Proposition 1 (Convexity of C D ). C D is a convex set.The problem of finding the optimal classifier for the given performance metric can now be cast as an optimization problem over C D ; we shall shortly see that this viewpoint is useful in both characterizing the optimal classifier for the performance metric and in designing consistent learning algorithms for the metric.We next make the following continuity assumption on D, which is essentially a multi-class extension of a similar assumption on D in  #b1  (in the binary label setting).Assumption A (Continuity of D). Let U be a random variable distributed uniformly over the simplex ∆ n , and let µ be a base measure over ∆ n such that µ(A) = P(U ∈ A), ∀A ⊆ ∆ n . Let ν denote the probability measure that is associated with the random variable η(X). We will say that a distribution D satisfies Assumption A if ν is absolutely continuous w.r.t. µ.We shall also make a mild assumption on ψ that is satisfied by all performance metrics in Table 1 except the min-max metric.Assumption B. We will say that ψ : [0, 1] n×n → R + satisfies Assumption B w.r.t. distribution D if it is continuous, differentiable and bounded over C D , and is strictly increasing in the diagonal elements of its argument and non-increasing in the non-diagonal elements of its argument.Under the above assumptions on D and ψ, we now show that a ψ-optimal classifier always exists and can be obtained by maximizing a decomposable performance metric constructed from the gradient of ψ at the optimal confusion matrix.Theorem 2 (Characterization of ψ-optimal Classifier for a General Multi-class Non-decomposable Metric Under Continuous Distributions). Let distribution D satisfy Assumption A, and ψ : [0, 1] n×n → R + satisfy Assumption B w.r.t. D. Then there exists a classifier h * : X → ∆ n that is ψ-optimal. Furthermore, for G * = ∇ψ(conf(h * , D)), we have∅ = argmax h:X → ∆n G * , conf(h, D) ⊆ argmax h:X → ∆n ψ(conf(h, D)),and thus any classifier h : X → ∆ n of the following form is ψ-optimal:h i (x) > 0 only if i ∈ argmax y∈[n] g * ⊤ y η(x).The above theorem is a multi-class generalization of the result in  #b1  for binary monotonic performance metrics, and in addition also gives the precise form of the optimal classifier for the given performance metric. By a simple application of this theorem, we recover previous results on the form of the optimal classifier for performance metrics that fractional-linear  #b2  such as the F-measure and Jaccard coefficient  #b5 , and also for the AMS metric  #b4 .Before we prove Theorem 2, we will find it useful to state the following lemma.Lemma 3 (Uniqueness of Optimal Confusion Matrix for Gain Matrices Obtained from Gradients of ψ). Under the assumptions on D and ψ in Theorem 2, for any C * ∈ C D , we haveargmax C∈C D ∇ψ(C * ), C = argmax C∈C D ∇ψ(C * ), C .Moreover, the above set is a singleton.The proof of Theorem 2 then follows from the first order necessary conditions for optimality of a confusion matrix and the above result.Proof of Theorem 2. We shall first show that there exists a ψ-optimal classifier. By compactness of C D , we know that there exists C * ∈ C D such thatψ(C * ) = max C∈C D ψ(C) = sup C∈C D ψ(C).It remains to be shown that there exists a classifier that achieves this confusion matrix, i.e., C * ∈ C D . For this, we note from the first order necessary condition for optimality of C * , given convexity ofC D (see Proposition 1), that ∇ψ(C * ), C * ≥ ∇ψ(C * ), C , ∀C ∈ C D .(4)The above equation along with Lemma 3 implies thatargmax C∈C D ∇ψ(C * ), C = argmax C∈C D ∇ψ(C * ), C = {C * } .Thus C * ∈ C D and hence there exists a clasifier h * : X → ∆ n such that C * = conf(h * , D). This completes the proof of existence of a ψ-optimal classifier. Next for G * = ∇ψ(C * ), we further haveargmax h:X → ∆n G * , conf(h, D) = {h : X → ∆ n : conf(h, D) = C * } ⊆ argmax h:X → ∆n ψ(conf(h, D)).Clearly, a classifier h : X → ∆ n that maximizes the linear performance metric G * , conf(·, D) is also ψ-optimal; as seen in Eq. (2), such a classifier takes the form given in the theorem statement.Remark 1 (Necessity of continuity Assumption A on D). We note here that for the above characterization to hold for a general non-decomposable performance metric, the continuity assumption on distribution D (Assumptions A) is indeed necessary. We illustrate this fact for the H-mean performance metric by constructing a simple distribution that does not satisfy this assumption, and where a classifier of the form in the theorem statement is not necessarily optimal. Consider the following distribution D over {x} × {1, 2} with η(x) = 1 2 , 1 2 ⊤ . It can be seen that the unique optimal classifier for the H-mean performance metric is h * (x) = 1 2 , 1 2 ⊤ , whose confusion matrix C * and the gradient of ψ at C * are given by:C * = 1 4 1 4 1 4 1 4 ; G * = ∇ψ(C * ) = 1 2 − 1 2 − 1 2 1 2 .Clearly, any classifier h :X → ∆ 2 will have G * , conf(h, D) = 0; hence {h : X → ∆ 2 } = argmax h:X → ∆ 2 G * , conf(h, D) ⊃ argmax h:X → ∆ 2 ψ(conf(h, D)) = {h * }.It is worth noting that for certain restricted families of performance metrics, the characterization in Theorem 2 holds even without Assumption A on the distribution; this is the case, for example, when ψ is fractional-linear (e.g., F-measure, JAC)  #b2  #b3  and is convex (e.g., AMS metric)  #b4 .Remark 2 (Extension to the min-max metric). A result similar to the one in Theorem 2 also holds for the min-max metric, where it is well known from classical detection theory (in particular, from min-max hypothesis testing) that the optimal classifier for this metric is obtained by maximizing a decomposable metric with an appropriate gain matrix  #b30 . In fact, one can show that if h * is an optimal classifier for the min-max metric ψ MM , and G * is in the sub-differential of ψ MM at conf(h * , D), then∅ = argmax h:X → ∆n G * , conf(h, D) ⊆ argmax h:X → ∆n ψ MM (conf(h, D)).

A Consistent Plug-in Method for Multi-class Non-decomposable Metrics Based on a Brute-force Search
Based on the above characterization of the optimal classifier of a non-decomposable metric, we now consider a simple plug-in based learning algorithm for a multi-class non-decomposable metric that uses a brute-force search over gain matrices; this approach can be seen as a natural extension of the binary plug-in method in Algorithm 1. We show that this method is consistent with respect to a general non-decomposable metric, and also provide an explicit regret bound for this method for the special case of performance metrics that exhibit a certain convexity-like property. In the next section, we design an alternate efficient learning algorithm based on the conditional gradient algorithm which is consistent for a large family of non-decomposable metrics. Clearly, if the optimal confusion matrix C * for a multi-class non-decomposable metric ψ is known apriori, one can learn a simple plug-in classifier by applying the gradient of ψ at C * to a suitable class probability estimator. In the absence of knowledge of C * , a natural first-cut approach would be to perform a brute-force search over all gain matrices with bounded entries 4 , and pick the one for which the resulting plug-in classifier yields maximum performance value on a held-out part of the training set (see Algorithm 2). While for the binary case (n = 2), this brute-force search essentially reduces to a search over thresholds (on the class probability estimate) that can be performed efficiently in time linear in the number of held-out instances (as seen in Algorithm 1), for the general multi-class case, it is not clear if an exact search is tractable; in practice,

Algorithm 2 Brute-force Plug-in Algorithm for Multi-class Non-decomposable Performance Metric
Input:S = ((x 1 , y 1 ), . . . , (x m , y m )) ∈ (X × [n]) m , ψ : [0, 1] n×n → R + Parameter: α ∈ (0, 1) Split S into two sets S ′ and S ′′ with sizes m 1 = ⌊(1 − α)m⌋ and m 2 = ⌈αm⌉. Learn η S ′ = CPE(S ′ ), where CPE : ∪ ∞ m=1 (X × [n]) m → ∆ X n is a suitable CPE algorithm ∀G ∈ [−1, 1] n×n , define h G : X → ∆ n such that h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η S ′ (x) G S ∈ argmax G ∈ [−1,1] n×n P D S ′′ h G Output: h S ≡ h G Sthis maximization over gain matrices can be performed approximately by considering only a finite number of matrices obtained from a fine-grained grid.We now show that (under a continuous distribution) the brute-force plug-in method is statistically consistent with respect to the given performance metric.Theorem 4 (Consistency of Brute-force Plug-in Algorithm for Multi-class Non-decomposable Metrics). Let D satisfy Assumption A, and ψ : [0, 1] n×n → R + satisfy Assumption B w.r.t. D. If h S is the classifier learned by Algorithm 2 using training sample S = (S ′ , S ′′ ) ∈ (X × [n]) m with parameter α ∈ (0, 1), and the CPE algorithm used in Algorithm 2 is such thatE X η S ′ (X) − η(X) 1 P − → 0, then regret ψ D [ h S ] P − → 0 (as m → ∞).The above guarantee applies to all performance metrics in Table 1. Before we prove this result, we state a couple of lemmas; in the first lemma, we consider a classifier obtained by applying a fixed gain matrix to a class probability estimation model, and show convergence of the entries of the confusion matrix for this classifier to those of a classifier obtained by applying the gain matrix to the true class probability function; in the second lemma, we give a uniform convergence bound for the confusion matrix of a set of weighted argmax classifiers.Lemma 5 (Convergence of conf for fixed gain matrix). Let D satisfy Assumption A. Let η S : X → ∆ n be a class probability estimation model learned using a sample S drawn i.i.d. from D m . For a fixed gain matrix G ∈ [0, 1] n×n such that no two columns are identical, let h G : X → ∆ n and h G : X → ∆ n be classifiers constructed as follows:h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η(x), ∀x ∈ X and h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η S (x), ∀x ∈ X . If η S is such that E X η S (X)−η(X) 1 P − → 0, then ∀i, j, conf( h G , D) ij P − → conf(h G , D) ij (as m → ∞).Lemma 6 (Uniform Convergence Generalization Bound for conf Over H µ ). Let µ :X → R n be a fixed function and S ∈ (X × [n]) m be a sample drawn i.i.d. according to D m . For any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m ), sup h ∈ Hµ conf(h, D) − conf(h, D S ) ∞ ≤ C n 2 log(n) log( m) + log(n 2 /δ) m , where C > 0 is a distribution-independent constant.We are now ready to prove Theorem 4.Proof of Theorem 4. By Theorem 2, a ψ-optimal classifier exists. Let h * : X → ∆ n be one such classifier and let G * = ∇ψ(conf(h * , D)). Further, let h G * : X → ∆ n be a classifier such thath G * (x)] i = 1 if i = argmax y∈[n] g * ⊤ y η(x); then again by Theorem 2, P D [h G * ] = P D [h * ]. Also let h G * : X → ∆ n be such that h G * (x)] i = 1 if i = argmax y∈[n] g * ⊤ y η S ′ (x). Thus, regret ψ D [ h S ] = P D [h * ] − P D [ h S ] = P D [h G * ] − P D [ h S ] = P D [h G * ] − P D [ h G * ] + P D [ h G * ] − P D S ′′ [ h G * ] + P D S ′′ [ h G * ] − P D [ h S ] ≤ P D [h G * ] − P D [ h G * ] + P D [ h G * ] − P D S ′′ [ h G * ] + P D S ′′ [ h S ] − P D [ h S ] ≤ P D [h G * ] − P D [ h G * ] + sup h ∈ H η S ′ P D [h] − P D S ′′ [h] + sup h ∈ H η S ′ P D S ′′ [h] − P D [h] = P D [h G * ] − P D [ h G * ] term A + 2 sup h ∈ H η S ′ P D [h] − P D S ′′ [h] term B ,where the fourth step follows by definition of h S . By assumption B on ψ, the matrix G * has no two identical columns, and hence by Lemma 5 we have that conf( h G * ) converges to conf(h G * ) as m goes to ∞. Along with the continuity of ψ, this ensures that term A P − → 0. By suitably conditioning on S ′ and using the uniform convergence bound in Lemma 6, one gets term B P − → 0.For a special class of performance metrics that satisfy a certain convexity-like property, we have an explicit regret bound guarantee for the brute-force plug-in method.Theorem 7 (Regret Bound for Brute-force Plug-in Algorithm for Convex-like Non-decomposable Metrics). Let D satisfy Assumption A, and ψ : [0, 1] n×n → R + satisfy Assumption B w.r.t. D. Furthermore, let ψ be L-Lipschitz w.r.t. the ℓ 1 norm over C D , and be such that thereexists ξ > 0 such that ψ(C) − ψ(C ′ ) ≤ ξ ∇ψ(C), C − C ′ , ∀C, C ′ ∈ C D .If h S is the classifier learned by Algorithm 2 using training sample S = (S ′ , S ′′ ) ∈ (X × [n]) m with parameter α ∈ (0, 1), then for any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m ):regret ψ D [ h S ] ≤ 2LξE X η S ′ (X) − η(X) 1 + 2LC n 2 log(n) log(αm) + log(n 2 /δ) αm , where C > 0 is a distribution-independent constant.The above result applies to several performance metrics including the AMS measure (ξ = 1)  #b4 , the binary F-measure (ξ = 1/π 1 )  #b3  and the multi-class micro F-measure (ξ = 1/(1 − π 1 ))  #b3 . The proof of this theorem follows a similar progression as that of Theorem 4 and additionally makes use of the convexity-like property of ψ and the following regret bound for a linear/decomposable performance metric defined using a bounded gain matrix. h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η(x). We then have max h:X → ∆n G, conf(h, D) − G, conf( h G , D) ≤ 2LE X η(X) − η(X) 1 .

Remark 3 (Connection to the method of Parambath et al. (2014) [4]).
For certain classes of performance metrics, the brute-force method in Algorithm 2 can be made more efficient by considering in the maximization step, only those gain matrices that are obtained from gradients of ψ at feasible confusion matrices in C D . This is beneficial for example, in the case of fractional-linear performance metrics such as the binary and micro F-measure, where any gradient obtained from a feasible confusion matrix can be parametrized using a single scalar. The method of  #b3 , which makes use of this fact, can be seen as a special case of Algorithm 2.

A Consistent and Efficient Algorithm for Multi-class Non-decomposable Metrics Based on the Conditional Gradient Method
While the (brute-force) plug-in method analyzed in the previous section is consistent for any nondecomposable metric for which the optimal classifier is of a certain desired form, the number of parameters that need to be tuned in this method grows with the number of classes n; in particular, the number of evaluations of the performance metric required in this method could be exponential in n. In this section, we provide an alternate efficient learning algorithm based on the conditional gradient (CG) optimization method and show that this algorithm is consistent for a large family of concave performance metrics. Also, unlike the brute-force plug-in, the CG based method makes no assumption on the form of the optimal classifier and hence on the underlying distribution. More specifically, we pose the problem of learning a classifier for a non-decomposable metric as a constrained optimization problem over the space of feasible confusion matrices, and explore the use of optimization methods for solving this problem. However, unlike a standard optimization problem where the constraint is explicitly specified, in the problem that we consider, testing feasibility of a confusion matrix is not tractable in general; this precludes the use of standard gradient descent based constrained optimization solvers for this problem. Instead, we make use of the conditional gradient (CG) method which does not require the constraint set to be explicitly specified, and instead only requires access to a linear optimization oracle over the constraint set  #b35 . In particular, this method proceeds via a sequence of linear optimization steps, each of which is equivalent to maximization of a decomposable performance metric and thus can be solved efficiently.We first present an idealized version of the above CG based learning algorithm, where we assume access to the underlying distribution D (see Algorithm 3). Each iteration of this algorithm maintains a classifier h j and (approximately) maximizes a decomposable performance metric given by the gradient of ψ at the confusion matrix for h j . For a concave and smooth ψ, one can derive, by extending the standard CG analysis, the following regret bound guarantee for this algorithm  #b6 ; we shall later see how this guarantee can be extended to non-smooth performance metrics. Since in practice, one does not have access to D, we consider a sample-based version of Algorithm 3, where in each iteration, the gradient for the current classifier is computed using a sample-based estimate of the confusion matrix of the classifier and the solution to the linear maximization step Algorithm 3 Idealized Conditional Gradient Algorithm for Multi-class Non-decomposable Performance Metric.Input: D, ψ : [0, 1] n×n → R + Parameters: κ ∈ N, ǫ > 0 Choose an initial classifier h 0 :X → ∆ n T = κm for j = 1 to T do G j = ∇ψ(conf(h j−1 , D))Approximate Linear Maximization:Choose u j : X → ∆ n such that G j , conf(u j , D) ≥ max u: X → ∆n G j , conf(u, D) − ǫ Construct h j : X → ∆ n such that h j (x) = 1 − 2 j+1 h j−1 (x) + 2 j+1 u j (x), ∀x ∈ X end for Output: h FW ≡ h Tis a plug-in classifier obtained from a suitable class probability estimation model (see Algorithm 4); we shall refer to this method as the 'BayesCG' algorithm. Clearly, this algorithm runs in time polynomial in the number of classes n and number of training example m.It is important to note that the BayesCG algorithm essentially mimics the earlier idealized algorithm, with the approximation factor ǫ in the linear maximization step now depending on the input training sample. Using this observation and the above regret bound guarantee for the idealized algorithm, we now show that the BayesCG algorithm is consistent for any concave smooth performance metric. regret ψ D [ h FW S ] ≤ 4LE X η S ′ (X) − η(X) 1 + 4βn 2 C n 2 log(n) log(αm) + log(n 2 /δ) αm + 8β κm + 2 ,where C > 0 is a distribution-independent constant. Thus, if the CPE algorithm used in Algorithm 4 is such thatE X η S ′ (X) − η(X) 1 P − → 0, then regret ψ D [ h S ] P − → 0 (as m → ∞).A key element of the proof of the above theorem is in showing that the BayesCG algorithm solves the CG linear maximization step approximately; this makes use of Lemma 8 and Lemma 6 in the previous section (along with the smoothness assumption on ψ). Learn η S ′ = CPE(S ′ ), where CPE : ∪ ∞ m=1 (X × [n]) m → ∆ X n is a suitable CPE algorithm Choose an initial classifier h 0 : X → ∆ n T = κm for j = 1 to T do G j = ∇ψ(conf( h j−1 , D S ′′ ))Approximate Linear Maximization:Construct u j : X → ∆ n such that u j i (x) = 1 if i = argmax y∈[n] g j⊤ y η S ′ (x), ∀x ∈ X Construct h j : X → ∆ n such that h j (x) = 1 − 2 j+1 h j−1 (x) + 2 j+1 u j (x), ∀x ∈ X end for Output: h FW S ≡ h T where ǫ S = 2LE X η S ′ (X) − η(X) 1 + 2βn 2 C n 2 log(n) log(αm) + log(n 2 /δ) αm ,for a distribution-independent constant C > 0.Proof of Theorem 10. The proof follows from Lemma 11 and the regret bound in Theorem 9.While the consistency result in Theorem 10 applies only to smooth performance metrics, for nonsmooth performance metric such as the G-mean metric and several others in Table 1, one can apply Algorithm 4 to a suitable smoothed version of the metric (indicated below by ψ ρ : [0, 1] n×n → R + for some ρ ∈ (0, 1), with lim ρ → 0 ψ ρ = ψ), and obtain the following regret bound for the original performance metric.Theorem 12 (Regret Bound for Sample-based Conditional Gradient Algorithm for a Larger Family of Non-decomposable Metrics). Let S = (S ′ , S ′′ ) ∈ (X × [n]) m be the given training sample drawn i.i.d. from distribution D. Let ψ : [0, 1] n×n → R + be such that for any ρ ∈ (0, 1), there exists ψ ρ : [0, 1] n×n → R + which is concave over C D , L ρ -Lipschitz w.r.t. the ℓ 1 norm over C D S ′′ and β ρ -smooth w.r.t. the ℓ 1 -norm, withsup C ∈ C D |ψ(C) − ψ ρ (C)| ≤ θ(ρ),for some strictly increasing function θ : R + → R + . Let h FW,ρ S be the classifier learned by Algorithm 4 when applied to ψ ρ with training sample S and parameters κ ∈ N and α ∈ (0, 1). Then for any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m )regret ψ D [ h FW,ρ S ] ≤ 4L ρ E X η S ′ (X) − η(X) 1 + 4β ρ n 2 C n 2 log(n) log(αm) + log(n 2 /δ) αm + 8β ρ κm + 2 + 2θ(ρ),where C > 0 is a distribution-independent constant.  Table 1 for the form of ψ for these metrics). A smoothed version of this function ψ ρ : [0, 1] n×n → R + for any ρ ∈ (0, 1) is given in the second column; in each case, ψ ρ is also concave. The form of θ(ρ) (defined in Theorem 12), the Lipschitz constant L ρ and smoothness parameter β ρ for the smoothed function are given respectively in the third, fourth and fifth columns.Here, we denote π min = min y∈[n] π y . Details of all calculations can be found in Appendix B y =y C y, y + ρ n y=1 C y, y + ρ2 1 π min √ n ρ 1 √ n 1 ρ 2 √ n 1 ρ 2 1 + 1 ρ G-Mean (GM) n y=1Cy,y + ρ 

Instantiation to specific concave multi-class performance metrics
We now instantiate the regret bound in Theorem 12 to several performance metrics in Table 1 which happen to be concave but non-smooth. Table 2 contains the smoothed version of these performance metrics, along with the resulting Lipschitz and smoothness constant. We then have the following consistency result for these metrics as a corollary of Theorem 12. Remark 4 (BayesCG is consistent for non-continuous distributions). While the consistency guarantee for the brute-force plug-in method discussed in Section 4 makes crucial use of the form of the optimal classifier for the given performance metric, requiring a continuity assumption on the distribution (Assumption A), the BayesCG method requires no such assumption on the distribution. In particular, when a distribution does not satisfy Assumption A, a randomized classifier can yield a strictly higher performance value than the best deterministic classifier for the given performance metric (e.g., for the distribution described in Remark 1, the randomized classifier h * yields a strictly higher H-mean value than all deterministic classifiers). Since the brute-force plug-in algorithm learns a deterministic classifier of a specific form, it fails to be consistent for such distributions.On the other hand, the final classifier returned by the BayesCG algorithm is a randomized classifier obtained from an ensemble deterministic classifiers, where the size of this ensemble grows with the number of training examples, thus enabling this method to handle a general distribution that does not satisfy Assumption A.Remark 5 (Extension to non-differentiable concave metrics). The consistency results that we have seen so far for the BayesCG algorithm have assumed that the given performance metric is concave and differentiable, and hence do not apply to the min-max metric in Table 1, which is (concave, but) not differentiable. It is indeed possible to derive a version of the BayesCG algorithm that is consistent for such continuous concave metrics, by working with a smooth differentiable approximation to these performance metrics  #b36 . The proof of consistency for the resulting learning algorithm is however slightly more involved, requiring us to deal with approximate gradients to these metrics  #b36 , and is reserved for a longer version of this paper.Remark 6 (Extension to fractional-linear metrics). We would also like to point out that there is a variant of the CG method used in the BayesCG algorithm that can be applied to non-concave optimization objectives  #b37 , but this method can get stuck in a stationary point that is not a globally optimal solution, and hence the resulting learning algorithm need not be consistent for a general non-concave performance metric. However, one can show (without an explicit regret bound) that this variant of the BayesCG algorithm is consistent for a special class of non-concave performance metrics that are fractional-linear, such as the binary F-measure, the JAC metric and the multiclass micro F-measure, where owing to the pseudo-linear structure of these performance metrics, all stationary points are globally optimal solutions  #b38 .

Conclusion
We provide a unified framework for analysing a general non-decomposable multi-class performance metric that cannot be expressed as a sum of losses on individual examples such as the multi-class F-measure and the multi-class G-mean metrics. Using this framework, we give a characterization of the optimal classifier for a general non-decomposable performance metric, subsuming several previous results on binary non-decomposable metrics. We then design a efficient learning algorithm based on the conditional gradient (CG) optimization method that is consistent for a large family of concave performance metrics. Our proof techniques are novel and involve application of tools from the optimization literature, particularly those used in the convergence analysis of the CG method.

A.2 Proof of Lemma 3
While Lemma 3 is simple to state, its proof is rather intricate and hence we give its proof via several intermediate lemmas and propositions.Lemma 14 (Confusion matrix as an integration). Let f : ∆ n → ∆ n . Thenconf(f • η, D) = p∈∆n p(f (p)) ⊤ dν(p) .Proof.conf(f • η, D) i,j = E (X,Y )∼D [f j (η(X)) · 1(Y = i)] = E p∼ν E (X,Y )∼D f j (p) · 1(Y = i) η(X) = p = E p∼ν p i f j (p)Proposition 15 (Sufficiency of conditional probability). Let D be a distribution over X × Y.For any randomized classifier h : X → ∆ n there exists another randomized classifier h ′ :X → ∆ n such that conf(h, D) = conf(h ′ , D) and h ′ is such that h ′ (x) = f (η(x)), for some f : ∆ n → ∆ n .Proof. Let h : X → ∆ n . Define f : ∆ n → ∆ n as follows,f (p) = E X∼D X [h(X)|η(X) = p] .We then have for any i, j ∈ [n] that,conf(h, D) i,j = E (X,Y )∼D [h j (X) · 1(Y = i)] = E p∼ν E (X,Y )∼D [h j (X) · 1(Y = i)|η(X) = p] = E p∼ν E (X,Y )∼D [h j (X)|η(X) = p] · E (X,Y )∼D [·1(Y = i)|η(X) = p] = E p∼ν f j (p)p i = conf(f • η, D) i,jwhere the third equality follows because, given η(X), the random variables X and Y are independent.Lemma 16 (Continuity of the conf mapping). Let D be a distribution over X × Y. Letf 1 , f 2 : ∆ n → ∆ n .Thenconf(f 1 • η, D) − conf(f 2 • η, D) 1 ≤ p∈∆n ||f 1 (p) − f 2 (p)|| 1 dν(p) . Proof. Let f 1 , f 2 : ∆ n → ∆ n conf(f 1 • η, D) − conf(f 2 • η, D) = p∈∆n p(f 1 (p) − f 2 (p)) ⊤ dν(p) conf(f 1 • η, D) − conf(f 2 • η, D) 1 ≤ p∈∆n ||p(f 1 (p) − f 2 (p)) ⊤ || 1 dν(p) = p∈∆n ||p|| 1 ||f 1 (p) − f 2 (p)|| 1 dν(p) = p∈∆n ||f 1 (p) − f 2 (p)|| 1 dν(p)Lemma 17. Let d > 0 be any integer. Let V ⊆ R d be compact and convex. Let f : R d → R be an affine function such that it is non-constant over V. Let V be a vector valued random variable taking values uniformly over V. There exists a constant α > 0 such that for all c ∈ R and ǫ ∈ R + we haveP(f (V ) ∈ [c, c + ǫ]) ≤ αǫ .Proof. Let us assume for now that affine hull of V is the entire space R d . For any integer i and set A, let vol i (A) denote the i-th dimensional volume of the set A. Note that vol i (A) is undefined if the affine-hull dimension of A is greater than i and is equal to zero if the affine-hull dimension of A is lesser than i.For any r > 0 and any integeri > 0 let B i (r) ⊆ R i denote the set B i (r) = {x ∈ R i : ||x|| 2 ≤ r} . Also let R be the smallest value such that V ⊆ B d (R).Let the affine function f be such that for all x ∈ R d , the value f (x) = g ⊤ x + u. By the assumption of non-constancy of f on V we have that g = 0.We now have thatP(f (V ) ∈ [c, c + ǫ]) = vol d {v ∈ V : c − u ≤ g ⊤ v ≤ c − u + ǫ vol d (V) ≤ vol d {v ∈ B d (R) : c − u ≤ g ⊤ v ≤ c − u + ǫ vol d (V) ≤ ǫ · vol d−1 B d−1 (R) vol d (V)||g|| 2 .The last inequality follows from the observation that d-volume of a strip of a d dimensional sphere of radius r is at most the d − 1 volume of a d − 1 dimensional sphere of radius r times the width of the strip, and the width of the strip under consideration here is simply ǫ||g|| 2 .Finally, if the affine hull of V is not the entire space R d , one can simply consider the affine-hull of V to be the entire space and all the above arguments hold with some affine transformations and a smaller d.Lemma 18. Let D be a distribution over X × Y. Let G ∈ R n×n be such that no two columns are identical. Let the measure over conditional probabilities ν, be absolutely continuous w.r.t. the base measure µ. Let c ≥ 0. Let A c ⊆ ∆ n be the setA c = {p ∈ ∆ n : (p ⊤ G) (1) − (p ⊤ G) (2) ≤ c} ,where for any vector v ∈ R n and integer i ∈ [n], the scalar (v) (i) denotes the i th element among the components of v, when they are arranged in descending order. Let r : R + → R + be the function defined as r(c) = ν(A c ) .Then (a) r is a monotonically increasing function.(b) There exists a C > 0 such that r is a continuous function over [0, C].(c) r(0) = 0.

Proof. Part (a):
The fact that r is a monotonically increasing function is immediately obvious from the observation that A a ⊆ A b for any a < b.Part (b):Let C = 1 2 min{d ∈ R : g y − g y ′ = de for some y, y ′ ∈ [n], y = y ′ } ,where e is the all ones vector. If there exists no y, y ′ such that g y − g y ′ is a scalar multiple of e, then we simply set C = ∞. Note that by our assumption on unequal columns on G, we always have C > 0. For any c > 0 and y, y ′ ∈ [n] with y = y ′ , define the set A y,y ′ c asA y,y ′ c = {p ∈ ∆ n : p ⊤ g y − p ⊤ g y ′ ≤ c} .For any c, ǫ > 0, it can be clearly seen thatν(A c+ǫ ) − ν(A c ) = ν(A c+ǫ \ A c ) , A c+ǫ \ A c ⊆ y,y ′ ∈[n],y =y ′ A y,y ′ c+ǫ \ A y,y ′ c , ν(A c+ǫ \ A c ) ≤ y,y ′ ∈[n],y =y ′ ν A y,y ′ c+ǫ \ A y,y ′ c .Hence, our proof for continuity of r would be complete, if we show that ν A y,y ′ c+ǫ \ A y,y ′ c goes to zero as ǫ goes to zero for all y = y ′ and c ∈ [0, C]. Let c ∈ [0, C] and y, y ′ ∈ [n] with y = y ′ A y,y ′ c+ǫ \ A y,y ′ c = {p ∈ ∆ n : c < p ⊤ (g y − g y ′ ) ≤ c + ǫ} .If g y − g y ′ = de for some d, we have that p ⊤ (g y − g y ′ ) = d and d > C by definition of C. Hence for small enough ǫ the set A y,y ′ c+ǫ \ A y,y ′ c is empty. If g y − g y ′ is not a scalar multiple of e, then p ⊤ (g y − g y ′ ) is a non-constant linear function of p over ∆ n . From Lemma 17, µ A y,y ′ c+ǫ \ A y,y ′ c goes to zero as ǫ goes to zero. And by the absolute continuity of ν w.r.t. µ, we have ν A y,y ′ c+ǫ \ A y,y ′ c goes to zero as ǫ goes to zero.As the above arguments hold for any c ∈ [0, C] and y, y ′ ∈ [n] with y = y ′ , the proof of part (b) is complete.Part (c):We have,A 0 ⊆ y,y ′ ∈[n],y =y ′ A y,y ′ 0 ∩ A y ′ ,y 0 .To show r(0) = 0, we show µ A y,y ′ 0 ∩ A y ′ ,y 0 = 0 for all y = y ′ . Let y, y ′ ∈ [n] with y = y ′ , thenA y,y ′ 0 ∩ A y ′ ,y 0 = {p ∈ ∆ n : p ⊤ (g y − g y ′ ) = 0} .If g y − g y ′ = de for some d = 0, the above set is clearly empty. If g y − g y ′ is not a scalar multiple of e, then p ⊤ (g y − g y ′ ) is a non-constant linear function of p over ∆ n , and hence by Lemma 17, we have that µ A y,y ′ 0 ∩ A y ′ ,y 0 = 0. By the absolute continuity of ν w.r.t. µ we have thatν A y,y ′ 0 ∩ A y ′ ,y 0 = 0.As the above arguments hold for any y, y ′ ∈ [n] with y = y ′ , the proof of part (c) is complete.

Lemma 19 (Uniqueness of Optimal Confusion Matrix for Special Gain Matrices).
Let D be a distribution over X × Y. Let ν be absolutely continuous w.r.t. µ, let G ∈ R n×n be such that no two columns are identical. Then,argmax C∈C D G, C = argmax C∈C D G, C .Moreover, the above set is a singleton.Proof. We shall proceed by showing that the maximizer of G, C over C D is unique and then show that there exists no other maximizer of G, C over C D . Using Proposition 15, we will only consider classifiers h : X → ∆ n that can be be decomposed as h = f • η for some f : ∆ n → ∆ n .From Equation 2, we have that any f * ∈ argmax f :∆n → ∆n G, conf(f • η, D) is such that the following holds ν-almost everywheref * i (p) > 0 only if i ∈ argmax y∈[n] g ⊤ y p .We will show that the maximizer of G, C over C D is unique, simply by showing that any f * satisfying the above equation has the same conf(f * • η, D), which we in turn show by proving that any two functions f * satisfying the above condition is the same ν almost everywhere.For a given p ∈ ∆ n , if T p △ = argmax y∈[n] g ⊤ y p is a singleton, then f * (p) is uniquely defined due to the sum to one constraint. If p is such that |T p | > 1, then (p ⊤ G) (1) − (p ⊤ G) (2) = 0. From Lemma 18, the ν-measure of all such p vectors is exactly equal to r(0) = 0.This completes the proof of the uniqueness of the maximizer of G, C over C D . Let us denote it by C * . Also let f * : ∆ n → ∆ n with C * = conf(f * • η, D) refer to the following fixed function:f * i (p) = 1 if i = argmax y∈[n] p ⊤ g y 0 otherwise .Let C ′ ∈ argmax C∈C D G, C . Let us assume C * = C ′ .||C ′ − C * || 1 = n i=1 n j=1 |C ′ i,j − C * i,j | = γ > 0 .We shall go on to derive a contradiction as follows. By virtue of C ′ ∈ C D there exists a sequence of classifiers whose confusion matrices approach C ′ . And hence these classifiers are all 'close' to maximal for the gain matrix G. We then show that these classifiers perform strictly worse than h * by exploiting that the confusion matrices of these classifiers are bounded away from C * . This provides us the required contradiction.As C ′ ∈ C D , we have that for all ǫ > 0, there exists C ǫ ∈ C D , such that ||C ǫ − C ′ || 1 ≤ ǫ. This implies that||C ǫ − C * || 1 ≥ γ − ǫ ,(5)G, C ǫ ≥ G, C ′ − ||G|| ∞ ǫ ≥ G, C * − ||G|| ∞ ǫ .(6)Letf ǫ : ∆ n → ∆ n be s.t. C ǫ = conf(f ǫ • η, D). Let B = {p ∈ ∆ n : ||f * (p) − f ǫ (p)|| 1 ≥ γ 4 }.

Applying Equation 5 and Lemma 16 we have
γ − ǫ ≤ conf(f * • η D , D) − conf(f ǫ • η D , D) 1 ≤ p∈∆n ||f * (p) − f ǫ (p)|| 1 dν(p) ≤ p∈B 2dν(p) + p / ∈B γ 4 dν(p) = 2ν(B) + γ 4 (1 − ν(B)) ≤ 2ν(B) + γ 4 ν(B) ≥ 3γ 8 − ǫ 2(7)For any c > 0, define A c ⊆ ∆ n as= p∈B\Ac p ⊤ G(f * (p) − f ǫ (p))dν D (p) + p∈∆n\(B\Ac) p ⊤ G(f * (p) − f ǫ (p))dν D (p) ≥ p∈B\Ac p ⊤ G(f * (p) − f ǫ (p))dν D (p) = p∈B\Ac (p ⊤ G) (1) − p ⊤ Gf ǫ (p) dν D (p) ≥ p∈B\Ac (p ⊤ G) (1) − 1 − γ 8 (p ⊤ G) (1) − γ 8 (p ⊤ G) (2) dν D (p) = p∈B\Ac γ 8 (p ⊤ G) (1) − (p ⊤ G) (2) dν D (p) ≥ γc 8 5γ 16 − ǫ 2 If ǫ ≤ γ 2 , we have G, C * − G, C ǫ ≥ γ 2 c 128 .The above holds for any ǫ ∈ (0, γ 2 ], and both γ and c do not depend on ǫ. For small enough ǫ, this contradicts Equation  $b6 . We thus have a contradiction for our assumption C * = C ′ .The proof of Lemma 3 simply follows from Lemma 19 by observing that if ψ satisfies Assumption B, then no two columns of its gradient at any point are identical.

A.3 Proof of Lemma 5
Lemma (Convergence of conf for fixed gain matrix). Let D satisfy Assumption A. Let η S : X → ∆ n be a class probability estimation model learned using a sample S drawn i.i.d. from D m . For a fixed gain matrix G ∈ [0, 1] n×n such that no two columns are identical, let h G : X → ∆ n and h G : X → ∆ n be classifiers constructed as follows:h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η(x), ∀x ∈ X and h G (x) i = 1 if i = argmax y∈[n] g ⊤ y η S (x), ∀x ∈ X . If η S is such that E X η S (X)−η(X) 1 P − → 0, then ∀i, j, conf( h G , D) ij P − → conf(h G , D) ij (as m → ∞).Proof. Fix ǫ, δ, δ ′ > 0. By virtue of E X η S (X) − η(X) 1 P − → 0, there exists a M ǫ,δ , such that for all m > M ǫ,δ we have with probability at least 1 − δ over the draw of S thatE X η S (X) − η(X) 1 < ǫ .Let m > M ǫ,δ . By Markov's inequality we have thatP X η S (X) − η(X) 1 > E X η S (X) − η(X) 1 δ ′ ≤ δ ′ .Hence with probability at least 1 − δ − δ ′ over the draw of both S and X, we haveη S (X) − η(X) 1 ≤ ǫ δ ′ .(10)Based on the above inequality we will argue that h G and h G have the same value for most instances.For any x ∈ X . Let y * (x) = argmax y∈[n] g ⊤ y η(x) and y * (x) = argmax y∈[n] g ⊤ y η S (x). The following implications hold:h G (X) = h G (X) ⇒ y * (X) = y * (X) ⇒ g ⊤ y * (X) η(X) > g ⊤ y * (X) η(X) and g ⊤ y * (X) η S (X) < g ⊤ y * (X) η S (X)Using equation 10 the following holds with probability at least 1 − δ − δ ′ over X and S:h G (X) = h G (X) ⇒ g ⊤ y * (X) η(X) < g ⊤ y * (X) η(X) < g ⊤ y * (X) η(X) + 2 ǫ δ ′ ⇒ g y * (X) − g y * (X) ⊤ η(X) ∈ 0, 2ǫ δ ′ ⇒ ∃y, y ′ ∈ [n], y = y ′ s.t. g y − g y ′ ⊤ η(X) ∈ 0, 2ǫ δ ′For any y, y ′ ∈ [n] with y = y ′ define the set A y,y ′ ⊆ ∆ n asA y,y ′ = {p ∈ ∆ n : g y − g y ′ ⊤ p ∈ 0, 2ǫ/δ ′ } We thus have that h G (X) = h G (X) with probability at least 1 − δ − δ ′ − y,y ′ ∈[n],y =y ′ ν(A y,y ′ ).As G has no two identical columns we have that g y − g y ′ ⊤ p is never zero for all p ∈ ∆ n . Let y, y ′ ∈ [n] with y = y ′ . If g y − g y ′ = de for some and d > 0, we have that A y,y ′ is empty for small enough ǫ δ ′ . Otherwise, we have by Lemma 17 that µ(A y,y ′ ) approaches 0 as ǫ δ ′ approaches 0. And by the absolute continuity of ν w.r.t. µ , we have that ν(A y,y ′ ) also approaches 0 as ǫ δ ′ approaches 0.Thus by having ǫ, δ, δ ′ and ǫ δ ′ simultaneously approach zero, we have that the probability of the statement h G (X) = h G (X) approaches 1. And hence ∀i, j, conf( h G , D) ijP − → conf(h G , D) ij .

A.4 Proof of Lemma 6
Lemma (Uniform Convergence Generalization Bound for conf Over H µ ). Let µ : X → R n be a fixed function and S ∈ (X × [n]) m be a sample drawn i.i.d. according to D m . For any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m ),sup h ∈ Hµ conf(h, D) − conf(h, D S ) ∞ ≤ C n 2 log(n) log( m) + log(n 2 /δ) m ,where C > 0 is a distribution-independent constant.Proof. First observe that every function h ∈ H µ is such that for all x ∈ X , the vector h(x) is always one of the co-ordinate vectors in R n . For any a, b ∈ [n] we have,sup h∈Hµ [conf(h, D S )] a,b − [conf(h, D)] a,b = sup h∈Hµ 1 m m i=1 (1(y i = a, h b (x i ) = 1) − E[1(Y = a, h b (X) = 1)]) = sup h∈H b µ 1 m m i=1 (1(y i = a, h(x i ) = 1) − E[1(Y = a, h(X) = 1)]) , where H b µ = {h : X → {0, 1} : ∃G ∈ R n×n , ∀x ∈ X , h(x) = 1(b = argmax t∈[n] g ⊤ t µ(x))}. The set H bµ can be seen as hypothesis class whose concepts are the intersection of n halfspaces in R n (corresponding to µ(x)) through the origin. Hence we have from Lemma 3.2.3 of  #b39   #b39  that the VC-dimension of H b µ is at most 2n 2 log(3n). From standard uniform convergence arguments we have that the following holds with probability 1 − δ,sup h∈Hµ [conf(h, D S )] a,b − [conf(h, D)] a,b ≤ C n 2 log(n) log( m) + log( 1 δ ) mwhere C > 0 is some constant. Applying union bound for all a, b ∈ [n] we have that the following holds with probability 1 − δ Proof. Let h * : X → ∆ n be such thath * i (x) = 1 if i ∈ argmax y∈[n] g ⊤ y η(x) .

Hence by Equation 2 we have that
h * ∈ argmax h:X → ∆n G, conf(h, D) .We have thatmax h:X → ∆n G, conf(h, D) − G, conf( h G , D) = G, conf (h * , D) − G, conf( h G , D) = E X [η(X)] ⊤ [Gh * (X)] − E X [η(X)] ⊤ [G h G (X)] = E X [η(X)] ⊤ [Gh * (X)] − E X [η(X) − η(X)] ⊤ [G h G (X)] − E X [ η(X)] ⊤ [G h G (X)] ≤ E X [η(X)] ⊤ [Gh * (X)] − E X [η(X) − η(X)] ⊤ [G h G (X)] − E X [ η(X)] ⊤ [Gh * (X)] = E X [η(X) − η(X)] ⊤ [G][h * (X) − h G (X)]≤ 2LE X ||η(X) − η(X)|| 1 .

A.6 Proof of Theorem 7
Theorem (Regret Bound for Brute-force Plug-in Algorithm for Convex-like Non-decomposable Metrics). Let D satisfy Assumption A, and ψ : [0, 1] n×n → R + satisfy Assumption B w.r.t. D. Furthermore, let ψ be L-Lipschitz w.r.t. the ℓ 1 norm over C D , and be such that there exists ξ > 0 such that ψ(C) − ψ(C ′ ) ≤ ξ ∇ψ(C), C − C ′ , ∀C, C ′ ∈ C D . If h S is the classifier learned by Algorithm 2 using training sample S = (S ′ , S ′′ ) ∈ (X × [n]) m with parameter α ∈ (0, 1), then for any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m ):regret ψ D [ h S ] ≤ 2LξE X η S ′ (X) − η(X) 1 + 2LC n 2 log(n) log(αm) + log(n 2 /δ) αm ,where C > 0 is a distribution-independent constant.Proof. By Theorem 2, a ψ-optimal classifier exists. Let h * : X → ∆ n be one such classifier and let G * = ∇ψ(conf(h * , D)). Further, let h G * : X → ∆ n be a classifier such that h G * (x)] i = 1 if i = argmax y∈[n] g * ⊤ y η(x); then again by Theorem 2,P D [h G * ] = P D [h * ]. Also let h G * : X → ∆ n be such that h G * (x)] i = 1 if i = argmax y∈[n] g * ⊤ y η S ′ (x). Thus, regret ψ D [ h S ] = P D [h * ] − P D [ h S ] = P D [h G * ] − P D [ h S ] = P D [h G * ] − P D [ h G * ] + P D [ h G * ] − P D S ′′ [ h G * ] + P D S ′′ [ h G * ] − P D [ h S ] ≤ P D [h G * ] − P D [ h G * ] + P D [ h G * ] − P D S ′′ [ h G * ] + P D S ′′ [ h S ] − P D [ h S ] ≤ P D [h G * ] − P D [ h G * ] + sup h ∈ H η S ′ P D [h] − P D S ′′ [h] + sup h ∈ H η S ′ P D S ′′ [h] − P D [h] = P D [h G * ] − P D [ h G * ] + 2 sup h ∈ H η S ′ P D [h] − P D S ′′ [h] = ψ(conf(h G * , D)) − ψ(conf ( h G * , D)) + 2 sup h ∈ H η S ′ ψ(conf(h, D) − ψ(conf(h, D S ′′ )) ≤ ξ G * , conf(h G * , D) − G * , conf( h G * , D) + 2L sup h ∈ H η S ′ conf(h, D) − conf(h, D S ′′ ) 1 ≤ 2LξE X η S ′ (X) − η(X) 1 + 2LC n 2 log(n) log(αm) + log(n 2 /δ) αm ,where the fourth step follows by definition of h S , the previous to last step follows from the 'convexity-like' assumption on ψ, and the last step follows from Lemmas 8 and 6.A.7 Proof of Theorem 9 Proof. We use the result from  #b6 . To apply this result we must upper bound the 'curvature constant' C ψ of ψ and the approximation factor δ (which we call δ apx ).C ψ = sup C 1 ,C 2 ∈C D ,γ∈[0,1] 2 γ 2 ψ C 1 + γ(C 2 − C 1 ) − ψ C 1 − γ C 2 − C 1 , ∇ψ(C 1 ) ≤ sup C 1 ,C 2 ∈C D ,γ∈[0,1] 2 γ 2 β 2 γ 2 ||C 1 − C 2 || 2 1 ) = 4βwhere the second step follows from the β-moothness of ψ over C D w.r.t. the ℓ 1 norm, and the last step follows from the observation that the entries of C 1 and C 2 sum to 1 and are non-negative.One can also see that the approximation factor δ apx ≤ (T +1)ǫ C ψ . Theorem 1 from  #b6  gives usregret ψ D [h FW ] = max C∈C D ψ(C) − ψ(conf(h FW )) ≤ 2C ψ T + 2 (1 + δ apx ) ≤ 2C ψ T + 2 1 + (T + 1)ǫ C ψ ≤ 8β T + 2 + 2(T + 1)ǫ T + 2 ≤ 8β T + 2 + 2ǫ = 8β κm + 2 + 2ǫ.

A.8 Proof of Lemma 11
Lemma (Approximation Factor for Linear Maximization Step in Algorithm 4). Let ψ : [0, 1] n×n → R + satisfy the assumptions in Theorem 10. Let u j and h j be the classifiers constructed in any given iteration j of Algorithm 4 using training sample S = (S ′ , S ′′ ) ∈ (X × [n]) m and parameter α ∈ (0, 1). Also, let G j = ∇ψ(conf( h j−1 , D)). Then for any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m ) for all 1 ≤ j ≤ TG j , conf( u j , D) ≥ max u: X → ∆n G j , conf(u, D) − ǫ S , where ǫ S = 2LE X η S ′ (X) − η(X) 1 + 2Cβn 2 n 2 log(n) log(αm) + log(n 2 /δ) αm ,for a distribution-independent constant C > 0.Proof. Let 1 ≤ j ≤ T . Let G j = ∇ψ(conf( h j−1 , D S ′′ )). Also let u * ∈ argmax u:X → ∆n G j , conf(u, D) . We then have by the definition of u j and Lemma 8 thatG j , conf(u * , D) − G j , conf( u j , D) ≤ max u:X → ∆n G j , conf(u, D) − G j , conf( u j , D) ≤ 2LE X η S ′ (X) − η(X) 1 (11) Also G j − G j ∞ = ∇ψ(conf( h j−1 , D S ′′ )) − ∇ψ(conf( h j−1 , D)) ∞ ≤ β conf( h j−1 , D S ′′ ) − conf( h j−1 , D) 1 ≤ βn 2 conf( h j−1 , D S ′′ ) − conf( h j−1 , D) ∞ ≤ βn 2 max k∈[j−1] conf( u k , D S ′′ ) − conf( u k , D) ∞ ≤ βn 2 sup h∈H η S ′ conf(h, D S ′′ ) − conf(h, D) ∞(12)We then havemax u: X → ∆n G j , conf(u, D) − G j , conf( u j , D) = G j , conf(u * , D) − G j , conf( u j , D) = G j , conf(u * , D) − G j , conf(u * , D) + G j , conf(u * , D) − G j , conf( u j , D) ≤ G j − G j ∞ conf(u * , D) 1 + G j , conf(u * , D) − G j , conf( u j , D) = G j − G j ∞ + G j , conf(u * , D) − G j , conf( u j , D) = G j − G j ∞ + G j , conf(u * , D) − G j , conf( u j , D) + G j , conf( u j , D) − G j , conf( u j , D) ≤ G j − G j ∞ + 2LE X η S ′ (X) − η(X) 1 + G j , conf( u j , D) − G j , conf( u j , D) ≤ G j − G j ∞ + 2LE X η S ′ (X) − η(X) 1 + G j − G j ∞ conf( u j , D) 1 = 2 G j − G j ∞ + 2LE X η S ′ (X) − η(X) 1 ≤ 2βn 2 sup h∈H η S ′ conf(h, D S ′′ ) − conf(h, D) ∞ + 2LE X η S ′ (X) − η(X) 1(13)where the first and third inequalities in the above are due to the Holder's inequality, the second inequality is due to Equation 11 and the last inequality is due to Equation 12. Applying Lemma 6 to Equation 13 the proof is complete.

A.9 Proof of Theorem 12
Theorem (Regret Bound for Sample-based Conditional Gradient Algorithm for a Larger Family of Non-decomposable Metrics). Let S = (S ′ , S ′′ ) ∈ (X × [n]) m be the given training sample drawn i.i.d. from distribution D. Let ψ : [0, 1] n×n → R + be such that for any ρ ∈ (0, 1), there exists ψ ρ : [0, 1] n×n → R + which is concave over C D , L ρ -Lipschitz w.r.t. the ℓ 1 norm over C D S ′′ and β ρ -smooth w.r.t. the ℓ 1 -norm, withsup C ∈ C D |ψ(C) − ψ ρ (C)| ≤ θ(ρ),for some strictly increasing function θ : R + → R + . Let h FW,ρ S be the classifier learned by Algorithm 4 when applied to ψ ρ with training sample S and parameters κ ∈ N and α ∈ (0, 1). Then for any δ ∈ [0, 1], we have with probability at least 1 − δ (over draw of S from D m )regret ψ D [ h FW,ρ S ] ≤ 4L ρ E X η S ′ (X) − η(X) 1 + 4β ρ n 2 C n 2 log(n) log(αm) + log(n 2 /δ) αm + 8β ρ κm + 2 + 2θ(ρ),where C > 0 is a distribution-independent constant.Proof. From Theorem 10 we have thatregret ψρ D [ h FW,ρ S ] ≤ 4L ρ E X η S ′ (X) − η(X) 1 + 4β ρ n 2 C n 2 log(n) log(αm) + log(n 2 /δ) αm + 8β ρ κm + 2 .For simplicity assume that the maximizer of ψ(conf(h, D)) over h : X → ∆ n exists. Let h * ∈ argmax h:X → ∆n ψ(conf(h, D)). We then have that Table 2 We now give details of derivation of the function θ (defined in Theorem 12), Lipschitz constant L ρ , and the smoothness parameter β ρ for the smoothed performance metric ψ ρ . In each case, we make use the fact that the Lipschitz constant can be obtained by bounding the maximum absolute entry (ℓ ∞ norm) of the gradient of ψ and the smoothness parameter is obtained by bounding the maximum absolute entry (ℓ ∞ norm) of its Hessian.regret ψ D [ h FW,ρ S ] = sup h:X → ∆n ψ(conf(h, D)) − ψ(conf( h FW,ρ S , D)) = ψ(conf(h * , D)) − ψ(conf( h FW,ρ S , D)) ≤ ψ ρ (conf(h * , D)) − ψ ρ (conf( h FW,ρ S , D)) + 2θ(ρ) ≤ max h:X → ∆n ψ ρ (conf(h, D)) − ψ ρ (conf( h FW,ρ S , D)) + 2θ(ρ) = regret ψρ D [ h FW,ρ S ] + 2θ(ρ)

B Details of Calculations for Smoothed Performance Metrics in


H-mean.
For the H-mean, ψ H (C) = n n y=1 n y=1 C y, y Cy,y −1 is n π min -Lipschitz over C D . Hence we have θ(ρ) = n π min ρ. The gradient of ψ H ρ is given by: The Lipschitz constant L ρ for ψ H ρ is then given by a bound on the ℓ ∞ norm of the above gradient.∇ C uu ′ ψ H ρ (C) =             ∇ψ H ρ (C) ∞ ≤ max u ∈ [n]n n y=1 C u, y +ρ (Cu,u+ρ) 2 n y=1 n y=1 C y, y + ρ Cy,y+ρ2 ≤ max u ∈ [n]n n y=1 C u, y +ρ n y=1 C u, y +ρ Cu,u+ρ 2 n y=1 n y=1 C y, y + ρ Cy,y+ρ2 = max u ∈ [n]n π u + ρ n y=1 C u, y +ρ Cu,u+ρ n y=1 n y=1 C y, y + ρ Cy,y+ρ2 ≤ max u ∈ [n] n π u + ρ ≤ n ρ .Next, we calculate the smoothness parameter β ρ of ψ H ρ by computing the Hessian of ψ H ρ : ∇ 2 C uu ′ ,C vv ′ ψ H ρ (C) =                                                                                          −2n y =u C u,3 if u = u ′ = v = v ′ −2n y =u C u, y (Cu,u+ρ) 2 y =v C v, y (Cv,v+ρ) 2 n y=1 n y=1 C y, y + ρ Cy,y +ρ 3 if u = u ′ = v = v ′ 2n y =u C u, y (Cu,u+ρ) 2 1 Cv,v +ρ n y=1 n y=1 C y, y + ρ Cy,y +ρ 3 if u = u ′ = v = v ′ 2n 1 Cu,u+ρ y =v C v, y (Cv,v +ρ) 2 n y=1 n y=1 C y, y + ρ Cy,y +ρ 3 if u = u ′ = v = v ′ −2n 1 Cu,u+ρ 1 Cv,v +ρ n y=1 n y=1C y, y + ρ Cy,y +ρ 3 otherwise.Bounding the entry of the Hessian matrix corresponding to confusion matrix entries C u,u ′ and C u,u + ρ n y=1 C u, y + ρ 2 n y=1 n y=1 C y, y + ρ C y,y + ρC v,v ′ for u ′ = u = v = v ′ , we get |∇ 2 C uu ′ ,C vv ′ ψ Q ρ (C)| ≤ 2n y =u C u, y (C u,u + ρ) 2 n1 C u,u + ρ + 1 ≤ 2n n y=1 n y=1 C y, y + ρ C y,y + ρ 1 n y=1 C u, y + ρ 2 + C u,u + ρ n y=1 C u, y + ρ 2 ≤ 2n n 1 + ρ ρ 3 + 1 + ρ ρ 2 ≤ 4n 2 1 + ρ ρ 3 .The above bound can be shown to hold for all entries for which u = v. We next consider the case whenu ′ = u = v = v ′ ; assuming w.l.o.g. that C u,u < C v,v , we have |∇ 2 C uu ′ ,C vv ′ ψ Q ρ (C)| ≤ 2n n y=1 C u, y + ρ Cu,u+ρ n y=1 n y=1 C y, y + ρ Cy,y+ρ 3 1 ( n y=1 C u, y + ρ) 3 ≤ 2n ρ 3 ,where the same bound holds for all Hessian entries corresponding to u = v. The smoothness parameter in Table 2 then follows from the above bounds.Q-mean. For the Q-mean, ψ Q (C) = 1 − 1 n n y=1 1 − Cy,y n y=1 C y, y 2 is 1 π min √ n -Lipschitz over C D .Hence we have θ(ρ) = 1 √ nπ min ρ. The gradient and Hessian for ψ Q ρ are given by:∇ C uu ′ ψ Q ρ (C) =                    1 √ n ( y =u C u, y + ρ) 2( n y=1 C u, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 if u = u ′ − 1 √ n ( y =u C u, y + ρ)Cu,u ( n y=1 C u, y + ρ) 3 n y=1y =y C y, y + ρ n y=1 C y, y + ρ 2 otherwise .We next calculate the Lipschitz constant L ρ for ψ Q ρ by bounding the ℓ ∞ norm of its gradient. 1 √ n 1 y =y C y, y + ρ y =y C y, y + ρ n y=1 C u, y + ρ n y=1 y =y C y, y + ρ n y=1 C y, y + ρ∇ψ Q ρ (C) ∞ ≤ max u ∈ [n]2 ≤ max u ∈ [n] 1 √ n 1 y =y C y, y + ρ ≤ 1 √ nρ .We next calculate the Hessian and bound its norm.∇ 2 C uu ′ ,C vv ′ ψ Q ρ (C) =                                                                                                      − 1 √ n ( y =y C u, y + ρ) 2( n y=1 C u, y + ρ) 3 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 1 n y=1 C u, y + ρ + 1 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ 1√ n y =y C u, y + ρ ( n y=1 C u, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 − y =y C y, y − ρ + 2Cu,u n y=1 C u, y + ρ + Cu,u n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ − 1 √ n y =u C u, y + ρ ( n y=1 C u, y + ρ) 3 n y=1y =y C y, y + ρ n y=1 C y, y + ρ 2 y =y C y, y + ρ − 2Cu,u n y=1 C u, y + ρ − y =u C u, y − ρ n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ − 1 √ n Cu,u( n y=1 C u, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 −2( y =u C u, y + ρ) + Cu,u n y=1 C u, y + ρ + y =u C u, y + ρ n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ 1 √ n( y =u C u, y + ρ) 2( n y=1 C u, y + ρ) 3( y =y C v, y + ρ) 2( n y=1 C v, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ − 1 √ n( y =u C u, y + ρ)Cu,u ( n y=1 C u, y + ρ) 3( y =y C v, y + ρ) 2( n y=1 C v, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ − 1 √ n ( y =u C u, y + ρ) 2( n y=1 C u, y + ρ) 3( y =y C v, y + ρ)Cv,v ( n y=1 C v, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ2 3/2 if u ′ = u = v = v ′ 1 √ n( y =u C u, y + ρ)Cu,u ( n y=1 C u, y + ρ) 3( y =y C v, y + ρ)Cv,v ( n y=1 C v, y + ρ) 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 3/2 otherwise.We now obtain the smoothness parameter β ρ for ψ Q ρ . We start by bounding the entry of the Hessian matrix corresponding to confusion matrix entries C u,u ′ and C v,v ′ where u ′ = u = v = v ′ ; the same bound can be shown to hold for all entries for which u = v.

|∇ 2
C uu ′ ,C vv ′ ψ Q ρ (C)| = 1 √ n y =u C u, y + ρ n y=1 C u, y + ρ 2 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 3/2 1 n y=1 C u, y + ρ 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 1 n y=1 C u, y + ρ + 1 ≤ 1 √ n 1 n y=1 C u, y + ρ 3 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 1 n y=1 C u, y + ρ + 1 ≤ 1 √ n 1 n y=1 C u, y + ρ 3n n y=1 C u, y + ρ+ 1 ≤ 1 √ n 1 ρ 3n ρ + 1 ≤ 4 √ n ρ 2 .We next bound the entry of the Hessian matrix corresponding to u ′ = u = v = v ′ ; the same bound can be shown to hold for all entries where u = v. Assuming w.l.o.g. that y =u C u, y > y =v C v, y ,|∇ 2 C uu ′ ,C vv ′ ψ Q ρ (C)| ≤ 1√ n y =u C u, y + ρ n y=1 C u, y + ρ 2 n y=1 y =y C y, y + ρ n y=1 C y, y + ρ 2 3/2 C u,u y =u C u, y + ρC v,v ( n y=1 C v, y + ρ) 3 ≤ 1 √ n C u,u y =u C u, y + ρ C v,v ( n y=1 C v, y + ρ) 3 ≤ 1 √ n C u,u y =u C u, y + ρ 1 ( n y=1 C v, y + ρ) 2 ≤ 1 √ n 1 ρ 3 .The smoothness parameter β ρ in Table 2 then follows from the above bounds.G-mean. For the G-mean performance metric, ψ G (C) = n y=1Cy,y n y=1 C y, y 1/n is not Lipschitz over C D . We now explicitly derive the form of θ for this performance metric. C y,y n y=1 C y, y 1/n = 2ρ 1/n , which gives us θ(ρ) ≤ 2ρ 1/n . Next, we provide the gradient ψ G ρ .∇ C uu ′ ψ G ρ (C) =      1 nCu,y+ρ n y=1 C u, y +ρ 1 n −1 y =u C u, y ( n y=1 C u, y +ρ) 2 y =u Cy,y+ρ The Lipschitz constant for ψ G ρ is then obtained by bounding the norm of the above gradient.∇ψ G ρ (C) ∞ ≤ max u ∈ [n]1 n C u,u + ρ n y=1 C u, y + ρ The Hessian for ψ G ρ takes the form: ∇ 2 C uu ′ ,C vv ′ ψ G ρ (C) =                                                         if u ′ = u = v = v ′ or u ′ = u = v = v ′ or u ′ = u = v = v ′ 1 n 2Cu,u+ρ n y=1 C u, y +ρ 1 n −1 Cv,v+ρ n y=1 C v, y +ρ 1 n −1 y =u C u, y ( n y=1 C u, y +ρ) 2 y =v C v, y ( n y=1 C v, y +ρ) 2 y =u,y =v Cy,y+ρ n y=1 C y, y +ρ1/n if u ′ = u = v = v ′ − 1 n 2Cu,u+ρ n y=1 C u, y +ρ 1 n −1 Cv,v+ρ n y=1 C v, y +ρ 1 n −1 y =u C u, y ( n y=1 C u, y +ρ) 2Cv,v ( n y=1 C v, y +ρ) 2 y =u,y =v Cy,y+ρ Cv,v ( n y=1 C v, y +ρ) 2 y =u,y =v Cy,y+ρ n y=1 C y, y +ρ 1/n otherwise.The smoothness parameter β ρ is then given by the following bound on the norm of the Hessian:∇ 2 ψ G ρ (C) ∞ ≤ max u,v ∈ [n]1 n 2 C u,u + ρ n y=1 C u, y + ρ 1 n −1 C v,v + ρ n y=1 C v, y + ρ 1 n −1 max{C u,u , y =u C u, y } ( n y=1 C u, y + ρ) 2max{C v,v , y =v C v, y } ( n y=1 C v, y + ρ) 2 ≤ max u ∈ [n]1 n 2 C u,u + ρ n y=1 C u, y + ρ 

Footnote
1 : For all performance metrics considered in this paper, higher values indicate better performance.
4 : Since a plug-in classifier constructed from a gain matrix is invariant to scaling of entries of the matrix, it suffices to perform the search over gain matrices with bounded entries.
2 : ) [1] as the expected utility maximization setup and is different from the decision-theoretic setting that they consider, where one looks at the expectation of a non-decomposable performance metric on m examples, and seeks to maximize its limiting value as m → ∞.