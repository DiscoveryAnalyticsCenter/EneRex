Action Recognition with Image Based CNN Features

Abstract
Most of human actions consist of complex temporal compositions of more simple actions. Action recognition tasks usually relies on complex handcrafted structures as features to represent the human action model. Convolutional Neural Nets (CNN) have shown to be a powerful tool that eliminate the need for designing handcrafted features. Usually, the output of the last layer in CNN (a layer before the classification layer -known as f c7) is used as a generic feature for images. In this paper, we show that f c7 features, per se, can not get a good performance for the task of action recognition, when the network is trained only on images. We present a feature structure on top of f c7 features, which can capture the temporal variation in a video. To represent the temporal components, which is needed to capture motion information, we introduced a hierarchical structure. The hierarchical model enables to capture sub-actions from a complex action. At the higher levels of the hierarchy, it represents a coarse capture of action sequence and lower levels represent fine action elements. Furthermore, we introduce a method for extracting key-frames using binary coding of each frame in a video, which helps to improve the performance of our hierarchical model. We experimented our method on several action datasets and show that our method achieves superior results compared to other stateof-the-arts methods. PCA ... Keyframes Heirarchy structure Compute nal video feature Ch Bag of snippets histogram classi er SVM classi er Predicted acions lables

Introduction
A current challenge in computer vision is understanding how neural network models, which have been so successful in static image analysis tasks like recognition and segmentation, could be extended to video. * Authors contributed equally.   Figure 1. Overview of our method; given a video, we first compute CNN features for each frame then map them into a short binary code space. We track the changes in each bit of the binary codes across the time to select key-frames. Video snippets between consecutive key-frames feed into a hierarchical decomposition. PCA applies on each level of hierarchy to reduce the dimension in each level. We stack all levels as a vector representation for a video snippet. In the last steps, we build a histogram of temporal words for all the videos and train a classifier to predict action labels.These deep learning models provide a unified approach to image analysis pipeline in a single learning frame work under a deep neural network structure  #b14  #b28  #b30 . They take raw images as input and produce a category label for the image as an output. Given a large amount of training data the traditional backpropagation algorithm effec-tively learns the parameters in the network. A very successful neural network structure for image classification is the Convolutional Neural Network (CNN)  #b14 . Several CNN architectures have shown state-of-the-arts performance on object recognition  #b14  #b28  #b30  #b26 . The output of the last layer (the layer before the classification layer), known as f c7, can be used as a generic image descriptor for other recognition tasks (e.g. attribute classification  #b40 , scene recognition  #b41 ).Learning similar networks for videos has remained a challenge. It requires a large amount of supervised video data and very extensive computational resources. There have been efforts on designing CNN for videos  #b10  #b27  #b35 . In this paper, we show how f c7 features, trained image datasets, can be used as a video descriptor. Training a CNN with images is much cheaper than with videos; therefore, having a video feature constructed by image based CNN represents a major saving of computational costs. The keyidea behind our method is to track the changes in the f c7 feature space across the time. We showed that even a very similar frames may have different f c7 features, and that difference captures important properties of video motion. We build a hierarchical structure that captures the differences between frames of a video in a coarse to fine manner. Figure 1 shows an over view of our approach. In order to focus resources on meaningful sub-videos, we introduce a novel key-frame extraction method using binary coding of frames. Our binary key-frame extraction improves performance on the action recognition task. Our experiments shows stateof-the-arts results in several standard datasets for human action recognition.The rest of our paper is organized as follows. In Sect. 1.1 reviews the related work on action recognition using both shallow and deep architectures. In Sect. 2 introduces CNN Pyramid Architecture for Action Recognition, afterward we describe our experimental cases and the results in Sect. 3. Furthermore, the application of proposed method will be available on github.

Related work
Action recognition methods can be divided into two categories of approaches: classical models which use handcrafted features, and deep models using deep-learned features. Classical Models are standard approach to address the video classification problem using local features  #b3  #b32  #b37 . They have three major stages: First, extracting local visual features (informative regions of videos) by dense or spare interest points [20,  #b21  #b22 , which tends to track the moving objects in the video. Dense interest points sampling perhaps the most powerful such method  #b32 . Second, the extracted features are encoded in the form of Bag of Features (BoF) to represent the entire video in a vector space. Third, the vec-tors, along with their category labels, are used to construct a classifier (e.g. SVM) to categorize the actions.Furthermore, range of 3D (x,y,t) representation method have been developed to extract spatio-temporal descriptors around the detected local interest points, such as Har-ris3D  #b18 , Histogram of Gradient (HOG)  #b2 , and Histogram of OpticalFlow (HOF) [20]. However, several works have been done to improve recognition performance with different video representations models  #b34  #b33  #b24 .In this paper, we replaced the hand-crafted local descriptors with CNN representation to achieve the high level semantic information. Deep Models use deep neural networks for action recognition. Deep Neural Networks recently have shown successful results on image-based recognition tasks  #b15  #b28  #b39 ; also there have been a number of studies have been a deep architectures for action recognition  #b27  #b12  #b35  #b10  #b0 . Ji et al.  #b10  represent a 3D convolutional neural network which is an extension of 2D ConvNet for video domain, and applied it to a large-scale video dataset. However, they could not achieve the state-of-the-arts results of classic methods with hand-crafted features. Simonyan et al.  #b27  designed a two-stream architecture of ConvNets to capture appearance information from individual frames as well as motion information between consecutive frames; 1) Spatial stream captures appearance information from any individual frame using a pre-trained CNN based on ImageNet dataset. 2) Temporal stream extracts optical flow to capture motion along the video frames. In very recent work, Wang et al.  #b35  presented a video representation model called trajectorypooled deep-convolutional descriptor (TTD) and showed superior results on action recognition task. They used both hand-crafted features to extract trajectories and a twostream ConvNet for extracting feature maps. TTD is extracted through sampling and pooling trajectories over the convolutional feature maps. Hierarchal structure models are becoming popular in action recognition methods because of their ability to represent the information of a video in a multi-level fashion. This is beneficial for describing complex human actions  #b17  #b16  #b8 . Lanet al.  #b17  present an unsupervised method for building hierarchical models to represent human actions using multiple finer-grained elements, called Midlevel Action Elements (MAEs). Each MAE describes an individual action-related segments in a video. The method can automatically discover action-related segments to build a hierarchy of MAEs for the given action.We build a hierarchical model inspired by the Felzenszwalb et al.  #b4  method for representing shapes in a hierarchy of curves. Instead of MAEs we introduce subactions, where each sub-action represents a different level of granularity of the entire action.Our contributions is a novel method for human actions representation in video, using CNN features, where the underlying network is trained only on images. We parse a complex action into a set of simple sub-actions through a hierarchical structure. Additionally, we introduce a method based on binary coding to detect sub-actions automatically. Moreover, this model represents a video compactly.

CNN Feature Pyramid Architecture
In this section we describe our proposed method which captures human motion through a hierarchical structure. The pipeline of our proposed method is shown in Figure 1. It includes four phases (1) Spatial and temporal feature extraction (2) Building a pyramid (3) Creating a video representation (4) Classification. In the following sections we describe each step in detail.

Spatial and Temporal
Spatial Features: We simply use the AlexNet architecture  #b14  pre-trained on ImageNet dataset. We utilize the output of f c7 layer of this CNN for representing spatial information. Temporal Component: More important is how we use CNN features to represent temporal variations in a video. While previous CNN based methods for action recognition use optical flow as a second channel to capture motion information, instead we use what we refer to as "CNN flow". We will see that CNN flow captures informative features about image movement. Figure 2 shows samples of CNN flow computed from a golf pitching snippets.Given a snippet of a video, we next describe a hierarchical model that computes the flows in the CNN feature space (CNN flow) in a coarse to fine fashion. This idea was first used by  #b4  to describe curves and shapes in a coarse to fine fashion. We then compute a semantic feature for each video snippet. Later, in section 2.3 we explain how we select snippets from a video. We consider each snippet as a temporal word. In order to create a vector representation of an entire video, we adopt a bag-of-words technique to construct a histogram of temporal words.

Pyramid of CNN Flows
Most actions consist of sub-actions. For example answering phone includes sub-actions such as stretching arm, grabbing the phone, pulling the arm. Hence, to recognize an entire action, we should recognize these sub-actions.We describe a method which can extract expressive and discriminative sub-actions from a video snippet. In a given video snippet, inspired from  #b4 , we capture coarse information by looking at far apart frames in the snippet and compute the CNN flows between those frames. At the next level of the hierarchy, we cut the snippet in half and compute the CNN flow for each sub-snippet. This process cre-ates a binary tree structure; each node in the tree is a CNN flow for a sub-snippet of the video. The higher levels of the binary tree (closer to the root) represent the coarse information of the motion in the snippet and the lower levels (closer to the leaves) represent fine motion information. Figure 2 depicts a schematic illustration of our hierarchical structure for modeling the motion information in a video snippet.A vector representation can be obtained by stacking all the CNN flows across the binary tree. This vector representation may be very high dimensional because each CNN feature has 4096 dimension. Therefore, we reduce the dimension by applying PCA at each level of the tree.Formally, let V n , be a video snippet with V n = {v i : i = 1, ..., M n }. We extract CNN feature vectors X n from the frames, which is denoted byX n = {x i : i = 1, ..., M n }. Afterward, we take frames K n = {k i : i = 1, ..., M m } , where k i (i = 1, ..., M m ) is the CNN feature vector of frame i.In the next step we organize the keyframes into a hierarchy and denote each level of computed features in the hierarchy as H n = {h i : i = 1, ..., M n }, where h i is the CNN flow; the difference between last keyframe and first keyframe in that particular pyramid level. The first level of the pyramid computes a feature vector from the difference between last keyframe and first keyframe in the video snippet:h 1 = k M − k 1In the next level of pyramid the video snippet will be divided in two parts and computes h 2 and h 3 recursively;h 2 = k (M/2) − k 1 and , h 3 = k M − k (M/2)+1We follow the same procedure in all the levels of pyramid, and the final feature vector would be:C hi = [h 1 , h 2 , ..., h M ]in any individual level of pyramid the length of feature is 4096 (same as CNN features). To reduce the dimension, we applied PCA on each level of the pyramid to decrease the dimensions.

Snippet Selection
To capture motion across the video, we need to select parts of video which are discriminative and include temporal information to describe a particular motion. CNN flow features in a high frame rate video may be so tiny that does not provide any information. Therefor, selecting the informative parts of video is critical. We need to select a subset of frames, which can represent a summarization of the video. We refer to this subset of frames as key-frames. Here, we discuss about two different approaches to find keyframes. We consider frames between two consecutive keyframes as a snippet. In following section we represent two snippet selection strategies based on key-frames.Keyframes CNN features k1 kM k1 k(M/2) k(M/2)+1 kM k1 ki ki+1 kj kj+1 kn kn+1 kM h1 = kM -k1 h2 = k(M/2) -k1 h3 = k(M/2)+1 -kM h4 = ki -k1 h5 = ki+1 -kj hM-1 = kj+1 -kn hM = kn+1 -kM ...To select snippets, we consider two approaches; overlapping windows and keyframe selection using binary codings of the features.Overlapping Windows: Given a video, we sample the key-frames by skipping a fixed number of frames. We choose a window of length l then we overlaps the windows by stride of size s. It means we move the window and jump over each s frames. We consider each window as a snippet. We varies the l and s and generates several video snippets.Key-frame Coding: The Overlapping Windows is a kind of brute forcing strategy. Its not efficient and neither optimized. Instead, we propose an efficient technique that can generates expressive video snippets. We expect a video snippet to have enough motion information that can express a part of action and at the same time it should not be so long that includes irrelevant motions. We create a binary code of length b for each frame on CNN feature space. These binary codes should have similar hamming distance for similar points in the CNN feature space. We use Locality Sensitive Hashing (LSH) to hash each frame of a video into a binary space. By moving across the frames, we pick the frames that their binary codes are different from their previous frames. We consider those frames as key-frames and a snippet will be a part of video between two consecutive key-frames. By varying the code length b we can obtain longer or shorter snippets. The longer the code length, the shorter the snippet size. Figure 3 illustrates our approach for extracting the video snippets based on key-frame coding.Difference between features in two consequent frames, in a high frame rate video, is negligible; otherwise, there is a magnificent movement through the frames. At this moment, the binary values in vector emerge to change and potentially it shows semantic changes. 

Key-frame selection
(d) key-frame selection Figure 3. Extract Binary key-frames; (a) First parse input video to frames, (b) extract deep-learned features for video frames, (c) then make binary vector for extracted feature vector. Afterward, we observe changing of hamming distances between two consecutive frames during the time. Once any change happened in binary codes between two frames we select the frame as key-frame, denoted by a green mark. (d) sequence of frames between two consecutive key-frames considered as a snippet (noted by S1, S2, S3)

Bag of snippets
To evaluate the Pyramid CNN, we use a standard bag-offeatures approach. We first construct a codebook for each level of the pyramid. We fix the number of dictionary elements to 4000 for each level. To limit the complexity, we initialize k-means 10 times and keep the result with the lowest error on validation set.Descriptors are assigned to their closest dictionary elements using Euclidean distance. The resulting histograms of temporal word(snippet) occurrences are used as video descriptors. For classification we use a non-linear SVM with a χ 2 -kernel. In the case of multi-class classification, we use a one-against-rest approach and select the class with the highest score.  Table 3. Accuracy per action class in the KTH dataset.  

UCF Sport


Experiments
In order to compare our method with state-of-the-arts methods, we perform experiments on three action datasets.

Datasets
We evaluate our method on three different datasets, including KTH  #b25 , UCF-11  #b20  and UCF sport  #b23   #b38  93.7% Wang et al.  #b32  85.6% Incremental Activity Modeling  #b7  54.5% Le et al.  #b19  93.9% Le et al.  #b19  86.5% Liu et al.  #b20  71.2% Gilbert et al.  #b5  93.9% Kovashka & Grauman  #b13  87.2% Ikizler-Cinbis et al.  #b9  75.2% Dense Trajectory  #b31  94.2% Dense Trajectory  #b31  89.1% Dense Trajectory  #b31  84.2% Kovashka & Grauman  #b13   #b25 , we train a multi-class classifier and report the average of accuracy over all classes as performance measure. UCF-11 Human Action Dataset  #b20  is more challenging dataset in term of large variations in camera motion, illumination, viewpoint, cluttered background, etc. UCF-11 is a collection of 11 human action categories, 1600 sequences in total. Action categories include: basketball shooting, biking/cycling, diving, golf swinging, horse back riding, soccer juggling, swinging, tennis swinging, trampoline jumping, volleyball spiking, and walking with a dog. We should note that UCF-11 is the extended version of UCF Youtube action dataset, which was a collection of 1200 video samples divided in these 11 action categories. Similar to the original setup  #b20  we use leave one out cross validation (LOOCV) for a per-defined set of 25 folds. Performance measure is calculated by average accuracy over all classes. UCF Sport Dataset  #b23  contains 10 sport actions in 150 video samples: swinging, diving, kicking ball, weight lifting, horse riding, running, skateboarding, swinging (on the bench), golf swinging and walking. We used the setup recommended in  #b23 , using a Leave one out cross validation (LOOCV) scheme, train a multi-class classifier and report the average accuracy over all iterations.

Experimental Setting
Evaluation procedure is designed in two experimental cases. In regards to two different snippet extraction methods, the first experimental case is based on overlapping windows and the second experiment performs under binarybased snippet extraction. In following, we describe the setup of each experimental case as well as our baseline in details. Baselines The baseline of our experimental cases is designed to follow two purposes; first, evaluate our method disregards to the state-of-the-arts, second, discover the fact that our method actually capture the motion information regardless to visual appearance and background. Hence, we consider only visual information for feature extraction. We consider fixed-sized snippets (in our experiments 20-frames snippet windows), select alternate frames in each snippet and stack correspond deep-features to build the snippet descriptors. Then, we apply PCA for feature reduction. This technique leads to generate only visual representation of videos. The rest, would be similar to our standard experimental pipeline setup. Experimental Cases As mentioned above, we consider two different experimental cases for the snippet extraction methods: 1) overlapping windows the first experimental case is the snippet-based, which has static pre-defined snippet size. The first and last frame of any snippet indicated as keyframe. We applied several experiments to find most appropriate snippet size. According to the results, the best performance is achieved on snippet length by 20-frames. Also, considering N-frames overlapping on snippets.2) binary key-frame selection snippet the second experimental case is based on detected key-frames by binary method. In the snippet-based technique, each snippet comes with a different size. The size of binary code is fixed on 16-bits. The criteria to select a frame as key-frame is to have a hamming distance equal to 1 between two consecutive frames. We employed Iterative Quantization (ITQ)  #b6  hashing method, which is a method based on LSH to learn binary attributes during several iterations. The results of this binary code technique could outperform other state-of-thearts hashing methods. We applied ITQ under 50 iterations to compute binary codes of any individual extracted feature vector with original length of 4096. Feature Extraction Most existing works in action recognition use complex structure of handcrafted features as inputs, instead we focused on CNN global features, which has shown promising performance on recognition tasks recently  #b14 . More precisely, in our implementation, we choose the output of f c7 layer of AlexNet layers  #b14 . More precisely, to extract AlexNet features, we use CAFFE  #b11 , due to their promising performance and accuracy. The Outputs of Deep-net represent spatial features which capture static visual appearance information, obtained from single frame images (resized to 224 × 224 × 3). Pyramid Setup The pyramid aims to describe the dynamic motion information using a hierarchical structure. In our setup the pyramid consist 4 levels. First, video parse to snippets, then individual snippet frames feed to the first level of pyramid. In the second level of pyramid, snippet frames divided by two parts, then in the third level snippet takes in four parts, and so on. In the last level the snippet is divided into 10 parts, to capture finer sub-actions. After computing full feature vector across the pyramid levels, the snippet is represented as a single feature vector by length of 69631 (17 × 4096). In order to reduce the dimension of the final feature vector a PCA applied on each pyramid level separately. Computed feature size on each level is 4096 which is reduced to 100 after applying PCA. Thus, the final feature vector has a dimension of 1700, which represents entire snippet.

Experimental Results
We applied our method on three datasets: KTH, UCF-Sport Action and UCF-11 Action datasets. We summarized the results of action recognition accuracy across these datasets in Table 1. The table shows the results of our approach in compare with the state-of-the-arts. Our results improves the accuracy of action recognition in these datasets.

Results on KTH Dataset
To evaluate our method on KTH dataset we followed similar setup as  #b25 . Furthermore, we changed several parameters to understand how changing different parameters effects on the final performance. The experimental parameters are listed as below: Binary Size varies in range of 8, 10, 16, 20, and 32.Overlapping window size parameter also can effect on the recognition accuracy. We tried 20, 30, 40, and 50 frame length for snippets.Pyramid levels indicate how much the fine sub-actions can be captured. The longer pyramid captures smaller subactions. In our experiments we tried pyramid with 1, 2, 3, and 4 levels.The results under different parameters is shown in Figure 7. Figure explains that increasing the length of overlapping window decrease the recognition accuracy. More levels in the hierarchy can lead to better performance, since model would be able to capture more detailed information of the motion in the snippet. Figure 6 shows confusion matrix per action class based on on binary key-frame selection snippet method in KTH dataset. The best accuracy appears in binary size 16 with 4 levels in pyramid. A detailed results per action class are shown in Table 3; overlapping window snipped, binary keyframe selection, and our baseline.

Results on UCF Sport Dataset
In 3.3.1, we present an ablation study of the effect of changing our parameters on final recognition accuracy. Similar experimental results are presented in Figure 8 for UCF-Sport dataset. Since UCF Sport video samples are short,   Overall, the best accuracy achieved on the snippet with length 20 and 4 levels in the pyramid. Figure 8 (a) shows that increasing size of binary vector can improve recognition accuracy. Figure 8 (b) tracks the changes in overlapping window length. Growing the snippet length comes with lower recognition performance, and Figure 8 (c) represents the effect of different levels in pyramid.

Results on UCF11
Experiments for UCF-11 dataset are performed under a 25 fold LOOCV technique as suggested in original setup  #b20 . We use predefined fixed parameter for binary size 16, overlapping window length 20, and four levels in the pyramid. The results obtained for our proposed methods; snipped, binary, and baseline summerized in Table 1, as well as a confusion matrix with more details shown in Figure 5.The results indicate the robustness of our method across different parameters. Our method improve action recogni-tion performance over the best state-of-the-arts results.

Conclusion
We introduced a feature representation for videos that outperforms state-of-the-arts methods on several datasets for action recognition. Our representation is achieved by a hierarchical structure of CNN features where the underlying network trained by image data. Inspired by optical flow we introduced CNN-flow were it is simply subtraction of two CNN features across time. We proposed a novel technique to find key-frames in a video such that the video snippet inbetween two key-frames caries considerable amount of information.Furthermore, the experimental results show the proposed method achieves better performance on action recognition accuracy compared to other reported state-of-the-arts results as well as standard baselines.