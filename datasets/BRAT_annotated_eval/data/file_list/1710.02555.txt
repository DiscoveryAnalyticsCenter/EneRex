Model Predictive Path-Following for Constrained Differentially Flat Systems

Abstract
For many tasks, predictive path-following control can significantly improve the performance and robustness of autonomous robots over traditional trajectory tracking control. It does this by prioritizing closeness to the path over timed progress along the path and by looking ahead to account for changes in the path. We propose a novel predictive pathfollowing approach that couples feedforward linearization with path-based model predictive control. Our approach has a few key advantages. By utilizing the differential flatness property, we reduce the path-based model predictive control problem from a nonlinear to a convex optimization problem. Robustness to disturbances is achieved by a dynamic path reference, which adjusts its speed based on the robot's progress. We also account for key system constraints. We demonstrate these advantages in experiment on a quadrotor. We show improved performance over a baseline trajectory tracking controller by keeping the quadrotor closer to the desired path under nominal conditions, with an initial offset and under a wind disturbance. The authors are with the Dynamic Systems Lab (www.dynsyslab.org) at

I. INTRODUCTION
As autonomous robots, such as unmanned aerial vehicles (UAVs), wheeled vehicles, legged robots and mobile manipulators, are more substantially utilized in tasks including manufacturing, transportation, mapping  #b0 , and inspection  #b1 , they are required, even in the event of disturbances, to exhibit high-performance and safe behavior.One potentially successful approach to ensure this safe behaviour is to enhance robustness to disturbances by prioritizing closeness to a desired geometric path. In path-following, in contrast to trajectory tracking, the reference is a geometric path exempt from any preassigned time-dependency. Pathfollowing overcomes a limitation of trajectory tracking which is that, if the robot loses track of the reference, it may discourse from the path in an attempt to align with the time-dependent reference and as such potentially collide with surrounding obstacles, reach saturation limits or exhibit some other unsatisfactory behaviour  #b2 .Another potentially successful approach to ensure this safe behaviour is to enhance performance by predicting ahead in order to prepare for changes in the path. Model predictive control (MPC) has demonstrated high-performance  #b3  by optimizing over a prediction horizon while still explicitly adhering to constraints on the states and inputs of the system  #b4 .Considering these approaches, the aim of this paper is to design and implement a controller that predicts ahead to accurately and robustly follow a curved path while adhering to key system constraints. In particular, we consider predictive control with a path-based cost, which, when making use of the differential flatness property of many robotic systems, is subject to only linear models as demonstrated in Fig. 1. In order to do this, we now consider literature in three areas: path-following, MPC and differentially flat systems.Many path-following approaches are not easily integrated into the optimal control problem (OCP) of a model predictive framework because their objective is to modify existing trajectory tracking control or to stabilize a set of trajectories. One such approach, from the early work on path-following, considers converting an existing tracking controller into a path-following controller by re-weighting the relative importance of spatial convergence to time convergence  #b5 . Another more recent approach considers transverse feedback linearization to stabilize the path-following manifold or the set of trajectories that allow convergence to the path  #b6 . Consideration of state and input constraints is difficult in both approaches.Two path-following approaches have been used in a model predictive framework. In the first approach  #b7 , the kinematic model of a unicycle vehicle is rewritten in terms of a spatial and orientation error model defined with respect to a pathattached frame. The rotation rate of the vehicle is controlled using static feedback linearization of this error model. This approach has been extended to work within Nonlinear Model Predictive Control (NMPC)  #b8  for visual teach and repeat (VT&R)  #b9 . However, to avoid a singularity in the error model, the vehicle needs to be closer to the path than a distance of one over the maximum path curvature.To avoid this restriction, we consider an alternative approach where a separate path dynamic is proposed  #b2 . Specifically, the desired geometric path is parametrized in terms of a path variable θ whose dynamics describe the motion of a virtual vehicle along the path. Moreover, the path-following problem is separated into a geometric task, where the system is required to converge to the path, and a secondary dynamic task, where the system is required to satisfy a dynamic specification, such as a speed assignment, along the path. This path-following approach is combined with NMPC by extending the nonlinear system dynamics with the introduced path dynamic  #b11 ,  #b12 . Fundamentally, in the NMPC the evolution of the path state, and correspondingly the reference on the path, is optimized alongside the system state. This describes the predictive path-following problem.A drawback of this predictive path-following problem, highlighted in simulation for a crane in  #b13  and quadrotor in  #b14 , is that the resulting optimal control problem is subject to two nonlinear models and system constraints making efficient implementation online in a high-frequency feedback control loop difficult.We investigate differential flatness, which in conjunction with linearization techniques, can be used to reduce the complexity of the control design. Many physical systems, including cranes, cars with trailers and quadrotors, can be described by nonlinear models exhibiting the property known as differential flatness  #b15 ,  #b16 . Intuitively, differential flatness allows us to separate the nonlinear model into a linear dynamics component and a nonlinear transformation.This property has been utilized in both feedback and feedforward linearization approaches wherein a linear controller is designed based on the linear dynamics term and an inverse term is then used to correct for the nonlinearity in the model  #b17 ,  #b18 . Feedforward linearization differs fundamentally from feedback linearization in that the desired flat state instead of the measured flat state of the system is used in the inverse term. Feedforward linearization aims to overcome the robustness issue of feedback linearization. Specifically, this robustness issue is a result of a potential parametric uncertainty of the model leading to inexact pole-zero cancellation  #b19 . Given the computational and robustness advantages of feedforward linearization, our approach incorporates this idea to solve the predictive path-following problem.The contributions of this paper are then three-fold. Our first contribution is to introduce a Flatness Approach to Predictive Path-following (FAPP) which provides novelty in two aspects. Firstly, in contrast to related approaches in Section IV, it combines MPC and feedforward linearization in a novel way. Secondly, it provides novelty in demonstrating that by incorporating a key result from exact pathfollowing in Section III-C, we can reduce the predictive pathfollowing problem to solving a quadratic program (QP) at each iteration. The second contribution is to detail how such an approach can be applied to a quadrotor in Section VI. In the final contribution, we demonstrate the value of FAPP in terms of robustness and accuracy over a conventional trajectory tracking controller on a quadrotor.

II. PROBLEM STATEMENT
Consider a continuous-time, nonlinear system model of the form:ẋ (t) = f (x(t), u(t)), x(0) = x 0 ,(1)with t ∈ R, x(t) ∈ X ⊆ R n , u(t) ∈ U ⊆ R m and f a smooth function. Given a path P , described by a map that projects the real interval [θ 0 , θ 1 ] to the state space,P = {x ref ∈ R n | x ref = p(θ(t)), θ ∈ [θ 0 , θ 1 ]},(2)we consider the path-following problem given in Problem 1. Problem 1: Design a controller that achieves the following:P1 (Geometric Convergence) The path error vanishes asymptotically: lim t→∞ (x(t) − p(θ(t))) = 0.P2 (Dynamic Specification) The system (1) achieves some dynamic specification, such as a desired speed, that moves it forward along the path.P3 (Constraint Satisfaction) The state constraints, x(t) ∈ X ⊆ R n , and input constraints, u(t) ∈ U ⊆ R m , are adhered to for all time.Subsequently, we assume that (1) is differentially flat, see Section III-A, and propose a scheme for model predictive path-following control to solve the considered problem. We treat the path parameter θ as an additional state variable in an expanded predictive setup and obtain its evolution and the real system input by solving an open-loop optimal control problem.

III. BACKGROUND


A. Differential Flatness
We recall the formal definition of differential flatness.Definition 1: A nonlinear system model (1) is differentially flat if there exists ζ ζ ζ(t) ∈ R m , whose components are differentially independent, such that the following holds  #b16 :ζ ζ ζ = Λ(x, u,u, . . . , u (δ) )(3)x = Φ(ζ ζ ζ,ζζζ, . . . , ζ ζ ζ (ρ−1) ) (4) u = Ψ −1 (ζ ζ ζ,ζζζ, . . . , ζ ζ ζ (ρ) ),where Λ, Φ and Ψ −1 are smooth functions, δ and ρ are the maximum orders of the derivatives of u and ζ ζ ζ needed to describe the system and ζ ζ ζ = [ζ 1 , . . . , ζ m ] T is called the flat output.

B. Feedforward Linearization
The proposed coupling of feedforward linearization and MPC, as seen in Fig. 1, uses the linear flat model (9a) in a feedback MPC. The MPC outputs z d and v d which are then fed through the inverse term  #b9 . Note that in this approach we ensure adherence to the initial condition requirement of feedforward linearization in Theorem 1 by feeding back our measured flat state z into the MPC where we re-optimize for our updated desired trajectory, z d and v d .

C. Exact Path-Following
We emphasize a key result from exact path-following (which is a subset of path-following problems that assumes an exact model of the system that starts precisely on the path). In  #b20 , the feedforward linearization is used to determine an optimal feedforward control that moves a differentially flat system forward along a path. Sufficient conditions for guaranteeing a path in the flat output is exactly followable by a constrained differentially flat model are given. Consider a regular parametrized path,P = {ζ ζ ζ ref ∈ R m | ζ ζ ζ ref = p(θ(t)), θ ∈ [θ 0 , θ 1 ]}, described in the flat output space.Theorem 2: From  #b20 : Given a nonlinear differentially flat system (1) and a path P provided that p(θ) ∈ C ρ , i.e., it is ρ-times differentiable and the ρ th derivative is continuous, where ρ = max ρ i , and x 0 = Φ(·)| p(θ(0)) , i.e., it starts on the path and at the beginning of the path, then the dynamics of (1) under the feedforward control u = Ψ −1 (·)| p(θ(t)) are equivalent to a linear single-input system in normal form:s = A p s + B p w,(11)where s = [θ,θ, . . . , θ (ρ−1) ] T , B p = [0, . . . , 0, 1] T , and A p contains I (ρ−1)×(ρ−1)in the upper right hand corner. Theorem 2 reduces the dynamics of a path-attached differentially flat system to a linear single-input model. We use this to represent the dynamics of our path-attached virtual vehicle, thereby giving it the same dynamic model that our differentially flat system exactly following the path would have.

IV. RELATED WORK
Feedforward linearization has been coupled with prediction or path-following before, but not with both. We showed a path-following problem that included feedforward linearization in Section III-C. We now briefly describe related work that couples feedforward linearization and the result from Theorem 1 with prediction. Flatness-Based Predictive Control (FBPC), suggested in  #b21  and further developed in  #b22  for trajectory generation, attempts to couple prediction with feedforward linearization. As highlighted in Fig. 2, the work in  #b21  and  #b22  considers using the linear flat model (9a) for trajectory generation and then combines the feedforward term (10) with a PID controller. In  #b15 ,  #b4 , the differential flatness of the standard quadrotor model is utilized to generate minimum snap and jerk trajectories. In  #b23 , see Fig. 3, the authors use the inverse of the nonlinear model (from input u to output y), a combination of the feedforward term (10) and a term F y→z,v that maps the output y to the flat state and flat input. They then only consider a linear filter model in the MPC. A simple simulation for a SISO flat model demonstrates the potential computational benefit of the combined MPC and feedforward linearization over NMPC. We use a similar idea in Section V to reduce the computational burden of MPC in predictive path-following for nonlinear systems." , " ' (*)(10)

System
(1) V. METHODOLOGY

State Estimator


A. Overall Architecture
We term our presented method Flatness Approach to Predictive Path-following (FAPP) because the differential flatness of the system model is pertinent to the proposed architectural design in Fig. 1. We propose this design for two main reasons. Unlike related works in Fig. 2 and Fig. 3, our novel combination of feedforward linearization and MPC can easily be extended to include a path dynamic for pathfollowing. Within this design, we can significantly simplify the problem statement in Section II by utilizing the result from Theorem 2. The proposed architecture is comprised of three key components (see Sections V-B -V-D):Feedforward Linearization: Utilizing feedforward linearization of the differentially flat system (1), we reduce our model to an equivalent linear flat model (9a). We use this linear flat model in our MPC. We feed the output of the MPC through an inverse term  #b9 .Path-following: We consider a path-attached virtual vehicle, with an associated path dynamic model,ṡ(t) = g(s(t), w(t)) with t ∈ R, the path-attached virtual vehicle state s(t) ∈ R ρ , the path-attached virtual vehicle input w(t) ∈ R and g a smooth function, attached to a parametrized geometric path in the flat output space:P = {ζ ζ ζ ref ∈ R m | ζ ζ ζ ref = p(θ(t)), θ ∈ [θ 0 , θ 1 ]}. (12)We use Theorem 2 for differentially flat system (1), to reduce this path dynamic model to a linear single-input model  #b11 .Predictive Control: To solve the path-following problem a sampled data MPC strategy is considered. At each sampling time, we solve an open-loop OCP, by minimizing the cost function: J(x,û,ŝ,ŵ), which is dependent on both the sequence of predicted system statesx and inputsû and the sequence of predicted path-attached vehicle statesŝ and inputsŵ. This is subject to both the linear flat model of the system (9a) and the linear path dynamic model  #b11 . We also include additional linear constraints. To ensure the system stays close to the defined geometric path and is robust to disturbances, the cost function J(·) weights the error between the system and path dynamic with an additional dynamic specification, such as a speed assignment. In other words, it tries to enforce that the system behaves as closely as it can to the path-attached vehicle while secondarily trying to achieve a particular dynamic specification/speed. We show that for a straight line the resulting optimization reduces to a QP. For more complex curves, we propose using one iteration of a Gauss-Newton approach to obtain a QP specifically noting that the nonlinearity is only due to the nonlinear curve. For detailed assumptions necessary for a stability proof, please see  #b11 .

C. Path Following
We define our path  #b1  in Problem 1 in the flat output space as in  #b12  and address geometric convergence by minimizing the difference between our system flat output and a path-attached virtual vehicle's flat output. This can be done because from (4) and (5), the state x and input u of the nonlinear system (1) can be written directly in terms of the flat output and a finite number of its derivatives. As such defining a trajectory in the flat output ζ ζ ζ corresponds directly to an associated trajectory in x and u. We now demonstrate how the reference flat state, z ref in Fig. 1, attached to a geometric path can be simultaneously determined online with the vehicle's next desired flat state z d and flat input v d .Path Dynamics: Considering Theorem 2, we use (11) to represent the dynamics of a virtual vehicle attached to the path. We do this because we want our virtual vehicle to be representative of the actual vehicle's motion capabilities, including necessary constraints, while being constrained to the defined geometric path. In (11), we term s the path state and w the path input.Path Parametrization: Although any suitable path parametrization can be used, we consider Bézier curves,ζ ζ ζ ref = p(θ) = q j=0 q j (1 − θ) q−j θ j P j , θ ∈ [0, 1],(13)for their smoothness properties  #b14 . Differentiation of (13) allows us to obtain a reference flat state z ref parametrized in terms of the path state s and path parameters {P j } j=1,...,q :z ref = h(s, {P j } j=1,...,q ).(14)For a straight line, i.e., q = 1, (14) reduces to:z ref = Π Π Πs + Π 0 Π 0 Π 0 ,(15)where Π Π Π and Π 0 Π 0 Π 0 are constant matrices containing a combination of path parameters P 0 and P 1 .

D. Predictive Control
Using the results of feedforward linearization from Sections V-B and V-C, we can formulate a simplified OCP:Problem 2: Given a system that can be represented by a differentially flat nonlinear model (1) and a geometric path to be followed  #b12 , design the flat input v(t) and path-attached virtual vehicle input w(t) such that the following is satisfied: At every time step k, solve the OCP:min v,ŵ J(ẑ,v,ŝ,ŵ),(16)where we consider the sequence of predicted flat statesẑ, flat inputsv, path statesŝ and path inputsŵ. This OCP is subject to the equivalent linear flat model in (9a), the linear path dynamic model in (11) (which gives a corresponding reference flat state, z ref , through path parameterization (14)) and linear constraints on the optimization variables (the flat inputs and path inputs). We propose an objective function, J(·) in (16), of the form:1 2 N k=1 [e T p,kQ e p,k + e T v,kS e v,k + v T kR v k +R p w 2 k ],(17)where the first term weights the positional error e p,k , at timestep k, between the vehicle's and reference's flat outputs (geometric convergence in Problem 1):e p,k = ζ ζ ζ k − ζ ζ ζ ref,k ,while the second term tries to propel the vehicle forward with a certain velocity (dynamic specification in Problem 1):e v,k =ζζζ k −ζζζ cmd,k , (13) andQ,S,R are positive semi-definite. Note v cmd is some designed desired speed. Notice that for the straight line caseζζζ cmd,k = (P 1 − P 0 )v cmd is a constant. The last two terms in the objective function ensure regularization of the inputs.whereζζζ cmd,k = ( dζ ζ ζ ref dt |θ =v cmd ) k inAs mentioned, the proposed FAPP scheme is an extended MPC scheme. The open-loop OCP is expanded by the virtual state s and by the virtual input w. Essentially, w controls the path parameter evolution. Considering the FAPP scheme, path convergence can be weighted to be more important than speed. Note that preceding work on NMPC for path following,  #b12  and  #b14 , placed the velocity command on the virtual vehicle instead of on the actual vehicle. When the velocity command is placed on the virtual vehicle, in the event that the actual vehicle is disturbed, the virtual vehicle continues to try and reach the command velocity while pushing the actual vehicle to its saturation limits. Instead, we place the velocity command on the actual vehicle such that in the event of such a disturbance, the virtual vehicle tries to remain as close to the actual vehicle as possible, thus allowing better recovery from disturbances and mitigating potential saturation.We can demonstrate that following a straight line, parametrized as a linear Bézier curve, reduces the OCP (16)-(17) to a QP. By using that ζ ζ ζ k is a component in z k , we can rewrite the first term in  #b17 : e T p,kQ e p,k = (z k − z ref,k ) T Q(z k − z ref,k ) where Q ∈ Rρ ×ρ ,ρ := m i=1 ρ i ,is a diagonal matrix with Q 1,1 =Q 1,1 and Q ρi+1,ρi+1 = Q i+1,i+1 , i = 1, . . . , m − 1. We similarly rewrite the second term in  #b17 : e T v,kS e v,k = (z k − z cmd,k ) T S(z k − z cmd,k ) where S ∈ Rρ ×ρ is a diagonal matrix with S 2,2 =S 1,1 and S ρi+2,ρi+2 =S i+1,i+1 , i = 1, . . . , m − 1, and z cmd,k = z ref,k |θ =v cmd in  #b14 . We then discretize the linear flat model (9a):z k+1 = A d z k + B d v k .We also discretize the linear path model (11):s k+1 = A pd s k + B pd w k .Given a current measured flat state, z 0 , and a current path state, s 0 , we write lifted forms, for N prediction steps, of our discretized models:    z1 z2 . . . zN     ẑ =      A d A 2 d . . . A N d      Â z0 +      B d 0 0 . . . 0 A d B d B d 0 . . . 0 . . . . . . . . . A N−1 d B d . . . A d B d B d      B     v1 v2 . . . vN     v . (18)And in a similar manner,s =Â p s 0 +B pŵ .We also define the expanded forms of our weight matrices:Q ∈ R Nρ×Nρ whereQ = diag(Q) and similarly forŜ,R andR p . Further, we define:Π = diag(Π),Π 0 = [Π 0 , Π 0 , . . . , Π 0 ] T and z cmd = [z cmd,1 , z cmd,2 , . . . , z cmd,N ] T . We rewrite  #b17  using:N k=1 e T p,kQ e p,k = (ẑ − (Πŝ +Π 0 )) TQ (ẑ − (Πŝ +Π 0 ));N k=1 e T v,kS e v,k = (ẑ −ẑ cmd ) TŜ (ẑ −ẑ cmd ); N k=1 v T kR v k =v TRv ;N k=1R p w 2 k =ŵ TR pŵ . Substituting in our expanded models forẑ andŝ, we can simplify our objective function to a quadratic form J(ṽ) = 1 2ṽT Hṽ + f Tṽ whereṽ = v TŵT T subject to linear optimization constraints.For higher-order Bézier curves, we initializeṽ =ṽ 0 and consider one iteration of a Gauss-Newton approach to solve the nonlinear least squares problem. The Gauss-Newton step fits a quadratic to the curve locally and reduces the problem to a QP at each step. This approach has been used in NMPC  #b14 ,  #b8 . Notice that in our case, however, the nonlinearity is only as a result of a nonlinear curve while all models used are linear.

VI. APPLICATION TO QUADROTORS


A. Model
We describe how the presented methodology in Section V can be applied to a quadrotor. We refer to the standard quadrotor model,ẋ = f (x, u),  #b15 ,  #b4  with state x = (x, y, z,ẋ,ẏ,ż, R, p, q, r) and input u = (u 1 , u 2 , u 3 , u 4 ) = (T, τ φ , τ θ , τ ψ ) where x, y, z are the linear position;ẋ,ẏ,ż are the linear velocity; R is the rotation of the quadrotor body frame with respect to an inertial frame; p, q, r are the body frame rotation rates, T is the body thrust and τ φ , τ θ , τ ψ are the respective body torques. We also include a standard model of the dynamics of an inner loop controller (tuned by control parameter τ ) which takes inputs u cmd = (ż cmd , φ cmd , θ cmd , r cmd ), whereż cmd is a commanded velocity in z, φ cmd and θ cmd are commanded roll and pitch angles and r cmd is a commanded yaw velocity in the body frame, and outputs u. The detailed equations are found in the supplementary material [24].

B. Differential Flatness
The differential flatness of the quadrotor model is demonstrated in  #b15  for flat outputs ζ ζ ζ = (x, y, z, ψ). The flat state (6) and flat input (8) are shown to be z = (x,ẋ,ẍ, ...x, y,ẏ,ÿ, ... y , z,ż,z, ... z , ψ,ψ) and v = (x (4) , y  #b3  , z  #b3  ,ψ) respectively.Detailed mathematical derivations are necessary to show that the quadrotor with inner loop control dynamics does not change the differential flatness property of the original nonlinear quadrotor model (see supplementary material [24] for details). We can show that we have the same resulting linear flat model (9a) as  #b15 , however, the inverse term (10) changes to account for the inner loop controller. We highlight the high-level approach in derivation below. To show differential flatness we need to satisfy condition (3)-  #b4 .First, notice that given that the flat outputs ζ ζ ζ are comprised of some terms of state x, condition (3) is shown by definition. Similarly, condition (4) holds for the translational states of x by definition of the flat outputs. We are then left to derive R and (p, q, r)in terms of the flat state. We begin by writing R in terms of its column vectors and considering the translational acceleration in the standard quadrotor model. We derive p, q, r in terms of the flat state by taking the derivative of acceleration and using our results for R. We have shown that condition (4) holds.Finally, we demonstrate condition (5) by showing u cmd as a function of the flat outputs and their derivatives (see [24] for details).

C. Path Dynamics and Constraints
Considering ρ = 4 (obtained from the flatness derivation in Section VI-B), the linear path dynamic model for a virtual quadrotor vehicle is given by  #b11  with s = (θ,θ,θ, ... θ ). We consider two sets of constraints on the quadrotor: the first is a constraint on the body rates and the second is a constraint on the total thrust. We consider these constraints because they establish a fairly representative set of feasible quadrotor maneuvers while being bounded by convex functions, thereby still allowing a convex optimization problem.As in  #b4 , we consider the constraint on the body rates as a constraint on the jerk of the quadrotor: j min ≤ ( ... x, ... y , ... z ) ≤ j max where j min and j max are the minimum and maximum jerk, respectively. Given that this jerk constraint is affine in the flat state and we have a linear flat model (9a), the resulting constraint is linear in the optimization variablesṽ.Our second constraint on the maximum thrust  #b4  is given as:ẍ 2 +ÿ 2 + (z + g) 2 ≤ f 2 max where f max is the maximum total thrust T that the quadrotor can produce. The discretized version of the constraint can be put in lifted form  #b18  resulting in an inequality that is quadratic inẑ. We make the assumption that the quadratic coefficient is small based on the fact that it contains squares of relatively small values inB, obtained through discretization of the linear flat model (9a). We, therefore, reduce the maximum thrust constraint to a linear constraint on the optimization variablesṽ.

VII. EXPERIMENT


A. Setup
The experiments are conducted on a Parrot AR.Drone quadrotor with an overhead motion capture system estimating the state of the quadrotor. We interface with the quadrotor using the open-source Robot Operating System (ROS). The state estimator in Fig. 1 determines the flat state z at 200 Hz.The control architecture consists of two loops: an offboard outer loop running at 70 Hz and an on-board inner loop running at 200 Hz. In the experiments we compare two outer loop controllers: the first uses our proposed FAPP architecture, see Fig. 1, and the second uses a baseline nonlinear trajectory tracking controller. The baseline nonlinear trajectory tracking controller computes the desired x and y accelerations using PD control and then determines the associated pitch θ cmd and roll φ cmd commands using standard feedback linearization. The z-velocityż cmd and yaw-velocityψ cmd commands are computed using P control. In the FAPP controller, the MPC considers a look ahead time of 1s where the prediction horizon is N = 10. We consider the following weights in our objective function . We start the reference virtual vehicle on the path at P 0 (i.e., θ = 0). We investigate three cases: (i) the quadrotor starts within 0.1 m of the reference virtual vehicle and is then required to fly the geometric path (in red in Fig. 4); (ii) the quadrotor starts more than 1.0 m from the reference virtual vehicle and is then required to converge to and fly the geometric path (in blue in Fig. 4); (iii) the quadrotor starts within 0.1 m of the reference virtual vehicle but is then disturbed by wind during its flight (in green in Fig. 6). We first fly case (i) with the FAPP controller which simultaneously computes the timed reference z ref during the flight. We then use this generated trajectory as our nominal trajectory for the baseline trajectory tracking controller. All subsequent flights, cases (i) -(iii), with the trajectory tracking controller use this nominal trajectory.

B. Results
Case (i): In this case, as depicted in red in Fig. 4, FAPP reduces the root mean square (RMS) error between the quadrotor position and reference position by 90.92%.  Under nominal conditions with small initial position error, the primary advantage of FAPP is that it can predict ahead, adjust the speed of the quadrotor accordingly (speeding up on straight sections of the path), and compute an input to the vehicle that accounts for upcoming turns. As demonstrated in Fig. 5, because the baseline trajectory tracking controller does not predict ahead, the quadrotor does not accelerate fast enough in the first 2 s and therefore falls behind resulting in a final position that is 1.26 m behind the reference in Fig. 4. Case (ii): When the quadrotor has significant initial offset, the main advantage of FAPP as demonstrated in Fig. 4 is that it simultaneously adapts the reference trajectory in the optimization problem. As shown in Fig. 5, in the first 1 s both the quadrotor and reference speed up where the quadrotor tries to quickly converge to the path. At about  1.5 s, the quadrotor is close enough to the path but needs to change direction, correspondingly the reference waits for it to do so before both speed up once again. At about 3 s, the quadrotor begins to slow down as it makes the turn, which it completes at about 7 s. Although at about 7.2 s there is a small communication delay with the quadrotor, seen as a slight drift in Fig. 4, the quadrotor manages to quickly recover to speed up for the final segment of the path. Case (iii): We demonstrate the robustness of FAPP by adding a wind disturbance. As seen in Fig. 6 and Fig. 7, FAPP (green solid path) enhances disturbance recovery by slowing down the reference such that it waits for the disturbed quadrotor.

VIII. CONCLUSION
In this paper, we presented a Flatness Approach to Predictive Path-following (FAPP), which combined feedforward linearization, model predictive control and path-following. This combination has the following advantages:• Its predictive capabilities allow high-accuracy tracking around curved paths while allowing us to consider key constraints within the control design. • By simultaneously adapting the path reference, without significant additional computation, we are able to enhance robustness to disturbances. • We simplify the optimal control problem to solving one quadratic program by utilizing the differential flatness property to reduce both our nonlinear path and system models to equivalent linear ones. Furthermore, we demonstrate these advantages in experiment by implementing the presented control architecture on a quadrotor.