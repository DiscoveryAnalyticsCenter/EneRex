Lasso and equivalent quadratic penalized regression models

Abstract
The least absolute shrinkage and selection operator (lasso) and ridge regression produce usually different estimates although input, loss function and parameterization of the penalty are identical. In this paper we look for ridge and lasso models with identical solution set. It turns out, that the lasso model with shrink vector λ and a quadratic penalized model with shrink matrix as outer product of λ with itself are equivalent, in the sense that they have equal solutions. To achieve this, we have to restrict the estimates to be positive. This doesn't limit the area of application since we can decompose every estimate in a positive and negative part. The resulting problem can be solved with a non negative least square algorithm and may benefit from algorithms with high numerically accuracy. This model can also deal with mixtures of ridge and lasso penalties like the elastic net, leading to a continuous solution path as a function of the mixture proportions. Beside this quadratic penalized model, an augmented regression model with positive bounded estimates is developed which is also equivalent to the lasso model, but is probably faster to solve.

Introduction
More than 40 years ago  #b12  introduces ridge regression to overcome problems with multicollinearity. In the last decades, lasso  #b11  and derivatives like the generalized lasso  #b18 , the elastic net  #b7  or the adaptive lasso  #b20  has become common tools in regression analysis for estimating sparse coefficient vectors e.g. with only few non zeros thus leads to subset or model selection. Popular other models with comparable objective are the Dantzig selector  #b0 , the SCAD  #b5  or iterated reweighed methods as shown in  #b1 .Although the objective of the lasso and ridge approach is very different, they have several points in common:• Both methods can deal with multicollinearity and the case of fat design matrices (more columns than rows) of the independent variables do to the shrinkage.• Both methods are summarized in literature under the topic regularization and need tuning parameters say λ which leads to a path of estimates.The key difference between these methods is the functional form of the penalty. Roughly, ridge penalty is based on square values whereas lasso penalty is based on absolute values of the estimates (Fig. 1). Figure 1: Contours of lasso and ridge regression in the space (x 1 , x 2 ) of estimates Schematically view of loss (red) and penalties (blue) for lasso (left) and ridge regression (right).The red point is the ordinary least square solution, the blue point marks the optimal penalized estimate.This is often graphically illustrated as rectangle versus ball shape ( Fig. 1) for the penalty function. From this point of view both approaches seem to be incompatible. But this is not the case and in the following section, we develop pure quadratic models -not (l 1 , l 2 ) mixtures like the elastic net  #b7  with rectangular contour shapes as illustrated in Fig. 1.

Lasso and related regression problems
Given a Matrix A ∈ R m×n and a vector b ∈ R m the lasso  #b11  approach looks for a sparse x ∈ R n solution which minimizes ||b−Ax|| 2 2 . This is achieved by solving min x ||b−Ax|| 2 2 +λ T |x| with regularization parameter λ ∈ R n + where |x| = (|x 1 |, . . . , |x n |) T . This model is equivalent to the generalized lasso  #b7  with penalty function λ 1 |Dx| where λ 1 = 1, D = diag(λ).In the following derivations, we use this setting and give in the Appendix a small gams [Gams] programm which will solve (for sample data) the presented Models.

Lasso with unbounded and bounded x
We start with introducing the definition of the lasso penalized model in equation 1a 1 . We minimize the sum of the squared residuals T -defined by equation b = Ax + I -plus the strictly positive lasso penalty sum λ T |x|.x l = argminx 1 2 T + λ T |x| s. t. b = Ax + I (1a) x l = argmin x 1 2 T + λ T (x + + x − ) s. t. b = Ax + I , x = x + − x − , x + ≥ 0, x − ≥ 0 (1b)Obviously, problem 1a and 1b have the same solution, since every x ∈ R n can be decomposed in a positive x + and negative part x − . The second model is a continuous version of the first. In the case of mixed coefficients signs for x, this yields formally a model with twice columns. But this need not be a disadvantage:• In many cases, where x is restricted in the sign by the underlying real problem this is no disadvantage and is intended.• From a algorithmic point of view it is often not obligatory to use storage for two A-Matrices (one for each sign) nor to calculate for each sign the gradients e.g. A T separately. If the interface to an appropriate solver e.g. IPOPT [COIN] or NNLS  #b14  is not too tight or monolithic other strategies are obvious.The same decomposition pattern can be applied to the residual definition ( + , − ) and loss function yielding the least absolute deviation lasso  #b19  which can be solved with a pure l 1 -estimator algorithm.This derivation 1 shows that for every lasso Problem there exists a positive constrained model with equal solution set. The benefit of this derivation is, that we get rid of 3 quadrants of the cartesian coordinate system in 1.

Non negative lasso
In the following sections we focus on the sign constrained Model, see also  #b15 .x nnl = argmin x 1 2 T + λ T x s. t. b = Ax + I , x ≥ 0 (2a)The Karush-Kuhn-Tucker conditions  #b3 p.157] for the solution are:A I 0 0 A T I    x µ    = b λ , x ≥ 0, µ ≥ 0, x T µ = 0where µ is the Lagrange multiplier for the positive constraint x ≥ 0. Note, that for all nonzero x in the solution, the equations A T = λ, µ = 0 hold. This relation is extensively used in several active set algorithms for the lasso problem [FHT10, Eq. 4].

Augmented regression
The idea in this section is, to incorporate the penalty in the loss function as one additional row of A and b:x annl = argminx 1 2˜ T˜ s. t.b =Ãx + I˜ , x ≥ 0 withÃ = A λ T ,b = b 0 1,...,m m+1(3a)Notice thatÃ T˜ = A T +˜ m+1 λ where˜ m+1 is the residual for the additional equation m + 1 of the augmented system. In comparison to the analogous condition for 2a, the difference is only in the scaling of the penalty by the scalar˜ m+1 . But this scaling is for each column of A the same. If we solve 3a and define λ 1 = |0 − λ T x annl |λ then model 2a has for this λ 1 the same x solution.• The solution to this model can be calculated with e.g. non negative least square  #b14 , interior point algorithm, or other solver for constrained quadratic programming [Gams]. Because this model is -except of x ≥ 0 -a pure quadratic model, QR decomposition [GL13, p. 246] is a stable choice for solving this problem in the case of highly dependent A-columns.• To get the solution path x = x(λ), increase or decrease the value of the additionalb in 3a. In case of QR decomposition ofÃ, this can be easily done with changes in the right hand side vector Q Tb .In contrast to this model, the augmented model x T A diag(λ)x = x T Ax + x T diag(λ)x results in ridge regression  #b12  with Tikhonov matrix diag(λ).We are now able, to calculate with a pure quadratic model for the underlying lasso model the solution vector x.

Associated quadratic penalty
The idea is here to extract the implicit penalty from the augmented model 3a:x qnnl = argminx 1 2 T + 1 2 x T Cx s. t. b = Ax + I , x ≥ 0 with C = λλ T (4a)This problem has the same solution as 2a and 3a.Consider the set of x values {x ∈ R n + |λ T x = c} for which the lasso penalty will have the value c. On this set, the quadratic penalty x T Cx = (λ T x) T (λ T x) = c 2 is also constant, but with squared value. To see this, imagine the case x ∈ R 2 + . In Fig. 2 we start in the left panel with traditional ridge penalty matrix I and increase the dominance of the major axes of the ellipsoid, until it coincides with the lasso model. x −x) + x T (1 − α) 1 0 0 1 + αλλ T x, λ i = 1/x i ,x = 2 3The partial derivative of the penalty ∂ (0.5x T Cx)/∂x = λ(λ T x) = s(x)λ is for each x a multiple s(x) ∈ R of the λ-vector so that this penalty contributes in each component n similar to the objective gradient like the lasso penalty.Furthermore we can build the product of this regularization CC = C T C = sC and see that -up to a scaling factor s = λ T λ -C is a projection matrix.The contours in the x-space of x T Cx = c and λ T x = c are in both cases straight lines with the same slope because the ellipsoid of x T Cx = c has only one principal component.In conjunction with the decomposition of x = x + − x − in equation 1b it is easily seen, that it is possible to construct for every lasso problem a related quadratic penalty model. The Tikhonov matrix in  #b16 pp. 809] for the penalized model ||b − Ax|| 2 + ||Bx|| 2 is just B = λ T .Since the quadratic penalty is a strictly monotone transformation c 2 of the lasso penalty this equivalence will also hold for other loss function e.g. |b − Ax| or Huber loss  #b13 .There are several computational aspects to mention:• In comparison to "iterated Ridge Regression"  #b17 p.7] this approach does not need reweighting iterations for computing the lasso solution.• If the signs of the x j to this problem are known, multiplying the A-columns a j with sign(x j ) gives a non restricted regularized least square problem, for which the usual relations for ridge regression hold e.g. x = (A T A + C) −1 A T b depends linear on b.• We are now able to calculate with numerically very stable algorithms like SVD or QR  #b9  solutions for the underlying lasso model and compare this with solutions of other programs/algorithm like LARS  #b4 , interior point methods [COIN], or coordinate descent algorithms.

Discussion
Two of the above models are relevant for practical applications and are subject for further developments.The Model 3a which incorporates the penalty in the objective is a pure NNLS problem. Its advantage is that it can be solved via numerically stable QR or SVD algorithms. In future work it will be interesting to compare model results of traditional lasso models and algorithms -like the glmnet-library for Rwith the QR or SVD algorithms. In the case of high dimensional and dependent A-columns this could result not only in a quantitative differences in the optimizing x vector, but also in qualitative different x(λ)-paths in which other variables have been identified to be nonzero.The Model 4a introduces a quadratic penalty as the outer product of the lasso shrink vector with itself. In conjunction with the x = x + − x − decomposition we described above a simple way of how to bridge the l 1 regularization of the lasso with the l 2 regularization of the ridge regression. Probably many results for ridge and lasso regression are now interchangeable, provided that the assumptions for the penalty are not to strong. This is for instance the case if the ridge penalty matrix is assumed to have full rank. eqL2Shrink.. dev =e= Sum(allrows, sqr(Data(allrows,'b')-Sum(cols, Data(allrows,cols)*xshrink2(cols))))/2; eqRidgeReg.. dev =e= Sum(rows, sqr(Data(rows,'b')-Sum(cols, Data(rows,cols) * xRidge(cols))))/2 + Sum((cols,ccols), xRidge(cols)*RidgeMatrix(cols,ccols)*xRidge(ccols))/2; Model modBase "ols" /eqBase/; Model modLasso "lasso" /eqLasso/; Model modShrink1 "non negative lasso model" /eqL1Shrink/; Model modShrink2 "non negative augmented regression model" /eqL2Shrink/; Model modRidge "non negative ridge regression" /eqRidgeReg/;Solve modBase using nlp minimizing dev; Solve modShrink2 using nlp minimizing dev; shrinkScale = Sum(shrinkrows, abs(Data(shrinkrows,'b')-Sum(cols, Data(shrinkrows,cols)*xshrink2.l(cols)))); Solve modLasso using nlp minimizing dev; Solve modShrink1 using nlp minimizing dev; Solve modRidge using nlp minimizing dev;

Footnote
1 : s. t. = subject to, superscript (..) T =transpose of (..), I= identity Matrix, diag(v)= diagonal Matrix from vector v
2 : for solving look at http://www.neos-server.org/neos/solvers/index.html and choose a nlp solver which supports gams